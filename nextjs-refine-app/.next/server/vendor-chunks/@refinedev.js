/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@refinedev";
exports.ids = ["vendor-chunks/@refinedev"];
exports.modules = {

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/dist/esm/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/dist/esm/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   axiosInstance: () => (/* binding */ y),\n/* harmony export */   \"default\": () => (/* binding */ J),\n/* harmony export */   generateFilter: () => (/* binding */ f),\n/* harmony export */   generateSort: () => (/* binding */ h),\n/* harmony export */   mapOperator: () => (/* binding */ _),\n/* harmony export */   stringify: () => (/* reexport safe */ query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)\n/* harmony export */ });\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! query-string */ \"(ssr)/./node_modules/query-string/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);\nvar _=r=>{switch(r){case\"ne\":case\"gte\":case\"lte\":return`_${r}`;case\"contains\":return\"_like\";case\"eq\":default:return\"\"}};var h=r=>{if(r&&r.length>0){let s=[],e=[];return r.map(t=>{s.push(t.field),e.push(t.order)}),{_sort:s,_order:e}}};var f=r=>{let s={};return r&&r.map(e=>{if(e.operator===\"or\"||e.operator===\"and\")throw new Error(`[@refinedev/simple-rest]: \\`operator: ${e.operator}\\` is not supported. You can create custom data provider. https://refine.dev/docs/api-reference/core/providers/data-provider/#creating-a-data-provider`);if(\"field\"in e){let{field:t,operator:o,value:n}=e;if(t===\"q\"){s[t]=n;return}let d=_(o);s[`${t}${d}`]=n}}),s};var y=axios__WEBPACK_IMPORTED_MODULE_1___default().create();y.interceptors.response.use(r=>r,r=>{var e,t,o;let s={...r,message:(t=(e=r.response)==null?void 0:e.data)==null?void 0:t.message,statusCode:(o=r.response)==null?void 0:o.status};return Promise.reject(s)});var w=(r,s=y)=>({getList:async({resource:e,pagination:t,filters:o,sorters:n,meta:d})=>{let i=`${r}/${e}`,{current:c=1,pageSize:a=10,mode:p=\"server\"}=t??{},{headers:$,method:m}=d??{},x=m??\"get\",M=f(o),u={};p===\"server\"&&(u._start=(c-1)*a,u._end=c*a);let l=h(n);if(l){let{_sort:F,_order:S}=l;u._sort=F.join(\",\"),u._order=S.join(\",\")}let{data:v,headers:q}=await s[x](`${i}?${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(u)}&${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(M)}`,{headers:$}),O=+q[\"x-total-count\"];return{data:v,total:O||v.length}},getMany:async({resource:e,ids:t,meta:o})=>{let{headers:n,method:d}=o??{},i=d??\"get\",{data:c}=await s[i](`${r}/${e}?${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)({id:t})}`,{headers:n});return{data:c}},create:async({resource:e,variables:t,meta:o})=>{let n=`${r}/${e}`,{headers:d,method:i}=o??{},c=i??\"post\",{data:a}=await s[c](n,t,{headers:d});return{data:a}},update:async({resource:e,id:t,variables:o,meta:n})=>{let d=`${r}/${e}/${t}`,{headers:i,method:c}=n??{},a=c??\"patch\",{data:p}=await s[a](d,o,{headers:i});return{data:p}},getOne:async({resource:e,id:t,meta:o})=>{let n=`${r}/${e}/${t}`,{headers:d,method:i}=o??{},c=i??\"get\",{data:a}=await s[c](n,{headers:d});return{data:a}},deleteOne:async({resource:e,id:t,variables:o,meta:n})=>{let d=`${r}/${e}/${t}`,{headers:i,method:c}=n??{},a=c??\"delete\",{data:p}=await s[a](d,{data:o,headers:i});return{data:p}},getApiUrl:()=>r,custom:async({url:e,method:t,filters:o,sorters:n,payload:d,query:i,headers:c})=>{let a=`${e}?`;if(n){let m=h(n);if(m){let{_sort:x,_order:M}=m,u={_sort:x.join(\",\"),_order:M.join(\",\")};a=`${a}&${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(u)}`}}if(o){let m=f(o);a=`${a}&${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(m)}`}i&&(a=`${a}&${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(i)}`);let p;switch(t){case\"put\":case\"post\":case\"patch\":p=await s[t](e,d,{headers:c});break;case\"delete\":p=await s.delete(e,{data:d,headers:c});break;default:p=await s.get(a,{headers:c});break}let{data:$}=p;return Promise.resolve({data:$})}});var J=w;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBa0YsVUFBVSxVQUFVLHVDQUF1QyxFQUFFLEVBQUUsNkJBQTZCLDRCQUE0QixVQUFVLGtCQUFrQixjQUFjLGlCQUFpQixnQ0FBZ0MsR0FBRyxvQkFBb0IsVUFBVSxTQUFTLG9CQUFvQixrR0FBa0csV0FBVyx5SkFBeUosZ0JBQWdCLElBQUksMkJBQTJCLEdBQUcsWUFBWSxPQUFPLE9BQU8sV0FBVyxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sS0FBMEIsTUFBTSxtREFBUSxHQUFHLHFDQUFxQyxVQUFVLE9BQU8sNEhBQTRILHlCQUF5QixFQUFFLGlCQUFpQixlQUFlLG1EQUFtRCxJQUFJLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRywwQ0FBMEMsTUFBTSxFQUFFLG1CQUFtQixNQUFNLHdCQUF3Qiw0Q0FBNEMsV0FBVyxNQUFNLElBQUksaUJBQWlCLEdBQUcseUNBQXlDLElBQUksaUJBQWlCLGVBQWUsRUFBRSxHQUFHLHVEQUFDLElBQUksR0FBRyx1REFBQyxJQUFJLEdBQUcsVUFBVSx3QkFBd0IsT0FBTywwQkFBMEIsZ0JBQWdCLHdCQUF3QixJQUFJLElBQUksbUJBQW1CLE1BQU0sYUFBYSxPQUFPLGVBQWUsRUFBRSxHQUFHLEVBQUUsR0FBRyx1REFBQyxFQUFFLEtBQUssRUFBRSxHQUFHLFVBQVUsRUFBRSxPQUFPLFFBQVEsZUFBZSw4QkFBOEIsSUFBSSxTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUcsbUJBQW1CLE1BQU0sY0FBYyxPQUFPLGlCQUFpQixVQUFVLEVBQUUsT0FBTyxRQUFRLGVBQWUsbUNBQW1DLElBQUksU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxtQkFBbUIsTUFBTSxlQUFlLE9BQU8saUJBQWlCLFVBQVUsRUFBRSxPQUFPLFFBQVEsZUFBZSx1QkFBdUIsSUFBSSxTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLG1CQUFtQixNQUFNLGFBQWEsT0FBTyxlQUFlLFVBQVUsRUFBRSxPQUFPLFFBQVEsa0JBQWtCLG1DQUFtQyxJQUFJLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsbUJBQW1CLE1BQU0sZ0JBQWdCLE9BQU8sZUFBZSxpQkFBaUIsRUFBRSxPQUFPLFFBQVEsK0JBQStCLCtEQUErRCxJQUFJLFNBQVMsRUFBRSxHQUFHLE1BQU0sV0FBVyxNQUFNLElBQUksaUJBQWlCLE1BQU0sc0NBQXNDLEtBQUssRUFBRSxHQUFHLHVEQUFDLElBQUksR0FBRyxNQUFNLFdBQVcsS0FBSyxFQUFFLEdBQUcsdURBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLHVEQUFDLElBQUksR0FBRyxNQUFNLFVBQVUsbURBQW1ELFVBQVUsRUFBRSxNQUFNLGlDQUFpQyxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixVQUFVLEVBQUUsTUFBTSxJQUFJLE9BQU8sR0FBRyx3QkFBd0IsT0FBTyxHQUFHLEVBQUUsUUFBc0g7QUFDcHpGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9kaXN0L2VzbS9pbmRleC5qcz8zMjNhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydHtzdHJpbmdpZnkgYXMgWX1mcm9tXCJxdWVyeS1zdHJpbmdcIjtpbXBvcnR7c3RyaW5naWZ5IGFzIGd9ZnJvbVwicXVlcnktc3RyaW5nXCI7dmFyIF89cj0+e3N3aXRjaChyKXtjYXNlXCJuZVwiOmNhc2VcImd0ZVwiOmNhc2VcImx0ZVwiOnJldHVybmBfJHtyfWA7Y2FzZVwiY29udGFpbnNcIjpyZXR1cm5cIl9saWtlXCI7Y2FzZVwiZXFcIjpkZWZhdWx0OnJldHVyblwiXCJ9fTt2YXIgaD1yPT57aWYociYmci5sZW5ndGg+MCl7bGV0IHM9W10sZT1bXTtyZXR1cm4gci5tYXAodD0+e3MucHVzaCh0LmZpZWxkKSxlLnB1c2godC5vcmRlcil9KSx7X3NvcnQ6cyxfb3JkZXI6ZX19fTt2YXIgZj1yPT57bGV0IHM9e307cmV0dXJuIHImJnIubWFwKGU9PntpZihlLm9wZXJhdG9yPT09XCJvclwifHxlLm9wZXJhdG9yPT09XCJhbmRcIil0aHJvdyBuZXcgRXJyb3IoYFtAcmVmaW5lZGV2L3NpbXBsZS1yZXN0XTogXFxgb3BlcmF0b3I6ICR7ZS5vcGVyYXRvcn1cXGAgaXMgbm90IHN1cHBvcnRlZC4gWW91IGNhbiBjcmVhdGUgY3VzdG9tIGRhdGEgcHJvdmlkZXIuIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9wcm92aWRlcnMvZGF0YS1wcm92aWRlci8jY3JlYXRpbmctYS1kYXRhLXByb3ZpZGVyYCk7aWYoXCJmaWVsZFwiaW4gZSl7bGV0e2ZpZWxkOnQsb3BlcmF0b3I6byx2YWx1ZTpufT1lO2lmKHQ9PT1cInFcIil7c1t0XT1uO3JldHVybn1sZXQgZD1fKG8pO3NbYCR7dH0ke2R9YF09bn19KSxzfTtpbXBvcnQgVCBmcm9tXCJheGlvc1wiO3ZhciB5PVQuY3JlYXRlKCk7eS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKHI9PnIscj0+e3ZhciBlLHQsbztsZXQgcz17Li4ucixtZXNzYWdlOih0PShlPXIucmVzcG9uc2UpPT1udWxsP3ZvaWQgMDplLmRhdGEpPT1udWxsP3ZvaWQgMDp0Lm1lc3NhZ2Usc3RhdHVzQ29kZToobz1yLnJlc3BvbnNlKT09bnVsbD92b2lkIDA6by5zdGF0dXN9O3JldHVybiBQcm9taXNlLnJlamVjdChzKX0pO3ZhciB3PShyLHM9eSk9Pih7Z2V0TGlzdDphc3luYyh7cmVzb3VyY2U6ZSxwYWdpbmF0aW9uOnQsZmlsdGVyczpvLHNvcnRlcnM6bixtZXRhOmR9KT0+e2xldCBpPWAke3J9LyR7ZX1gLHtjdXJyZW50OmM9MSxwYWdlU2l6ZTphPTEwLG1vZGU6cD1cInNlcnZlclwifT10Pz97fSx7aGVhZGVyczokLG1ldGhvZDptfT1kPz97fSx4PW0/P1wiZ2V0XCIsTT1mKG8pLHU9e307cD09PVwic2VydmVyXCImJih1Ll9zdGFydD0oYy0xKSphLHUuX2VuZD1jKmEpO2xldCBsPWgobik7aWYobCl7bGV0e19zb3J0OkYsX29yZGVyOlN9PWw7dS5fc29ydD1GLmpvaW4oXCIsXCIpLHUuX29yZGVyPVMuam9pbihcIixcIil9bGV0e2RhdGE6dixoZWFkZXJzOnF9PWF3YWl0IHNbeF0oYCR7aX0/JHtnKHUpfSYke2coTSl9YCx7aGVhZGVyczokfSksTz0rcVtcIngtdG90YWwtY291bnRcIl07cmV0dXJue2RhdGE6dix0b3RhbDpPfHx2Lmxlbmd0aH19LGdldE1hbnk6YXN5bmMoe3Jlc291cmNlOmUsaWRzOnQsbWV0YTpvfSk9PntsZXR7aGVhZGVyczpuLG1ldGhvZDpkfT1vPz97fSxpPWQ/P1wiZ2V0XCIse2RhdGE6Y309YXdhaXQgc1tpXShgJHtyfS8ke2V9PyR7Zyh7aWQ6dH0pfWAse2hlYWRlcnM6bn0pO3JldHVybntkYXRhOmN9fSxjcmVhdGU6YXN5bmMoe3Jlc291cmNlOmUsdmFyaWFibGVzOnQsbWV0YTpvfSk9PntsZXQgbj1gJHtyfS8ke2V9YCx7aGVhZGVyczpkLG1ldGhvZDppfT1vPz97fSxjPWk/P1wicG9zdFwiLHtkYXRhOmF9PWF3YWl0IHNbY10obix0LHtoZWFkZXJzOmR9KTtyZXR1cm57ZGF0YTphfX0sdXBkYXRlOmFzeW5jKHtyZXNvdXJjZTplLGlkOnQsdmFyaWFibGVzOm8sbWV0YTpufSk9PntsZXQgZD1gJHtyfS8ke2V9LyR7dH1gLHtoZWFkZXJzOmksbWV0aG9kOmN9PW4/P3t9LGE9Yz8/XCJwYXRjaFwiLHtkYXRhOnB9PWF3YWl0IHNbYV0oZCxvLHtoZWFkZXJzOml9KTtyZXR1cm57ZGF0YTpwfX0sZ2V0T25lOmFzeW5jKHtyZXNvdXJjZTplLGlkOnQsbWV0YTpvfSk9PntsZXQgbj1gJHtyfS8ke2V9LyR7dH1gLHtoZWFkZXJzOmQsbWV0aG9kOml9PW8/P3t9LGM9aT8/XCJnZXRcIix7ZGF0YTphfT1hd2FpdCBzW2NdKG4se2hlYWRlcnM6ZH0pO3JldHVybntkYXRhOmF9fSxkZWxldGVPbmU6YXN5bmMoe3Jlc291cmNlOmUsaWQ6dCx2YXJpYWJsZXM6byxtZXRhOm59KT0+e2xldCBkPWAke3J9LyR7ZX0vJHt0fWAse2hlYWRlcnM6aSxtZXRob2Q6Y309bj8/e30sYT1jPz9cImRlbGV0ZVwiLHtkYXRhOnB9PWF3YWl0IHNbYV0oZCx7ZGF0YTpvLGhlYWRlcnM6aX0pO3JldHVybntkYXRhOnB9fSxnZXRBcGlVcmw6KCk9PnIsY3VzdG9tOmFzeW5jKHt1cmw6ZSxtZXRob2Q6dCxmaWx0ZXJzOm8sc29ydGVyczpuLHBheWxvYWQ6ZCxxdWVyeTppLGhlYWRlcnM6Y30pPT57bGV0IGE9YCR7ZX0/YDtpZihuKXtsZXQgbT1oKG4pO2lmKG0pe2xldHtfc29ydDp4LF9vcmRlcjpNfT1tLHU9e19zb3J0Onguam9pbihcIixcIiksX29yZGVyOk0uam9pbihcIixcIil9O2E9YCR7YX0mJHtnKHUpfWB9fWlmKG8pe2xldCBtPWYobyk7YT1gJHthfSYke2cobSl9YH1pJiYoYT1gJHthfSYke2coaSl9YCk7bGV0IHA7c3dpdGNoKHQpe2Nhc2VcInB1dFwiOmNhc2VcInBvc3RcIjpjYXNlXCJwYXRjaFwiOnA9YXdhaXQgc1t0XShlLGQse2hlYWRlcnM6Y30pO2JyZWFrO2Nhc2VcImRlbGV0ZVwiOnA9YXdhaXQgcy5kZWxldGUoZSx7ZGF0YTpkLGhlYWRlcnM6Y30pO2JyZWFrO2RlZmF1bHQ6cD1hd2FpdCBzLmdldChhLHtoZWFkZXJzOmN9KTticmVha31sZXR7ZGF0YTokfT1wO3JldHVybiBQcm9taXNlLnJlc29sdmUoe2RhdGE6JH0pfX0pO3ZhciBKPXc7ZXhwb3J0e3kgYXMgYXhpb3NJbnN0YW5jZSxKIGFzIGRlZmF1bHQsZiBhcyBnZW5lcmF0ZUZpbHRlcixoIGFzIGdlbmVyYXRlU29ydCxfIGFzIG1hcE9wZXJhdG9yLFkgYXMgc3RyaW5naWZ5fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./lib/axios */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/axios.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsc0lBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanM/NTc3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/http.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/http.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\nvar settle = __webpack_require__(/*! ./../core/settle */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/settle.js\");\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/buildFullPath.js\");\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/buildURL.js\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar httpFollow = (__webpack_require__(/*! follow-redirects */ \"(ssr)/./node_modules/follow-redirects/index.js\").http);\nvar httpsFollow = (__webpack_require__(/*! follow-redirects */ \"(ssr)/./node_modules/follow-redirects/index.js\").https);\nvar url = __webpack_require__(/*! url */ \"url\");\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar VERSION = (__webpack_require__(/*! ./../env/data */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/env/data.js\").version);\nvar createError = __webpack_require__(/*! ../core/createError */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/createError.js\");\nvar enhanceError = __webpack_require__(/*! ../core/enhanceError */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/enhanceError.js\");\nvar transitionalDefaults = __webpack_require__(/*! ../defaults/transitional */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/transitional.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js\");\n\nvar isHttps = /https:?/;\n\n/**\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} proxy\n * @param {string} location\n */\nfunction setProxy(options, proxy, location) {\n  options.hostname = proxy.host;\n  options.host = proxy.host;\n  options.port = proxy.port;\n  options.path = location;\n\n  // Basic proxy authorization\n  if (proxy.auth) {\n    var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');\n    options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n  }\n\n  // If a proxy is used, any redirects must also pass through the proxy\n  options.beforeRedirect = function beforeRedirect(redirection) {\n    redirection.headers.host = redirection.host;\n    setProxy(redirection, proxy, redirection.href);\n  };\n}\n\n/*eslint consistent-return:0*/\nmodule.exports = function httpAdapter(config) {\n  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n    var resolve = function resolve(value) {\n      done();\n      resolvePromise(value);\n    };\n    var rejected = false;\n    var reject = function reject(value) {\n      done();\n      rejected = true;\n      rejectPromise(value);\n    };\n    var data = config.data;\n    var headers = config.headers;\n    var headerNames = {};\n\n    Object.keys(headers).forEach(function storeLowerName(name) {\n      headerNames[name.toLowerCase()] = name;\n    });\n\n    // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    if ('user-agent' in headerNames) {\n      // User-Agent is specified; handle case where no UA header is desired\n      if (!headers[headerNames['user-agent']]) {\n        delete headers[headerNames['user-agent']];\n      }\n      // Otherwise, use specified value\n    } else {\n      // Only set header if it hasn't been set in config\n      headers['User-Agent'] = 'axios/' + VERSION;\n    }\n\n    if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {\n        // Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(createError(\n          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',\n          config\n        ));\n      }\n\n      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n        return reject(createError('Request body larger than maxBodyLength limit', config));\n      }\n\n      // Add Content-Length header if data exists\n      if (!headerNames['content-length']) {\n        headers['Content-Length'] = data.length;\n      }\n    }\n\n    // HTTP basic authentication\n    var auth = undefined;\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n\n    // Parse url\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    var parsed = url.parse(fullPath);\n    var protocol = parsed.protocol || 'http:';\n\n    if (!auth && parsed.auth) {\n      var urlAuth = parsed.auth.split(':');\n      var urlUsername = urlAuth[0] || '';\n      var urlPassword = urlAuth[1] || '';\n      auth = urlUsername + ':' + urlPassword;\n    }\n\n    if (auth && headerNames.authorization) {\n      delete headers[headerNames.authorization];\n    }\n\n    var isHttpsRequest = isHttps.test(protocol);\n    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n\n    try {\n      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n    } catch (err) {\n      var customErr = new Error(err.message);\n      customErr.config = config;\n      customErr.url = config.url;\n      customErr.exists = true;\n      reject(customErr);\n    }\n\n    var options = {\n      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n      method: config.method.toUpperCase(),\n      headers: headers,\n      agent: agent,\n      agents: { http: config.httpAgent, https: config.httpsAgent },\n      auth: auth\n    };\n\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname;\n      options.port = parsed.port;\n    }\n\n    var proxy = config.proxy;\n    if (!proxy && proxy !== false) {\n      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n      if (proxyUrl) {\n        var parsedProxyUrl = url.parse(proxyUrl);\n        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n        var shouldProxy = true;\n\n        if (noProxyEnv) {\n          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n            return s.trim();\n          });\n\n          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n            if (!proxyElement) {\n              return false;\n            }\n            if (proxyElement === '*') {\n              return true;\n            }\n            if (proxyElement[0] === '.' &&\n                parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n              return true;\n            }\n\n            return parsed.hostname === proxyElement;\n          });\n        }\n\n        if (shouldProxy) {\n          proxy = {\n            host: parsedProxyUrl.hostname,\n            port: parsedProxyUrl.port,\n            protocol: parsedProxyUrl.protocol\n          };\n\n          if (parsedProxyUrl.auth) {\n            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n            proxy.auth = {\n              username: proxyUrlAuth[0],\n              password: proxyUrlAuth[1]\n            };\n          }\n        }\n      }\n    }\n\n    if (proxy) {\n      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n\n    var transport;\n    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsProxy ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n      transport = isHttpsProxy ? httpsFollow : httpFollow;\n    }\n\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    }\n\n    if (config.insecureHTTPParser) {\n      options.insecureHTTPParser = config.insecureHTTPParser;\n    }\n\n    // Create the request\n    var req = transport.request(options, function handleResponse(res) {\n      if (req.aborted) return;\n\n      // uncompress the response body transparently if required\n      var stream = res;\n\n      // return the last request in case of redirects\n      var lastRequest = res.req || req;\n\n\n      // if no content, is HEAD request or decompress disabled we should not decompress\n      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n        switch (res.headers['content-encoding']) {\n        /*eslint default-case:0*/\n        case 'gzip':\n        case 'compress':\n        case 'deflate':\n        // add the unzipper to the body stream processing pipeline\n          stream = stream.pipe(zlib.createUnzip());\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        }\n      }\n\n      var response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: res.headers,\n        config: config,\n        request: lastRequest\n      };\n\n      if (config.responseType === 'stream') {\n        response.data = stream;\n        settle(resolve, reject, response);\n      } else {\n        var responseBuffer = [];\n        var totalResponseBytes = 0;\n        stream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length;\n\n          // make sure the content length is not over the maxContentLength if specified\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n            rejected = true;\n            stream.destroy();\n            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',\n              config, null, lastRequest));\n          }\n        });\n\n        stream.on('aborted', function handlerStreamAborted() {\n          if (rejected) {\n            return;\n          }\n          stream.destroy();\n          reject(createError('error request aborted', config, 'ERR_REQUEST_ABORTED', lastRequest));\n        });\n\n        stream.on('error', function handleStreamError(err) {\n          if (req.aborted) return;\n          reject(enhanceError(err, config, null, lastRequest));\n        });\n\n        stream.on('end', function handleStreamEnd() {\n          try {\n            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n            if (config.responseType !== 'arraybuffer') {\n              responseData = responseData.toString(config.responseEncoding);\n              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n                responseData = utils.stripBOM(responseData);\n              }\n            }\n            response.data = responseData;\n          } catch (err) {\n            reject(enhanceError(err, config, err.code, response.request, response));\n          }\n          settle(resolve, reject, response);\n        });\n      }\n    });\n\n    // Handle errors\n    req.on('error', function handleRequestError(err) {\n      if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;\n      reject(enhanceError(err, config, null, req));\n    });\n\n    // set tcp keep alive to prevent drop connection by peer\n    req.on('socket', function handleRequestSocket(socket) {\n      // default interval of sending ack packet is 1 minute\n      socket.setKeepAlive(true, 1000 * 60);\n    });\n\n    // Handle request timeout\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      var timeout = parseInt(config.timeout, 10);\n\n      if (isNaN(timeout)) {\n        reject(createError(\n          'error trying to parse `config.timeout` to int',\n          config,\n          'ERR_PARSE_TIMEOUT',\n          req\n        ));\n\n        return;\n      }\n\n      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devoring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        req.abort();\n        var timeoutErrorMessage = '';\n        if (config.timeoutErrorMessage) {\n          timeoutErrorMessage = config.timeoutErrorMessage;\n        } else {\n          timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n        }\n        var transitional = config.transitional || transitionalDefaults;\n        reject(createError(\n          timeoutErrorMessage,\n          config,\n          transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n          req\n        ));\n      });\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (req.aborted) return;\n\n        req.abort();\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n\n    // Send the request\n    if (utils.isStream(data)) {\n      data.on('error', function handleStreamError(err) {\n        reject(enhanceError(err, config, null, req));\n      }).pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/xhr.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\nvar settle = __webpack_require__(/*! ./../core/settle */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/settle.js\");\nvar cookies = __webpack_require__(/*! ./../helpers/cookies */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/cookies.js\");\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/buildURL.js\");\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/buildFullPath.js\");\nvar parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/parseHeaders.js\");\nvar isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isURLSameOrigin.js\");\nvar createError = __webpack_require__(/*! ../core/createError */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/createError.js\");\nvar transitionalDefaults = __webpack_require__(/*! ../defaults/transitional */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/transitional.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js\");\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      var transitional = config.transitional || transitionalDefaults;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(\n        timeoutErrorMessage,\n        config,\n        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/xhr.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/axios.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/axios.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/bind.js\");\nvar Axios = __webpack_require__(/*! ./core/Axios */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/Axios.js\");\nvar mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/mergeConfig.js\");\nvar defaults = __webpack_require__(/*! ./defaults */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/index.js\");\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js\");\naxios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/CancelToken.js\");\naxios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/isCancel.js\");\naxios.VERSION = (__webpack_require__(/*! ./env/data */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/env/data.js\").version);\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = __webpack_require__(/*! ./helpers/spread */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/spread.js\");\n\n// Expose isAxiosError\naxios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAxiosError.js\");\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports[\"default\"] = axios;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyw0RkFBUztBQUM3QixXQUFXLG1CQUFPLENBQUMsMEdBQWdCO0FBQ25DLFlBQVksbUJBQU8sQ0FBQyxzR0FBYztBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyxrSEFBb0I7QUFDOUMsZUFBZSxtQkFBTyxDQUFDLHdHQUFZOztBQUVuQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyw0R0FBaUI7QUFDeEMsb0JBQW9CLG1CQUFPLENBQUMsc0hBQXNCO0FBQ2xELGlCQUFpQixtQkFBTyxDQUFDLGdIQUFtQjtBQUM1QyxnQkFBZ0IsaUlBQTZCOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyw4R0FBa0I7O0FBRXpDO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsMEhBQXdCOztBQUVyRDs7QUFFQTtBQUNBLHlCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1yZWZpbmUtYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvc2ltcGxlLXJlc3Qvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcz9jN2Y1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcbmF4aW9zLlZFUlNJT04gPSByZXF1aXJlKCcuL2Vudi9kYXRhJykudmVyc2lvbjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/axios.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanM/OTQzNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Cancel = __webpack_require__(/*! ./Cancel */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixhQUFhLG1CQUFPLENBQUMscUdBQVU7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzPzc5OWYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuXG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuKGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgdmFyIGk7XG4gICAgdmFyIGwgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICB9XG4gICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuID0gZnVuY3Rpb24ob25mdWxmaWxsZWQpIHtcbiAgICB2YXIgX3Jlc29sdmU7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gIH1cbn07XG5cbi8qKlxuICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/CancelToken.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzP2RlYWYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/isCancel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/Axios.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/Axios.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\nvar buildURL = __webpack_require__(/*! ../helpers/buildURL */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/buildURL.js\");\nvar InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/InterceptorManager.js\");\nvar dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/dispatchRequest.js\");\nvar mergeConfig = __webpack_require__(/*! ./mergeConfig */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/mergeConfig.js\");\nvar validator = __webpack_require__(/*! ../helpers/validator */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/validator.js\");\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(configOrUrl, config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof configOrUrl === 'string') {\n    config = config || {};\n    config.url = configOrUrl;\n  } else {\n    config = configOrUrl || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLCtGQUFZO0FBQ2hDLGVBQWUsbUJBQU8sQ0FBQyxtSEFBcUI7QUFDNUMseUJBQXlCLG1CQUFPLENBQUMsMkhBQXNCO0FBQ3ZELHNCQUFzQixtQkFBTyxDQUFDLHFIQUFtQjtBQUNqRCxrQkFBa0IsbUJBQU8sQ0FBQyw2R0FBZTtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQyxxSEFBc0I7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcz8wZWY2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcbnZhciB2YWxpZGF0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3ZhbGlkYXRvcicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBjb25maWcudXJsID0gY29uZmlnT3JVcmw7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsO1xuXG4gIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICB9LCBmYWxzZSk7XG4gIH1cblxuICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gIHZhciByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB2YXIgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciBwcm9taXNlO1xuXG4gIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcblxuICAgIEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgY2hhaW4gPSBjaGFpbi5jb25jYXQocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcblxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cblxuICB2YXIgbmV3Q29uZmlnID0gY29uZmlnO1xuICB3aGlsZSAocmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKSB7XG4gICAgdmFyIG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB2YXIgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdHJ5IHtcbiAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIG9uUmVqZWN0ZWQoZXJyb3IpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdHJ5IHtcbiAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0KG5ld0NvbmZpZyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfVxuXG4gIHdoaWxlIChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/Axios.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQywrRkFBWTs7QUFFaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLFVBQVU7QUFDckI7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanM/NmY1MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkLFxuICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/InterceptorManager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAbsoluteURL.js\");\nvar combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/combineURLs.js\");\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixvQkFBb0IsbUJBQU8sQ0FBQyw2SEFBMEI7QUFDdEQsa0JBQWtCLG1CQUFPLENBQUMseUhBQXdCOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzP2QyNjMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/buildFullPath.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/createError.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/createError.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar enhanceError = __webpack_require__(/*! ./enhanceError */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/enhanceError.js\");\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsbUJBQW1CLG1CQUFPLENBQUMsK0dBQWdCOztBQUUzQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanM/NjZjYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/createError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\nvar transformData = __webpack_require__(/*! ./transformData */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/transformData.js\");\nvar isCancel = __webpack_require__(/*! ../cancel/isCancel */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/isCancel.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/index.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQywrRkFBWTtBQUNoQyxvQkFBb0IsbUJBQU8sQ0FBQyxpSEFBaUI7QUFDN0MsZUFBZSxtQkFBTyxDQUFDLGlIQUFvQjtBQUMzQyxlQUFlLG1CQUFPLENBQUMseUdBQWE7QUFDcEMsYUFBYSxtQkFBTyxDQUFDLDZHQUFrQjs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLHVDQUF1QztBQUN2QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanM/YWY1NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbCcpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbCgnY2FuY2VsZWQnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/dispatchRequest.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  };\n  return error;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzP2NiNTMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/enhanceError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(prop) {\n    if (prop in config2) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  var mergeMap = {\n    'url': valueFromConfig2,\n    'method': valueFromConfig2,\n    'data': valueFromConfig2,\n    'baseURL': defaultToConfig2,\n    'transformRequest': defaultToConfig2,\n    'transformResponse': defaultToConfig2,\n    'paramsSerializer': defaultToConfig2,\n    'timeout': defaultToConfig2,\n    'timeoutMessage': defaultToConfig2,\n    'withCredentials': defaultToConfig2,\n    'adapter': defaultToConfig2,\n    'responseType': defaultToConfig2,\n    'xsrfCookieName': defaultToConfig2,\n    'xsrfHeaderName': defaultToConfig2,\n    'onUploadProgress': defaultToConfig2,\n    'onDownloadProgress': defaultToConfig2,\n    'decompress': defaultToConfig2,\n    'maxContentLength': defaultToConfig2,\n    'maxBodyLength': defaultToConfig2,\n    'transport': defaultToConfig2,\n    'httpAgent': defaultToConfig2,\n    'httpsAgent': defaultToConfig2,\n    'cancelToken': defaultToConfig2,\n    'socketPath': defaultToConfig2,\n    'responseEncoding': defaultToConfig2,\n    'validateStatus': mergeDirectKeys\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    var merge = mergeMap[prop] || mergeDeepProperties;\n    var configValue = merge(prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLDZGQUFVOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLDJCQUEyQjtBQUMzQixNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanM/ZjMyMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtZXJnZU1hcCA9IHtcbiAgICAndXJsJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnbWV0aG9kJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnZGF0YSc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2Jhc2VVUkwnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXF1ZXN0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVzcG9uc2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdwYXJhbXNTZXJpYWxpemVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXRNZXNzYWdlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnd2l0aENyZWRlbnRpYWxzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYWRhcHRlcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlVHlwZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZDb29raWVOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkhlYWRlck5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvblVwbG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25Eb3dubG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnZGVjb21wcmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhCb2R5TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNwb3J0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cEFnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cHNBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2NhbmNlbFRva2VuJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnc29ja2V0UGF0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlRW5jb2RpbmcnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd2YWxpZGF0ZVN0YXR1cyc6IG1lcmdlRGlyZWN0S2V5c1xuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoY29uZmlnMSkuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICB2YXIgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIHZhciBjb25maWdWYWx1ZSA9IG1lcmdlKHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/mergeConfig.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/settle.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/settle.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar createError = __webpack_require__(/*! ./createError */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/createError.js\");\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtCQUFrQixtQkFBTyxDQUFDLDZHQUFlOztBQUV6QztBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1yZWZpbmUtYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvc2ltcGxlLXJlc3Qvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcz9kMDBlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/settle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/transformData.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/transformData.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/index.js\");\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsK0ZBQVk7QUFDaEMsZUFBZSxtQkFBTyxDQUFDLHlHQUFhOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsZ0JBQWdCO0FBQzNCLGFBQWEsR0FBRztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzP2YyYzUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgdmFyIGNvbnRleHQgPSB0aGlzIHx8IGRlZmF1bHRzO1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbnRleHQsIGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/transformData.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/index.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\nvar normalizeHeaderName = __webpack_require__(/*! ../helpers/normalizeHeaderName */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/normalizeHeaderName.js\");\nvar enhanceError = __webpack_require__(/*! ../core/enhanceError */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/enhanceError.js\");\nvar transitionalDefaults = __webpack_require__(/*! ./transitional */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/transitional.js\");\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = __webpack_require__(/*! ../adapters/xhr */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/xhr.js\");\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = __webpack_require__(/*! ../adapters/http */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/http.js\");\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional || defaults.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw enhanceError(e, this, 'E_JSON_PARSE');\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyw2RkFBVTtBQUM5QiwwQkFBMEIsbUJBQU8sQ0FBQyx5SUFBZ0M7QUFDbEUsbUJBQW1CLG1CQUFPLENBQUMscUhBQXNCO0FBQ2pELDJCQUEyQixtQkFBTyxDQUFDLG1IQUFnQjs7QUFFbkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1CQUFPLENBQUMsMkdBQWlCO0FBQ3ZDLElBQUk7QUFDSjtBQUNBLGNBQWMsbUJBQU8sQ0FBQyw2R0FBa0I7QUFDeEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL2luZGV4LmpzPzNiNjkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2VuaGFuY2VFcnJvcicpO1xudmFyIHRyYW5zaXRpb25hbERlZmF1bHRzID0gcmVxdWlyZSgnLi90cmFuc2l0aW9uYWwnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpIHx8IChoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgZW5oYW5jZUVycm9yKGUsIHRoaXMsICdFX0pTT05fUEFSU0UnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/transitional.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/transitional.js ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcz9iZTQ2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/transitional.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/env/data.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/env/data.js ***!
  \********************************************************************************/
/***/ ((module) => {

eval("module.exports = {\n  \"version\": \"0.26.1\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1yZWZpbmUtYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvc2ltcGxlLXJlc3Qvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcz80MjU3Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInZlcnNpb25cIjogXCIwLjI2LjFcIlxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/env/data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/bind.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/bind.js ***!
  \************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzP2ViMWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/bind.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLCtGQUFZOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcz8xZTJhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/buildURL.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanM/MTM5YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/combineURLs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsK0ZBQVk7O0FBRWhDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwyQ0FBMkM7QUFDM0MsU0FBUzs7QUFFVDtBQUNBLDREQUE0RCx3QkFBd0I7QUFDcEY7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMsZ0NBQWdDLGNBQWM7QUFDOUM7QUFDQTtBQUNBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1yZWZpbmUtYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvc2ltcGxlLXJlc3Qvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanM/ZGY4NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/cookies.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcz9kYmY1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAbsoluteURL.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQywrRkFBWTs7QUFFaEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzPzk4MjQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gdXRpbHMuaXNPYmplY3QocGF5bG9hZCkgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAxiosError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQywrRkFBWTs7QUFFaEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QixnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanM/OWJhMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isURLSameOrigin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsNkZBQVU7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1yZWZpbmUtYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvc2ltcGxlLXJlc3Qvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanM/NTIzZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/normalizeHeaderName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQywrRkFBWTs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1yZWZpbmUtYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvc2ltcGxlLXJlc3Qvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcz84NTMyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/parseHeaders.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/spread.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzP2IwZmYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/spread.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar VERSION = (__webpack_require__(/*! ../env/data */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/env/data.js\").version);\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new TypeError('option ' + opt + ' must be ' + result);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw Error('Unknown option ' + opt);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGNBQWMsa0lBQThCOztBQUU1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFVBQVU7QUFDckI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanM/MzBjOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBWRVJTSU9OID0gcmVxdWlyZSgnLi4vZW52L2RhdGEnKS52ZXJzaW9uO1xuXG52YXIgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaSkge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxudmFyIGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3B0LCBvcHRzKSB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSkpO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICB2YXIgb3B0ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NlcnRPcHRpb25zOiBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/bind.js\");\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return Array.isArray(val);\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return toString.call(val) === '[object FormData]';\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return toString.call(val) === '[object URLSearchParams]';\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/antd/dist/reset.css":
/*!*****************************************************!*\
  !*** ./node_modules/@refinedev/antd/dist/reset.css ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"284cb1f0a404\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9hbnRkL2Rpc3QvcmVzZXQuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9hbnRkL2Rpc3QvcmVzZXQuY3NzPzkyMmIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIyODRjYjFmMGE0MDRcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/antd/dist/reset.css\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/dist/esm/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/dist/esm/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   axiosInstance: () => (/* binding */ y),\n/* harmony export */   \"default\": () => (/* binding */ J),\n/* harmony export */   generateFilter: () => (/* binding */ f),\n/* harmony export */   generateSort: () => (/* binding */ h),\n/* harmony export */   mapOperator: () => (/* binding */ _),\n/* harmony export */   stringify: () => (/* reexport safe */ query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)\n/* harmony export */ });\n/* harmony import */ var query_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! query-string */ \"(rsc)/./node_modules/query-string/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);\nvar _=r=>{switch(r){case\"ne\":case\"gte\":case\"lte\":return`_${r}`;case\"contains\":return\"_like\";case\"eq\":default:return\"\"}};var h=r=>{if(r&&r.length>0){let s=[],e=[];return r.map(t=>{s.push(t.field),e.push(t.order)}),{_sort:s,_order:e}}};var f=r=>{let s={};return r&&r.map(e=>{if(e.operator===\"or\"||e.operator===\"and\")throw new Error(`[@refinedev/simple-rest]: \\`operator: ${e.operator}\\` is not supported. You can create custom data provider. https://refine.dev/docs/api-reference/core/providers/data-provider/#creating-a-data-provider`);if(\"field\"in e){let{field:t,operator:o,value:n}=e;if(t===\"q\"){s[t]=n;return}let d=_(o);s[`${t}${d}`]=n}}),s};var y=axios__WEBPACK_IMPORTED_MODULE_1___default().create();y.interceptors.response.use(r=>r,r=>{var e,t,o;let s={...r,message:(t=(e=r.response)==null?void 0:e.data)==null?void 0:t.message,statusCode:(o=r.response)==null?void 0:o.status};return Promise.reject(s)});var w=(r,s=y)=>({getList:async({resource:e,pagination:t,filters:o,sorters:n,meta:d})=>{let i=`${r}/${e}`,{current:c=1,pageSize:a=10,mode:p=\"server\"}=t??{},{headers:$,method:m}=d??{},x=m??\"get\",M=f(o),u={};p===\"server\"&&(u._start=(c-1)*a,u._end=c*a);let l=h(n);if(l){let{_sort:F,_order:S}=l;u._sort=F.join(\",\"),u._order=S.join(\",\")}let{data:v,headers:q}=await s[x](`${i}?${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(u)}&${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(M)}`,{headers:$}),O=+q[\"x-total-count\"];return{data:v,total:O||v.length}},getMany:async({resource:e,ids:t,meta:o})=>{let{headers:n,method:d}=o??{},i=d??\"get\",{data:c}=await s[i](`${r}/${e}?${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)({id:t})}`,{headers:n});return{data:c}},create:async({resource:e,variables:t,meta:o})=>{let n=`${r}/${e}`,{headers:d,method:i}=o??{},c=i??\"post\",{data:a}=await s[c](n,t,{headers:d});return{data:a}},update:async({resource:e,id:t,variables:o,meta:n})=>{let d=`${r}/${e}/${t}`,{headers:i,method:c}=n??{},a=c??\"patch\",{data:p}=await s[a](d,o,{headers:i});return{data:p}},getOne:async({resource:e,id:t,meta:o})=>{let n=`${r}/${e}/${t}`,{headers:d,method:i}=o??{},c=i??\"get\",{data:a}=await s[c](n,{headers:d});return{data:a}},deleteOne:async({resource:e,id:t,variables:o,meta:n})=>{let d=`${r}/${e}/${t}`,{headers:i,method:c}=n??{},a=c??\"delete\",{data:p}=await s[a](d,{data:o,headers:i});return{data:p}},getApiUrl:()=>r,custom:async({url:e,method:t,filters:o,sorters:n,payload:d,query:i,headers:c})=>{let a=`${e}?`;if(n){let m=h(n);if(m){let{_sort:x,_order:M}=m,u={_sort:x.join(\",\"),_order:M.join(\",\")};a=`${a}&${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(u)}`}}if(o){let m=f(o);a=`${a}&${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(m)}`}i&&(a=`${a}&${(0,query_string__WEBPACK_IMPORTED_MODULE_0__.stringify)(i)}`);let p;switch(t){case\"put\":case\"post\":case\"patch\":p=await s[t](e,d,{headers:c});break;case\"delete\":p=await s.delete(e,{data:d,headers:c});break;default:p=await s.get(a,{headers:c});break}let{data:$}=p;return Promise.resolve({data:$})}});var J=w;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBa0YsVUFBVSxVQUFVLHVDQUF1QyxFQUFFLEVBQUUsNkJBQTZCLDRCQUE0QixVQUFVLGtCQUFrQixjQUFjLGlCQUFpQixnQ0FBZ0MsR0FBRyxvQkFBb0IsVUFBVSxTQUFTLG9CQUFvQixrR0FBa0csV0FBVyx5SkFBeUosZ0JBQWdCLElBQUksMkJBQTJCLEdBQUcsWUFBWSxPQUFPLE9BQU8sV0FBVyxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sS0FBMEIsTUFBTSxtREFBUSxHQUFHLHFDQUFxQyxVQUFVLE9BQU8sNEhBQTRILHlCQUF5QixFQUFFLGlCQUFpQixlQUFlLG1EQUFtRCxJQUFJLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRywwQ0FBMEMsTUFBTSxFQUFFLG1CQUFtQixNQUFNLHdCQUF3Qiw0Q0FBNEMsV0FBVyxNQUFNLElBQUksaUJBQWlCLEdBQUcseUNBQXlDLElBQUksaUJBQWlCLGVBQWUsRUFBRSxHQUFHLHVEQUFDLElBQUksR0FBRyx1REFBQyxJQUFJLEdBQUcsVUFBVSx3QkFBd0IsT0FBTywwQkFBMEIsZ0JBQWdCLHdCQUF3QixJQUFJLElBQUksbUJBQW1CLE1BQU0sYUFBYSxPQUFPLGVBQWUsRUFBRSxHQUFHLEVBQUUsR0FBRyx1REFBQyxFQUFFLEtBQUssRUFBRSxHQUFHLFVBQVUsRUFBRSxPQUFPLFFBQVEsZUFBZSw4QkFBOEIsSUFBSSxTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUcsbUJBQW1CLE1BQU0sY0FBYyxPQUFPLGlCQUFpQixVQUFVLEVBQUUsT0FBTyxRQUFRLGVBQWUsbUNBQW1DLElBQUksU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxtQkFBbUIsTUFBTSxlQUFlLE9BQU8saUJBQWlCLFVBQVUsRUFBRSxPQUFPLFFBQVEsZUFBZSx1QkFBdUIsSUFBSSxTQUFTLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLG1CQUFtQixNQUFNLGFBQWEsT0FBTyxlQUFlLFVBQVUsRUFBRSxPQUFPLFFBQVEsa0JBQWtCLG1DQUFtQyxJQUFJLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsbUJBQW1CLE1BQU0sZ0JBQWdCLE9BQU8sZUFBZSxpQkFBaUIsRUFBRSxPQUFPLFFBQVEsK0JBQStCLCtEQUErRCxJQUFJLFNBQVMsRUFBRSxHQUFHLE1BQU0sV0FBVyxNQUFNLElBQUksaUJBQWlCLE1BQU0sc0NBQXNDLEtBQUssRUFBRSxHQUFHLHVEQUFDLElBQUksR0FBRyxNQUFNLFdBQVcsS0FBSyxFQUFFLEdBQUcsdURBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLHVEQUFDLElBQUksR0FBRyxNQUFNLFVBQVUsbURBQW1ELFVBQVUsRUFBRSxNQUFNLGlDQUFpQyxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixVQUFVLEVBQUUsTUFBTSxJQUFJLE9BQU8sR0FBRyx3QkFBd0IsT0FBTyxHQUFHLEVBQUUsUUFBc0g7QUFDcHpGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9kaXN0L2VzbS9pbmRleC5qcz83ZTJhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydHtzdHJpbmdpZnkgYXMgWX1mcm9tXCJxdWVyeS1zdHJpbmdcIjtpbXBvcnR7c3RyaW5naWZ5IGFzIGd9ZnJvbVwicXVlcnktc3RyaW5nXCI7dmFyIF89cj0+e3N3aXRjaChyKXtjYXNlXCJuZVwiOmNhc2VcImd0ZVwiOmNhc2VcImx0ZVwiOnJldHVybmBfJHtyfWA7Y2FzZVwiY29udGFpbnNcIjpyZXR1cm5cIl9saWtlXCI7Y2FzZVwiZXFcIjpkZWZhdWx0OnJldHVyblwiXCJ9fTt2YXIgaD1yPT57aWYociYmci5sZW5ndGg+MCl7bGV0IHM9W10sZT1bXTtyZXR1cm4gci5tYXAodD0+e3MucHVzaCh0LmZpZWxkKSxlLnB1c2godC5vcmRlcil9KSx7X3NvcnQ6cyxfb3JkZXI6ZX19fTt2YXIgZj1yPT57bGV0IHM9e307cmV0dXJuIHImJnIubWFwKGU9PntpZihlLm9wZXJhdG9yPT09XCJvclwifHxlLm9wZXJhdG9yPT09XCJhbmRcIil0aHJvdyBuZXcgRXJyb3IoYFtAcmVmaW5lZGV2L3NpbXBsZS1yZXN0XTogXFxgb3BlcmF0b3I6ICR7ZS5vcGVyYXRvcn1cXGAgaXMgbm90IHN1cHBvcnRlZC4gWW91IGNhbiBjcmVhdGUgY3VzdG9tIGRhdGEgcHJvdmlkZXIuIGh0dHBzOi8vcmVmaW5lLmRldi9kb2NzL2FwaS1yZWZlcmVuY2UvY29yZS9wcm92aWRlcnMvZGF0YS1wcm92aWRlci8jY3JlYXRpbmctYS1kYXRhLXByb3ZpZGVyYCk7aWYoXCJmaWVsZFwiaW4gZSl7bGV0e2ZpZWxkOnQsb3BlcmF0b3I6byx2YWx1ZTpufT1lO2lmKHQ9PT1cInFcIil7c1t0XT1uO3JldHVybn1sZXQgZD1fKG8pO3NbYCR7dH0ke2R9YF09bn19KSxzfTtpbXBvcnQgVCBmcm9tXCJheGlvc1wiO3ZhciB5PVQuY3JlYXRlKCk7eS5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKHI9PnIscj0+e3ZhciBlLHQsbztsZXQgcz17Li4ucixtZXNzYWdlOih0PShlPXIucmVzcG9uc2UpPT1udWxsP3ZvaWQgMDplLmRhdGEpPT1udWxsP3ZvaWQgMDp0Lm1lc3NhZ2Usc3RhdHVzQ29kZToobz1yLnJlc3BvbnNlKT09bnVsbD92b2lkIDA6by5zdGF0dXN9O3JldHVybiBQcm9taXNlLnJlamVjdChzKX0pO3ZhciB3PShyLHM9eSk9Pih7Z2V0TGlzdDphc3luYyh7cmVzb3VyY2U6ZSxwYWdpbmF0aW9uOnQsZmlsdGVyczpvLHNvcnRlcnM6bixtZXRhOmR9KT0+e2xldCBpPWAke3J9LyR7ZX1gLHtjdXJyZW50OmM9MSxwYWdlU2l6ZTphPTEwLG1vZGU6cD1cInNlcnZlclwifT10Pz97fSx7aGVhZGVyczokLG1ldGhvZDptfT1kPz97fSx4PW0/P1wiZ2V0XCIsTT1mKG8pLHU9e307cD09PVwic2VydmVyXCImJih1Ll9zdGFydD0oYy0xKSphLHUuX2VuZD1jKmEpO2xldCBsPWgobik7aWYobCl7bGV0e19zb3J0OkYsX29yZGVyOlN9PWw7dS5fc29ydD1GLmpvaW4oXCIsXCIpLHUuX29yZGVyPVMuam9pbihcIixcIil9bGV0e2RhdGE6dixoZWFkZXJzOnF9PWF3YWl0IHNbeF0oYCR7aX0/JHtnKHUpfSYke2coTSl9YCx7aGVhZGVyczokfSksTz0rcVtcIngtdG90YWwtY291bnRcIl07cmV0dXJue2RhdGE6dix0b3RhbDpPfHx2Lmxlbmd0aH19LGdldE1hbnk6YXN5bmMoe3Jlc291cmNlOmUsaWRzOnQsbWV0YTpvfSk9PntsZXR7aGVhZGVyczpuLG1ldGhvZDpkfT1vPz97fSxpPWQ/P1wiZ2V0XCIse2RhdGE6Y309YXdhaXQgc1tpXShgJHtyfS8ke2V9PyR7Zyh7aWQ6dH0pfWAse2hlYWRlcnM6bn0pO3JldHVybntkYXRhOmN9fSxjcmVhdGU6YXN5bmMoe3Jlc291cmNlOmUsdmFyaWFibGVzOnQsbWV0YTpvfSk9PntsZXQgbj1gJHtyfS8ke2V9YCx7aGVhZGVyczpkLG1ldGhvZDppfT1vPz97fSxjPWk/P1wicG9zdFwiLHtkYXRhOmF9PWF3YWl0IHNbY10obix0LHtoZWFkZXJzOmR9KTtyZXR1cm57ZGF0YTphfX0sdXBkYXRlOmFzeW5jKHtyZXNvdXJjZTplLGlkOnQsdmFyaWFibGVzOm8sbWV0YTpufSk9PntsZXQgZD1gJHtyfS8ke2V9LyR7dH1gLHtoZWFkZXJzOmksbWV0aG9kOmN9PW4/P3t9LGE9Yz8/XCJwYXRjaFwiLHtkYXRhOnB9PWF3YWl0IHNbYV0oZCxvLHtoZWFkZXJzOml9KTtyZXR1cm57ZGF0YTpwfX0sZ2V0T25lOmFzeW5jKHtyZXNvdXJjZTplLGlkOnQsbWV0YTpvfSk9PntsZXQgbj1gJHtyfS8ke2V9LyR7dH1gLHtoZWFkZXJzOmQsbWV0aG9kOml9PW8/P3t9LGM9aT8/XCJnZXRcIix7ZGF0YTphfT1hd2FpdCBzW2NdKG4se2hlYWRlcnM6ZH0pO3JldHVybntkYXRhOmF9fSxkZWxldGVPbmU6YXN5bmMoe3Jlc291cmNlOmUsaWQ6dCx2YXJpYWJsZXM6byxtZXRhOm59KT0+e2xldCBkPWAke3J9LyR7ZX0vJHt0fWAse2hlYWRlcnM6aSxtZXRob2Q6Y309bj8/e30sYT1jPz9cImRlbGV0ZVwiLHtkYXRhOnB9PWF3YWl0IHNbYV0oZCx7ZGF0YTpvLGhlYWRlcnM6aX0pO3JldHVybntkYXRhOnB9fSxnZXRBcGlVcmw6KCk9PnIsY3VzdG9tOmFzeW5jKHt1cmw6ZSxtZXRob2Q6dCxmaWx0ZXJzOm8sc29ydGVyczpuLHBheWxvYWQ6ZCxxdWVyeTppLGhlYWRlcnM6Y30pPT57bGV0IGE9YCR7ZX0/YDtpZihuKXtsZXQgbT1oKG4pO2lmKG0pe2xldHtfc29ydDp4LF9vcmRlcjpNfT1tLHU9e19zb3J0Onguam9pbihcIixcIiksX29yZGVyOk0uam9pbihcIixcIil9O2E9YCR7YX0mJHtnKHUpfWB9fWlmKG8pe2xldCBtPWYobyk7YT1gJHthfSYke2cobSl9YH1pJiYoYT1gJHthfSYke2coaSl9YCk7bGV0IHA7c3dpdGNoKHQpe2Nhc2VcInB1dFwiOmNhc2VcInBvc3RcIjpjYXNlXCJwYXRjaFwiOnA9YXdhaXQgc1t0XShlLGQse2hlYWRlcnM6Y30pO2JyZWFrO2Nhc2VcImRlbGV0ZVwiOnA9YXdhaXQgcy5kZWxldGUoZSx7ZGF0YTpkLGhlYWRlcnM6Y30pO2JyZWFrO2RlZmF1bHQ6cD1hd2FpdCBzLmdldChhLHtoZWFkZXJzOmN9KTticmVha31sZXR7ZGF0YTokfT1wO3JldHVybiBQcm9taXNlLnJlc29sdmUoe2RhdGE6JH0pfX0pO3ZhciBKPXc7ZXhwb3J0e3kgYXMgYXhpb3NJbnN0YW5jZSxKIGFzIGRlZmF1bHQsZiBhcyBnZW5lcmF0ZUZpbHRlcixoIGFzIGdlbmVyYXRlU29ydCxfIGFzIG1hcE9wZXJhdG9yLFkgYXMgc3RyaW5naWZ5fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./lib/axios */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/axios.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsc0lBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanM/OWQ3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/http.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/http.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\nvar settle = __webpack_require__(/*! ./../core/settle */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/settle.js\");\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/buildFullPath.js\");\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/buildURL.js\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar httpFollow = (__webpack_require__(/*! follow-redirects */ \"(rsc)/./node_modules/follow-redirects/index.js\").http);\nvar httpsFollow = (__webpack_require__(/*! follow-redirects */ \"(rsc)/./node_modules/follow-redirects/index.js\").https);\nvar url = __webpack_require__(/*! url */ \"url\");\nvar zlib = __webpack_require__(/*! zlib */ \"zlib\");\nvar VERSION = (__webpack_require__(/*! ./../env/data */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/env/data.js\").version);\nvar createError = __webpack_require__(/*! ../core/createError */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/createError.js\");\nvar enhanceError = __webpack_require__(/*! ../core/enhanceError */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/enhanceError.js\");\nvar transitionalDefaults = __webpack_require__(/*! ../defaults/transitional */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/transitional.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js\");\n\nvar isHttps = /https:?/;\n\n/**\n *\n * @param {http.ClientRequestArgs} options\n * @param {AxiosProxyConfig} proxy\n * @param {string} location\n */\nfunction setProxy(options, proxy, location) {\n  options.hostname = proxy.host;\n  options.host = proxy.host;\n  options.port = proxy.port;\n  options.path = location;\n\n  // Basic proxy authorization\n  if (proxy.auth) {\n    var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');\n    options.headers['Proxy-Authorization'] = 'Basic ' + base64;\n  }\n\n  // If a proxy is used, any redirects must also pass through the proxy\n  options.beforeRedirect = function beforeRedirect(redirection) {\n    redirection.headers.host = redirection.host;\n    setProxy(redirection, proxy, redirection.href);\n  };\n}\n\n/*eslint consistent-return:0*/\nmodule.exports = function httpAdapter(config) {\n  return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n    var resolve = function resolve(value) {\n      done();\n      resolvePromise(value);\n    };\n    var rejected = false;\n    var reject = function reject(value) {\n      done();\n      rejected = true;\n      rejectPromise(value);\n    };\n    var data = config.data;\n    var headers = config.headers;\n    var headerNames = {};\n\n    Object.keys(headers).forEach(function storeLowerName(name) {\n      headerNames[name.toLowerCase()] = name;\n    });\n\n    // Set User-Agent (required by some servers)\n    // See https://github.com/axios/axios/issues/69\n    if ('user-agent' in headerNames) {\n      // User-Agent is specified; handle case where no UA header is desired\n      if (!headers[headerNames['user-agent']]) {\n        delete headers[headerNames['user-agent']];\n      }\n      // Otherwise, use specified value\n    } else {\n      // Only set header if it hasn't been set in config\n      headers['User-Agent'] = 'axios/' + VERSION;\n    }\n\n    if (data && !utils.isStream(data)) {\n      if (Buffer.isBuffer(data)) {\n        // Nothing to do...\n      } else if (utils.isArrayBuffer(data)) {\n        data = Buffer.from(new Uint8Array(data));\n      } else if (utils.isString(data)) {\n        data = Buffer.from(data, 'utf-8');\n      } else {\n        return reject(createError(\n          'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',\n          config\n        ));\n      }\n\n      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {\n        return reject(createError('Request body larger than maxBodyLength limit', config));\n      }\n\n      // Add Content-Length header if data exists\n      if (!headerNames['content-length']) {\n        headers['Content-Length'] = data.length;\n      }\n    }\n\n    // HTTP basic authentication\n    var auth = undefined;\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      auth = username + ':' + password;\n    }\n\n    // Parse url\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    var parsed = url.parse(fullPath);\n    var protocol = parsed.protocol || 'http:';\n\n    if (!auth && parsed.auth) {\n      var urlAuth = parsed.auth.split(':');\n      var urlUsername = urlAuth[0] || '';\n      var urlPassword = urlAuth[1] || '';\n      auth = urlUsername + ':' + urlPassword;\n    }\n\n    if (auth && headerNames.authorization) {\n      delete headers[headerNames.authorization];\n    }\n\n    var isHttpsRequest = isHttps.test(protocol);\n    var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;\n\n    try {\n      buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, '');\n    } catch (err) {\n      var customErr = new Error(err.message);\n      customErr.config = config;\n      customErr.url = config.url;\n      customErr.exists = true;\n      reject(customErr);\n    }\n\n    var options = {\n      path: buildURL(parsed.path, config.params, config.paramsSerializer).replace(/^\\?/, ''),\n      method: config.method.toUpperCase(),\n      headers: headers,\n      agent: agent,\n      agents: { http: config.httpAgent, https: config.httpsAgent },\n      auth: auth\n    };\n\n    if (config.socketPath) {\n      options.socketPath = config.socketPath;\n    } else {\n      options.hostname = parsed.hostname;\n      options.port = parsed.port;\n    }\n\n    var proxy = config.proxy;\n    if (!proxy && proxy !== false) {\n      var proxyEnv = protocol.slice(0, -1) + '_proxy';\n      var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];\n      if (proxyUrl) {\n        var parsedProxyUrl = url.parse(proxyUrl);\n        var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;\n        var shouldProxy = true;\n\n        if (noProxyEnv) {\n          var noProxy = noProxyEnv.split(',').map(function trim(s) {\n            return s.trim();\n          });\n\n          shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {\n            if (!proxyElement) {\n              return false;\n            }\n            if (proxyElement === '*') {\n              return true;\n            }\n            if (proxyElement[0] === '.' &&\n                parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {\n              return true;\n            }\n\n            return parsed.hostname === proxyElement;\n          });\n        }\n\n        if (shouldProxy) {\n          proxy = {\n            host: parsedProxyUrl.hostname,\n            port: parsedProxyUrl.port,\n            protocol: parsedProxyUrl.protocol\n          };\n\n          if (parsedProxyUrl.auth) {\n            var proxyUrlAuth = parsedProxyUrl.auth.split(':');\n            proxy.auth = {\n              username: proxyUrlAuth[0],\n              password: proxyUrlAuth[1]\n            };\n          }\n        }\n      }\n    }\n\n    if (proxy) {\n      options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');\n      setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);\n    }\n\n    var transport;\n    var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);\n    if (config.transport) {\n      transport = config.transport;\n    } else if (config.maxRedirects === 0) {\n      transport = isHttpsProxy ? https : http;\n    } else {\n      if (config.maxRedirects) {\n        options.maxRedirects = config.maxRedirects;\n      }\n      transport = isHttpsProxy ? httpsFollow : httpFollow;\n    }\n\n    if (config.maxBodyLength > -1) {\n      options.maxBodyLength = config.maxBodyLength;\n    }\n\n    if (config.insecureHTTPParser) {\n      options.insecureHTTPParser = config.insecureHTTPParser;\n    }\n\n    // Create the request\n    var req = transport.request(options, function handleResponse(res) {\n      if (req.aborted) return;\n\n      // uncompress the response body transparently if required\n      var stream = res;\n\n      // return the last request in case of redirects\n      var lastRequest = res.req || req;\n\n\n      // if no content, is HEAD request or decompress disabled we should not decompress\n      if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {\n        switch (res.headers['content-encoding']) {\n        /*eslint default-case:0*/\n        case 'gzip':\n        case 'compress':\n        case 'deflate':\n        // add the unzipper to the body stream processing pipeline\n          stream = stream.pipe(zlib.createUnzip());\n\n          // remove the content-encoding in order to not confuse downstream operations\n          delete res.headers['content-encoding'];\n          break;\n        }\n      }\n\n      var response = {\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: res.headers,\n        config: config,\n        request: lastRequest\n      };\n\n      if (config.responseType === 'stream') {\n        response.data = stream;\n        settle(resolve, reject, response);\n      } else {\n        var responseBuffer = [];\n        var totalResponseBytes = 0;\n        stream.on('data', function handleStreamData(chunk) {\n          responseBuffer.push(chunk);\n          totalResponseBytes += chunk.length;\n\n          // make sure the content length is not over the maxContentLength if specified\n          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {\n            // stream.destoy() emit aborted event before calling reject() on Node.js v16\n            rejected = true;\n            stream.destroy();\n            reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',\n              config, null, lastRequest));\n          }\n        });\n\n        stream.on('aborted', function handlerStreamAborted() {\n          if (rejected) {\n            return;\n          }\n          stream.destroy();\n          reject(createError('error request aborted', config, 'ERR_REQUEST_ABORTED', lastRequest));\n        });\n\n        stream.on('error', function handleStreamError(err) {\n          if (req.aborted) return;\n          reject(enhanceError(err, config, null, lastRequest));\n        });\n\n        stream.on('end', function handleStreamEnd() {\n          try {\n            var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);\n            if (config.responseType !== 'arraybuffer') {\n              responseData = responseData.toString(config.responseEncoding);\n              if (!config.responseEncoding || config.responseEncoding === 'utf8') {\n                responseData = utils.stripBOM(responseData);\n              }\n            }\n            response.data = responseData;\n          } catch (err) {\n            reject(enhanceError(err, config, err.code, response.request, response));\n          }\n          settle(resolve, reject, response);\n        });\n      }\n    });\n\n    // Handle errors\n    req.on('error', function handleRequestError(err) {\n      if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;\n      reject(enhanceError(err, config, null, req));\n    });\n\n    // set tcp keep alive to prevent drop connection by peer\n    req.on('socket', function handleRequestSocket(socket) {\n      // default interval of sending ack packet is 1 minute\n      socket.setKeepAlive(true, 1000 * 60);\n    });\n\n    // Handle request timeout\n    if (config.timeout) {\n      // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.\n      var timeout = parseInt(config.timeout, 10);\n\n      if (isNaN(timeout)) {\n        reject(createError(\n          'error trying to parse `config.timeout` to int',\n          config,\n          'ERR_PARSE_TIMEOUT',\n          req\n        ));\n\n        return;\n      }\n\n      // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.\n      // And timer callback will be fired, and abort() will be invoked before connection, then get \"socket hang up\" and code ECONNRESET.\n      // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.\n      // And then these socket which be hang up will devoring CPU little by little.\n      // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.\n      req.setTimeout(timeout, function handleRequestTimeout() {\n        req.abort();\n        var timeoutErrorMessage = '';\n        if (config.timeoutErrorMessage) {\n          timeoutErrorMessage = config.timeoutErrorMessage;\n        } else {\n          timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n        }\n        var transitional = config.transitional || transitionalDefaults;\n        reject(createError(\n          timeoutErrorMessage,\n          config,\n          transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n          req\n        ));\n      });\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (req.aborted) return;\n\n        req.abort();\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n\n    // Send the request\n    if (utils.isStream(data)) {\n      data.on('error', function handleStreamError(err) {\n        reject(enhanceError(err, config, null, req));\n      }).pipe(req);\n    } else {\n      req.end(data);\n    }\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/http.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/xhr.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\nvar settle = __webpack_require__(/*! ./../core/settle */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/settle.js\");\nvar cookies = __webpack_require__(/*! ./../helpers/cookies */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/cookies.js\");\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/buildURL.js\");\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/buildFullPath.js\");\nvar parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/parseHeaders.js\");\nvar isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isURLSameOrigin.js\");\nvar createError = __webpack_require__(/*! ../core/createError */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/createError.js\");\nvar transitionalDefaults = __webpack_require__(/*! ../defaults/transitional */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/transitional.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js\");\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      var transitional = config.transitional || transitionalDefaults;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(\n        timeoutErrorMessage,\n        config,\n        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/xhr.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/axios.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/axios.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/bind.js\");\nvar Axios = __webpack_require__(/*! ./core/Axios */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/Axios.js\");\nvar mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/mergeConfig.js\");\nvar defaults = __webpack_require__(/*! ./defaults */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/index.js\");\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js\");\naxios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/CancelToken.js\");\naxios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/isCancel.js\");\naxios.VERSION = (__webpack_require__(/*! ./env/data */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/env/data.js\").version);\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = __webpack_require__(/*! ./helpers/spread */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/spread.js\");\n\n// Expose isAxiosError\naxios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAxiosError.js\");\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports[\"default\"] = axios;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyw0RkFBUztBQUM3QixXQUFXLG1CQUFPLENBQUMsMEdBQWdCO0FBQ25DLFlBQVksbUJBQU8sQ0FBQyxzR0FBYztBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyxrSEFBb0I7QUFDOUMsZUFBZSxtQkFBTyxDQUFDLHdHQUFZOztBQUVuQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyw0R0FBaUI7QUFDeEMsb0JBQW9CLG1CQUFPLENBQUMsc0hBQXNCO0FBQ2xELGlCQUFpQixtQkFBTyxDQUFDLGdIQUFtQjtBQUM1QyxnQkFBZ0IsaUlBQTZCOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyw4R0FBa0I7O0FBRXpDO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsMEhBQXdCOztBQUVyRDs7QUFFQTtBQUNBLHlCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1yZWZpbmUtYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvc2ltcGxlLXJlc3Qvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcz9mOGYwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcbmF4aW9zLlZFUlNJT04gPSByZXF1aXJlKCcuL2Vudi9kYXRhJykudmVyc2lvbjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/axios.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanM/NDcwNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Cancel = __webpack_require__(/*! ./Cancel */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixhQUFhLG1CQUFPLENBQUMscUdBQVU7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsZ0JBQWdCLE9BQU87QUFDdkI7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzP2U4ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuXG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuKGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgdmFyIGk7XG4gICAgdmFyIGwgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICB9XG4gICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuID0gZnVuY3Rpb24ob25mdWxmaWxsZWQpIHtcbiAgICB2YXIgX3Jlc29sdmU7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIGxpc3RlbmVyKHRoaXMucmVhc29uKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IFtsaXN0ZW5lcl07XG4gIH1cbn07XG5cbi8qKlxuICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBpbmRleCA9IHRoaXMuX2xpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/CancelToken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzPzhlM2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/isCancel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/Axios.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/Axios.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\nvar buildURL = __webpack_require__(/*! ../helpers/buildURL */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/buildURL.js\");\nvar InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/InterceptorManager.js\");\nvar dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/dispatchRequest.js\");\nvar mergeConfig = __webpack_require__(/*! ./mergeConfig */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/mergeConfig.js\");\nvar validator = __webpack_require__(/*! ../helpers/validator */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/validator.js\");\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(configOrUrl, config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof configOrUrl === 'string') {\n    config = config || {};\n    config.url = configOrUrl;\n  } else {\n    config = configOrUrl || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLCtGQUFZO0FBQ2hDLGVBQWUsbUJBQU8sQ0FBQyxtSEFBcUI7QUFDNUMseUJBQXlCLG1CQUFPLENBQUMsMkhBQXNCO0FBQ3ZELHNCQUFzQixtQkFBTyxDQUFDLHFIQUFtQjtBQUNqRCxrQkFBa0IsbUJBQU8sQ0FBQyw2R0FBZTtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQyxxSEFBc0I7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcz9iYzAzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIEludGVyY2VwdG9yTWFuYWdlciA9IHJlcXVpcmUoJy4vSW50ZXJjZXB0b3JNYW5hZ2VyJyk7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gcmVxdWlyZSgnLi9kaXNwYXRjaFJlcXVlc3QnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vbWVyZ2VDb25maWcnKTtcbnZhciB2YWxpZGF0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3ZhbGlkYXRvcicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBjb25maWcudXJsID0gY29uZmlnT3JVcmw7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsO1xuXG4gIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICB9LCBmYWxzZSk7XG4gIH1cblxuICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gIHZhciByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB2YXIgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciBwcm9taXNlO1xuXG4gIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcblxuICAgIEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgY2hhaW4gPSBjaGFpbi5jb25jYXQocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcblxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cblxuICB2YXIgbmV3Q29uZmlnID0gY29uZmlnO1xuICB3aGlsZSAocmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKSB7XG4gICAgdmFyIG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB2YXIgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdHJ5IHtcbiAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIG9uUmVqZWN0ZWQoZXJyb3IpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdHJ5IHtcbiAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0KG5ld0NvbmZpZyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfVxuXG4gIHdoaWxlIChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/Axios.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQywrRkFBWTs7QUFFaEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLFVBQVU7QUFDckI7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanM/Y2JkZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkLFxuICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/InterceptorManager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAbsoluteURL.js\");\nvar combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/combineURLs.js\");\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixvQkFBb0IsbUJBQU8sQ0FBQyw2SEFBMEI7QUFDdEQsa0JBQWtCLG1CQUFPLENBQUMseUhBQXdCOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzPzJmMTYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/buildFullPath.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/createError.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/createError.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar enhanceError = __webpack_require__(/*! ./enhanceError */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/enhanceError.js\");\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsbUJBQW1CLG1CQUFPLENBQUMsK0dBQWdCOztBQUUzQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanM/YTI0YyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/createError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\nvar transformData = __webpack_require__(/*! ./transformData */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/transformData.js\");\nvar isCancel = __webpack_require__(/*! ../cancel/isCancel */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/isCancel.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/index.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQywrRkFBWTtBQUNoQyxvQkFBb0IsbUJBQU8sQ0FBQyxpSEFBaUI7QUFDN0MsZUFBZSxtQkFBTyxDQUFDLGlIQUFvQjtBQUMzQyxlQUFlLG1CQUFPLENBQUMseUdBQWE7QUFDcEMsYUFBYSxtQkFBTyxDQUFDLDZHQUFrQjs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLHVDQUF1QztBQUN2QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanM/YjVlNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbCcpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbCgnY2FuY2VsZWQnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/dispatchRequest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  };\n  return error;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzPzMwOGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/enhanceError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(prop) {\n    if (prop in config2) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  var mergeMap = {\n    'url': valueFromConfig2,\n    'method': valueFromConfig2,\n    'data': valueFromConfig2,\n    'baseURL': defaultToConfig2,\n    'transformRequest': defaultToConfig2,\n    'transformResponse': defaultToConfig2,\n    'paramsSerializer': defaultToConfig2,\n    'timeout': defaultToConfig2,\n    'timeoutMessage': defaultToConfig2,\n    'withCredentials': defaultToConfig2,\n    'adapter': defaultToConfig2,\n    'responseType': defaultToConfig2,\n    'xsrfCookieName': defaultToConfig2,\n    'xsrfHeaderName': defaultToConfig2,\n    'onUploadProgress': defaultToConfig2,\n    'onDownloadProgress': defaultToConfig2,\n    'decompress': defaultToConfig2,\n    'maxContentLength': defaultToConfig2,\n    'maxBodyLength': defaultToConfig2,\n    'transport': defaultToConfig2,\n    'httpAgent': defaultToConfig2,\n    'httpsAgent': defaultToConfig2,\n    'cancelToken': defaultToConfig2,\n    'socketPath': defaultToConfig2,\n    'responseEncoding': defaultToConfig2,\n    'validateStatus': mergeDirectKeys\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    var merge = mergeMap[prop] || mergeDeepProperties;\n    var configValue = merge(prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLDZGQUFVOztBQUU5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLDJCQUEyQjtBQUMzQixNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanM/ZTYyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtZXJnZU1hcCA9IHtcbiAgICAndXJsJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnbWV0aG9kJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnZGF0YSc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2Jhc2VVUkwnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXF1ZXN0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVzcG9uc2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdwYXJhbXNTZXJpYWxpemVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXRNZXNzYWdlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnd2l0aENyZWRlbnRpYWxzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYWRhcHRlcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlVHlwZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZDb29raWVOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkhlYWRlck5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvblVwbG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25Eb3dubG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnZGVjb21wcmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhCb2R5TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNwb3J0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cEFnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnaHR0cHNBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2NhbmNlbFRva2VuJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnc29ja2V0UGF0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlRW5jb2RpbmcnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd2YWxpZGF0ZVN0YXR1cyc6IG1lcmdlRGlyZWN0S2V5c1xuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoY29uZmlnMSkuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICB2YXIgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIHZhciBjb25maWdWYWx1ZSA9IG1lcmdlKHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/mergeConfig.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/settle.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/settle.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar createError = __webpack_require__(/*! ./createError */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/createError.js\");\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGtCQUFrQixtQkFBTyxDQUFDLDZHQUFlOztBQUV6QztBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1yZWZpbmUtYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvc2ltcGxlLXJlc3Qvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcz8zNDExIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/settle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/transformData.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/transformData.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/index.js\");\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsK0ZBQVk7QUFDaEMsZUFBZSxtQkFBTyxDQUFDLHlHQUFhOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsZ0JBQWdCO0FBQzNCLGFBQWEsR0FBRztBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzPzc2YWMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgdmFyIGNvbnRleHQgPSB0aGlzIHx8IGRlZmF1bHRzO1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbnRleHQsIGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/transformData.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/index.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\nvar normalizeHeaderName = __webpack_require__(/*! ../helpers/normalizeHeaderName */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/normalizeHeaderName.js\");\nvar enhanceError = __webpack_require__(/*! ../core/enhanceError */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/core/enhanceError.js\");\nvar transitionalDefaults = __webpack_require__(/*! ./transitional */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/transitional.js\");\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = __webpack_require__(/*! ../adapters/xhr */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/xhr.js\");\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = __webpack_require__(/*! ../adapters/http */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/adapters/http.js\");\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional || defaults.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw enhanceError(e, this, 'E_JSON_PARSE');\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyw2RkFBVTtBQUM5QiwwQkFBMEIsbUJBQU8sQ0FBQyx5SUFBZ0M7QUFDbEUsbUJBQW1CLG1CQUFPLENBQUMscUhBQXNCO0FBQ2pELDJCQUEyQixtQkFBTyxDQUFDLG1IQUFnQjs7QUFFbkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1CQUFPLENBQUMsMkdBQWlCO0FBQ3ZDLElBQUk7QUFDSjtBQUNBLGNBQWMsbUJBQU8sQ0FBQyw2R0FBa0I7QUFDeEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL2luZGV4LmpzP2RmZTAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2VuaGFuY2VFcnJvcicpO1xudmFyIHRyYW5zaXRpb25hbERlZmF1bHRzID0gcmVxdWlyZSgnLi90cmFuc2l0aW9uYWwnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpIHx8IChoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIHZhciBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgdmFyIGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICB2YXIgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChzdHJpY3RKU09OUGFyc2luZyB8fCAoZm9yY2VkSlNPTlBhcnNpbmcgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgZGF0YS5sZW5ndGgpKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgZW5oYW5jZUVycm9yKGUsIHRoaXMsICdFX0pTT05fUEFSU0UnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICB9XG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/transitional.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/transitional.js ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcz8wNDIyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/defaults/transitional.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/env/data.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/env/data.js ***!
  \********************************************************************************/
/***/ ((module) => {

eval("module.exports = {\n  \"version\": \"0.26.1\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1yZWZpbmUtYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvc2ltcGxlLXJlc3Qvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcz81ZDFhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInZlcnNpb25cIjogXCIwLjI2LjFcIlxufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/env/data.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/bind.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/bind.js ***!
  \************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzPzBkY2UiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/bind.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLCtGQUFZOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcz82OGQxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/buildURL.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanM/MDk0YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/combineURLs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsK0ZBQVk7O0FBRWhDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwyQ0FBMkM7QUFDM0MsU0FBUzs7QUFFVDtBQUNBLDREQUE0RCx3QkFBd0I7QUFDcEY7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMsZ0NBQWdDLGNBQWM7QUFDOUM7QUFDQTtBQUNBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1yZWZpbmUtYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvc2ltcGxlLXJlc3Qvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanM/ZTUwNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/cookies.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcz84ZmQ2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAbsoluteURL.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQywrRkFBWTs7QUFFaEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzPzhjYWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gdXRpbHMuaXNPYmplY3QocGF5bG9hZCkgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isAxiosError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQywrRkFBWTs7QUFFaEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QixnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanM/MWFiMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/isURLSameOrigin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsNkZBQVU7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1yZWZpbmUtYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvc2ltcGxlLXJlc3Qvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanM/MmVmYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/normalizeHeaderName.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\");\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQywrRkFBWTs7QUFFaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1yZWZpbmUtYXBwLy4vbm9kZV9tb2R1bGVzL0ByZWZpbmVkZXYvc2ltcGxlLXJlc3Qvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcz8yZjg4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/parseHeaders.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/spread.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLXJlZmluZS1hcHAvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzP2MyMGEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/spread.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar VERSION = (__webpack_require__(/*! ../env/data */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/env/data.js\").version);\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new TypeError('option ' + opt + ' must be ' + result);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw Error('Unknown option ' + opt);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi9zaW1wbGUtcmVzdC9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLGNBQWMsa0lBQThCOztBQUU1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUIsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFVBQVU7QUFDckI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3NpbXBsZS1yZXN0L25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanM/MWUxMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBWRVJTSU9OID0gcmVxdWlyZSgnLi4vZW52L2RhdGEnKS52ZXJzaW9uO1xuXG52YXIgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaSkge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxudmFyIGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqL1xudmFsaWRhdG9ycy50cmFuc2l0aW9uYWwgPSBmdW5jdGlvbiB0cmFuc2l0aW9uYWwodmFsaWRhdG9yLCB2ZXJzaW9uLCBtZXNzYWdlKSB7XG4gIGZ1bmN0aW9uIGZvcm1hdE1lc3NhZ2Uob3B0LCBkZXNjKSB7XG4gICAgcmV0dXJuICdbQXhpb3MgdicgKyBWRVJTSU9OICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3B0LCBvcHRzKSB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSkpO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICB2YXIgb3B0ID0ga2V5c1tpXTtcbiAgICB2YXIgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NlcnRPcHRpb25zOiBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/validator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/helpers/bind.js\");\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return Array.isArray(val);\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return toString.call(val) === '[object FormData]';\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return toString.call(val) === '[object URLSearchParams]';\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@refinedev/simple-rest/node_modules/axios/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/antd/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@refinedev/antd/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthPage: () => (/* binding */ ud),\n/* harmony export */   AutoSaveIndicator: () => (/* binding */ Mo),\n/* harmony export */   BooleanField: () => (/* binding */ gp),\n/* harmony export */   Breadcrumb: () => (/* binding */ Le),\n/* harmony export */   CloneButton: () => (/* binding */ ai),\n/* harmony export */   Create: () => (/* binding */ Ei),\n/* harmony export */   CreateButton: () => (/* binding */ Ht),\n/* harmony export */   DateField: () => (/* binding */ Pp),\n/* harmony export */   DeleteButton: () => (/* binding */ Ye),\n/* harmony export */   Edit: () => (/* binding */ Wi),\n/* harmony export */   EditButton: () => (/* binding */ At),\n/* harmony export */   EmailField: () => (/* binding */ dp),\n/* harmony export */   ErrorComponent: () => (/* binding */ _p),\n/* harmony export */   ExportButton: () => (/* binding */ Ya),\n/* harmony export */   FileField: () => (/* binding */ Fp),\n/* harmony export */   FilterDropdown: () => (/* binding */ Op),\n/* harmony export */   Header: () => (/* binding */ Bt),\n/* harmony export */   ImageField: () => (/* binding */ cp),\n/* harmony export */   ImportButton: () => (/* binding */ ci),\n/* harmony export */   Layout: () => (/* binding */ Ws),\n/* harmony export */   List: () => (/* binding */ hi),\n/* harmony export */   ListButton: () => (/* binding */ Ze),\n/* harmony export */   LoginPage: () => (/* binding */ al),\n/* harmony export */   MarkdownField: () => (/* binding */ Ip),\n/* harmony export */   NumberField: () => (/* binding */ Dp),\n/* harmony export */   PageHeader: () => (/* binding */ ke),\n/* harmony export */   ReadyPage: () => (/* binding */ yl),\n/* harmony export */   RefineThemes: () => (/* binding */ uh),\n/* harmony export */   RefreshButton: () => (/* binding */ _e),\n/* harmony export */   SaveButton: () => (/* binding */ Xe),\n/* harmony export */   Show: () => (/* binding */ tp),\n/* harmony export */   ShowButton: () => (/* binding */ Aa),\n/* harmony export */   Sider: () => (/* binding */ Ct),\n/* harmony export */   TagField: () => (/* binding */ ip),\n/* harmony export */   TextField: () => (/* binding */ sp),\n/* harmony export */   ThemedHeader: () => (/* binding */ Dt),\n/* harmony export */   ThemedHeaderV2: () => (/* binding */ It),\n/* harmony export */   ThemedLayout: () => (/* binding */ Pn),\n/* harmony export */   ThemedLayoutContext: () => (/* binding */ He),\n/* harmony export */   ThemedLayoutContextProvider: () => (/* binding */ xt),\n/* harmony export */   ThemedLayoutV2: () => (/* binding */ sa),\n/* harmony export */   ThemedSider: () => (/* binding */ Lt),\n/* harmony export */   ThemedSiderV2: () => (/* binding */ Rt),\n/* harmony export */   ThemedTitle: () => (/* binding */ kt),\n/* harmony export */   ThemedTitleV2: () => (/* binding */ be),\n/* harmony export */   Title: () => (/* binding */ Ft),\n/* harmony export */   UrlField: () => (/* binding */ qt),\n/* harmony export */   WelcomePage: () => (/* binding */ gl),\n/* harmony export */   getDefaultFilter: () => (/* binding */ Rr),\n/* harmony export */   getDefaultSortOrder: () => (/* binding */ wr),\n/* harmony export */   getValueFromEvent: () => (/* binding */ Hd),\n/* harmony export */   mapAntdFilterToCrudFilter: () => (/* binding */ ft),\n/* harmony export */   mapAntdSorterToCrudSorting: () => (/* binding */ yt),\n/* harmony export */   notificationProvider: () => (/* binding */ uc),\n/* harmony export */   rangePickerFilterMapper: () => (/* binding */ Ud),\n/* harmony export */   useCheckboxGroup: () => (/* binding */ gm),\n/* harmony export */   useDrawer: () => (/* binding */ so),\n/* harmony export */   useDrawerForm: () => (/* binding */ ao),\n/* harmony export */   useEditableTable: () => (/* binding */ Gr),\n/* harmony export */   useFileUploadState: () => (/* binding */ Nm),\n/* harmony export */   useForm: () => (/* binding */ he),\n/* harmony export */   useImport: () => (/* binding */ Lm),\n/* harmony export */   useModal: () => (/* binding */ to),\n/* harmony export */   useModalForm: () => (/* binding */ ro),\n/* harmony export */   useNotificationProvider: () => (/* binding */ mc),\n/* harmony export */   useRadioGroup: () => (/* binding */ Pm),\n/* harmony export */   useSelect: () => (/* binding */ cm),\n/* harmony export */   useSiderVisible: () => (/* binding */ _m),\n/* harmony export */   useSimpleList: () => (/* binding */ as),\n/* harmony export */   useStepsForm: () => (/* binding */ io),\n/* harmony export */   useTable: () => (/* binding */ gt),\n/* harmony export */   useThemedLayoutContext: () => (/* binding */ To)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=Button,Card,Col,Form,Input,Layout,Row,Typography,theme!=!antd */ \"(ssr)/./node_modules/antd/es/form/index.js\");\n/* harmony import */ var sunflower_antd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sunflower-antd */ \"(ssr)/./node_modules/sunflower-antd/es/index.js\");\n/* harmony import */ var _refinedev_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @refinedev/core */ \"(ssr)/./node_modules/@refinedev/core/dist/index.mjs\");\n/* harmony import */ var _barrel_optimize_names_Form_Grid_antd__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=Button,ConfigProvider,Drawer,Grid,Layout,Menu,theme!=!antd */ \"(ssr)/./node_modules/antd/es/grid/index.js\");\n/* harmony import */ var _barrel_optimize_names_Progress_notification_antd__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=Button,Progress!=!antd */ \"(ssr)/./node_modules/antd/es/progress/index.js\");\n/* harmony import */ var _barrel_optimize_names_Progress_notification_antd__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=App,notification!=!antd */ \"(ssr)/./node_modules/antd/es/notification/index.js\");\n/* harmony import */ var _barrel_optimize_names_App_notification_antd__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=App,notification!=!antd */ \"(ssr)/./node_modules/antd/es/app/index.js\");\n/* harmony import */ var _barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=Button,ConfigProvider,Typography!=!antd */ \"(ssr)/./node_modules/antd/es/button/index.js\");\n/* harmony import */ var _barrel_optimize_names_UndoOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=UndoOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/UndoOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! __barrel_optimize__?names=Button,Card,Col,Form,Input,Layout,Row,Typography,theme!=!antd */ \"(ssr)/./node_modules/antd/es/layout/index.js\");\n/* harmony import */ var _barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=Button,ConfigProvider,Drawer,Grid,Layout,Menu,theme!=!antd */ \"(ssr)/./node_modules/antd/es/menu/index.js\");\n/* harmony import */ var _barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! __barrel_optimize__?names=Button,ConfigProvider,Drawer,Grid,Layout,Menu,theme!=!antd */ \"(ssr)/./node_modules/antd/es/drawer/index.js\");\n/* harmony import */ var _barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=Button,ConfigProvider,Typography!=!antd */ \"(ssr)/./node_modules/antd/es/config-provider/index.js\");\n/* harmony import */ var _barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=BarsOutlined,DashboardOutlined,LeftOutlined,LogoutOutlined,RightOutlined,UnorderedListOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/UnorderedListOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=BarsOutlined,DashboardOutlined,LeftOutlined,LogoutOutlined,RightOutlined,UnorderedListOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/LogoutOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=BarsOutlined,DashboardOutlined,LeftOutlined,LogoutOutlined,RightOutlined,UnorderedListOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/DashboardOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! __barrel_optimize__?names=BarsOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/BarsOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=Button,Col,Row,Space,Typography!=!antd */ \"(ssr)/./node_modules/antd/es/space/index.js\");\n/* harmony import */ var _barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=Typography,theme!=!antd */ \"(ssr)/./node_modules/antd/es/typography/index.js\");\n/* harmony import */ var _barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=Avatar,Layout,Space,Typography,theme!=!antd */ \"(ssr)/./node_modules/antd/es/avatar/index.js\");\n/* harmony import */ var _barrel_optimize_names_Button_Drawer_Grid_Layout_Menu_theme_antd__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=Typography,theme!=!antd */ \"(ssr)/./node_modules/antd/es/theme/index.js\");\n/* harmony import */ var _barrel_optimize_names_BarsOutlined_DashboardOutlined_LeftOutlined_LogoutOutlined_RightOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! __barrel_optimize__?names=BarsOutlined,DashboardOutlined,LeftOutlined,LogoutOutlined,RightOutlined,UnorderedListOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/RightOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_BarsOutlined_DashboardOutlined_LeftOutlined_LogoutOutlined_RightOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! __barrel_optimize__?names=BarsOutlined,DashboardOutlined,LeftOutlined,LogoutOutlined,RightOutlined,UnorderedListOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/LeftOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_PlusSquareOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! __barrel_optimize__?names=PlusSquareOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/PlusSquareOutlined.js\");\n/* harmony import */ var _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @refinedev/ui-types */ \"(ssr)/./node_modules/@refinedev/ui-types/dist/index.mjs\");\n/* harmony import */ var _barrel_optimize_names_EditOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! __barrel_optimize__?names=EditOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/EditOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_Button_Popconfirm_antd__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! __barrel_optimize__?names=Button,Popconfirm!=!antd */ \"(ssr)/./node_modules/antd/es/popconfirm/index.js\");\n/* harmony import */ var _barrel_optimize_names_DeleteOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! __barrel_optimize__?names=DeleteOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/DeleteOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_RedoOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! __barrel_optimize__?names=RedoOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/RedoOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_EyeOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! __barrel_optimize__?names=EyeOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/EyeOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_ExportOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! __barrel_optimize__?names=ExportOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/ExportOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_SaveOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! __barrel_optimize__?names=SaveOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/SaveOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_Button_Upload_antd__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! __barrel_optimize__?names=Button,Upload!=!antd */ \"(ssr)/./node_modules/antd/es/upload/index.js\");\n/* harmony import */ var _barrel_optimize_names_ImportOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! __barrel_optimize__?names=ImportOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/ImportOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_Card_Space_Spin_antd__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! __barrel_optimize__?names=Card,Space,Spin!=!antd */ \"(ssr)/./node_modules/antd/es/spin/index.js\");\n/* harmony import */ var _barrel_optimize_names_Card_Space_Spin_antd__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! __barrel_optimize__?names=Button,Card,Col,Form,Input,Layout,Row,Typography,theme!=!antd */ \"(ssr)/./node_modules/antd/es/card/index.js\");\n/* harmony import */ var _barrel_optimize_names_Tag_antd__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! __barrel_optimize__?names=Tag!=!antd */ \"(ssr)/./node_modules/antd/es/tag/index.js\");\n/* harmony import */ var _barrel_optimize_names_Image_antd__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! __barrel_optimize__?names=Image!=!antd */ \"(ssr)/./node_modules/antd/es/image/index.js\");\n/* harmony import */ var _barrel_optimize_names_Tooltip_antd__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! __barrel_optimize__?names=Button,Result,Space,Tooltip,Typography!=!antd */ \"(ssr)/./node_modules/antd/es/tooltip/index.js\");\n/* harmony import */ var _barrel_optimize_names_CheckOutlined_CloseOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! __barrel_optimize__?names=CheckOutlined,CloseOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/CheckOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_CheckOutlined_CloseOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! __barrel_optimize__?names=CheckOutlined,CloseOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/CloseOutlined.js\");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! dayjs */ \"(ssr)/./node_modules/dayjs/dayjs.min.js\");\n/* harmony import */ var dayjs_plugin_localizedFormat_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! dayjs/plugin/localizedFormat.js */ \"(ssr)/./node_modules/dayjs/plugin/localizedFormat.js\");\n/* harmony import */ var react_markdown__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! react-markdown */ \"(ssr)/./node_modules/react-markdown/src/react-markdown.js\");\n/* harmony import */ var remark_gfm__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! remark-gfm */ \"(ssr)/./node_modules/remark-gfm/index.js\");\n/* harmony import */ var _barrel_optimize_names_FilterOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! __barrel_optimize__?names=FilterOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/FilterOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_Button_Result_Space_Tooltip_Typography_antd__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! __barrel_optimize__?names=Button,Result,Space,Tooltip,Typography!=!antd */ \"(ssr)/./node_modules/antd/es/result/index.js\");\n/* harmony import */ var _barrel_optimize_names_InfoCircleOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! __barrel_optimize__?names=InfoCircleOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/InfoCircleOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! __barrel_optimize__?names=Button,Card,Col,Form,Input,Layout,Row,Typography,theme!=!antd */ \"(ssr)/./node_modules/antd/es/row/index.js\");\n/* harmony import */ var _barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! __barrel_optimize__?names=Button,Card,Col,Form,Input,Layout,Row,Typography,theme!=!antd */ \"(ssr)/./node_modules/antd/es/col/index.js\");\n/* harmony import */ var _barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! __barrel_optimize__?names=Button,Card,Col,Form,Input,Layout,Row,Typography,theme!=!antd */ \"(ssr)/./node_modules/antd/es/input/index.js\");\n/* harmony import */ var _barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! __barrel_optimize__?names=Button,Card,Checkbox,Col,Divider,Form,Input,Layout,Row,Typography,theme!=!antd */ \"(ssr)/./node_modules/antd/es/checkbox/index.js\");\n/* harmony import */ var _barrel_optimize_names_FolderOutlined_ReadOutlined_TeamOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! __barrel_optimize__?names=FolderOutlined,ReadOutlined,TeamOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/ReadOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_FolderOutlined_ReadOutlined_TeamOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! __barrel_optimize__?names=FolderOutlined,ReadOutlined,TeamOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/FolderOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_FolderOutlined_ReadOutlined_TeamOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! __barrel_optimize__?names=FolderOutlined,ReadOutlined,TeamOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/TeamOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_Button_Card_Checkbox_Col_Divider_Form_Input_Layout_Row_Typography_theme_antd__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! __barrel_optimize__?names=Button,Card,Col,Divider,Form,Input,Layout,Row,Typography,theme!=!antd */ \"(ssr)/./node_modules/antd/es/divider/index.js\");\n/* harmony import */ var _barrel_optimize_names_Breadcrumb_antd__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! __barrel_optimize__?names=Breadcrumb!=!antd */ \"(ssr)/./node_modules/antd/es/breadcrumb/index.js\");\n/* harmony import */ var _barrel_optimize_names_HomeOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! __barrel_optimize__?names=HomeOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/HomeOutlined.js\");\n/* harmony import */ var _ant_design_pro_layout__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! @ant-design/pro-layout */ \"(ssr)/./node_modules/@ant-design/pro-layout/es/components/PageHeader/index.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowLeftOutlined_ArrowRightOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowLeftOutlined,ArrowRightOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/ArrowRightOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_ArrowLeftOutlined_ArrowRightOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! __barrel_optimize__?names=ArrowLeftOutlined,ArrowRightOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/ArrowLeftOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_CheckCircleOutlined_EllipsisOutlined_ExclamationCircleOutlined_SyncOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! __barrel_optimize__?names=CheckCircleOutlined,EllipsisOutlined,ExclamationCircleOutlined,SyncOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/CheckCircleOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_CheckCircleOutlined_EllipsisOutlined_ExclamationCircleOutlined_SyncOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! __barrel_optimize__?names=CheckCircleOutlined,EllipsisOutlined,ExclamationCircleOutlined,SyncOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/ExclamationCircleOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_CheckCircleOutlined_EllipsisOutlined_ExclamationCircleOutlined_SyncOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! __barrel_optimize__?names=CheckCircleOutlined,EllipsisOutlined,ExclamationCircleOutlined,SyncOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/SyncOutlined.js\");\n/* harmony import */ var _barrel_optimize_names_CheckCircleOutlined_EllipsisOutlined_ExclamationCircleOutlined_SyncOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! __barrel_optimize__?names=CheckCircleOutlined,EllipsisOutlined,ExclamationCircleOutlined,SyncOutlined!=!@ant-design/icons */ \"(ssr)/./node_modules/@ant-design/icons/es/icons/EllipsisOutlined.js\");\n/* __next_internal_client_entry_do_not_use__ AuthPage,AutoSaveIndicator,BooleanField,Breadcrumb,CloneButton,Create,CreateButton,DateField,DeleteButton,Edit,EditButton,EmailField,ErrorComponent,ExportButton,FileField,FilterDropdown,Header,ImageField,ImportButton,Layout,List,ListButton,LoginPage,MarkdownField,NumberField,PageHeader,ReadyPage,RefineThemes,RefreshButton,SaveButton,Show,ShowButton,Sider,TagField,TextField,ThemedHeader,ThemedHeaderV2,ThemedLayout,ThemedLayoutContext,ThemedLayoutContextProvider,ThemedLayoutV2,ThemedSider,ThemedSiderV2,ThemedTitle,ThemedTitleV2,Title,UrlField,WelcomePage,getDefaultFilter,getDefaultSortOrder,getValueFromEvent,mapAntdFilterToCrudFilter,mapAntdSorterToCrudSorting,notificationProvider,rangePickerFilterMapper,useCheckboxGroup,useDrawer,useDrawerForm,useEditableTable,useFileUploadState,useForm,useImport,useModal,useModalForm,useNotificationProvider,useRadioGroup,useSelect,useSiderVisible,useSimpleList,useStepsForm,useTable,useThemedLayoutContext auto */ var sr = Object.defineProperty;\nvar o = (e, t)=>sr(e, \"name\", {\n        value: t,\n        configurable: !0\n    });\n\n\n\n\n\nvar he = o(({ action: e, resource: t, onMutationSuccess: r, onMutationError: s, autoSave: n, submitOnEnter: i = !1, warnWhenUnsavedChanges: a, redirect: p, successNotification: d, errorNotification: m, meta: c, metaData: l, queryMeta: y, mutationMeta: g, liveMode: b, liveParams: u, mutationMode: x, dataProviderName: f, onLiveEvent: S, invalidates: F, undoableTimeout: P, queryOptions: C, createMutationOptions: B, updateMutationOptions: k, id: v, overtimeOptions: D, optimisticUpdateMap: T, defaultFormValues: L, disableServerSideValidation: G = !1 } = {})=>{\n    var J, fe;\n    let { options: V } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)(), h = (V == null ? void 0 : V.disableServerSideValidation) || G, W = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), [Z] = _barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].useForm(), A = (0,sunflower_antd__WEBPACK_IMPORTED_MODULE_1__.useForm)({\n        form: Z,\n        defaultFormValues: L\n    }), { form: I } = A, M = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useForm)({\n        onMutationSuccess: r || void 0,\n        onMutationError: async (q, ee, ye)=>{\n            if (h) {\n                s == null || s(q, ee, ye);\n                return;\n            }\n            let ne = [], ae = I.getFieldsValue();\n            ne = Object.keys((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.flattenObjectKeys)(ae)).map((ie)=>({\n                    name: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.propertyPathToArray)(ie),\n                    errors: void 0\n                })), I.setFields(ne);\n            let de = q == null ? void 0 : q.errors;\n            for(let ie in de){\n                let pe = de[ie], Te = [];\n                Array.isArray(pe) && (Te = pe), typeof pe == \"string\" && (Te = [\n                    pe\n                ]), typeof pe == \"boolean\" && pe && (Te = [\n                    \"Field is not valid.\"\n                ]), typeof pe == \"object\" && \"key\" in pe && (Te = [\n                    W(pe.key, pe.message)\n                ]), ne.push({\n                    name: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.propertyPathToArray)(ie),\n                    errors: Te\n                });\n            }\n            I.setFields([\n                ...ne\n            ]), s == null || s(q, ee, ye);\n        },\n        redirect: p,\n        action: e,\n        resource: t,\n        successNotification: d,\n        errorNotification: m,\n        meta: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(c, l),\n        metaData: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(c, l),\n        queryMeta: y,\n        mutationMeta: g,\n        liveMode: b,\n        liveParams: u,\n        mutationMode: x,\n        dataProviderName: f,\n        onLiveEvent: S,\n        invalidates: F,\n        undoableTimeout: P,\n        queryOptions: C,\n        createMutationOptions: B,\n        updateMutationOptions: k,\n        id: v,\n        overtimeOptions: D,\n        optimisticUpdateMap: T,\n        autoSave: n\n    }), { formLoading: O, onFinish: w, query: N, id: Q, onFinishAutoSave: X } = M, { warnWhenUnsavedChanges: $, setWarnWhen: R } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useWarnAboutChange)(), j = a ?? $;\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        I.resetFields();\n    }, [\n        (J = N == null ? void 0 : N.data) == null ? void 0 : J.data,\n        Q\n    ]);\n    let E = o((q)=>{\n        i && q.key === \"Enter\" && I.submit();\n    }, \"onKeyUp\"), _ = o((q, ee)=>{\n        if (q && j && R(!0), n != null && n.enabled) {\n            R(!1);\n            let ye = (n == null ? void 0 : n.onFinish) ?? ((ne)=>ne);\n            return X(ye(ee)).catch((ne)=>ne);\n        }\n        return q;\n    }, \"onValuesChange\"), re = {\n        disabled: O,\n        onClick: ()=>{\n            I.submit();\n        }\n    };\n    return {\n        form: A.form,\n        formProps: {\n            ...A.formProps,\n            onFinish: (q)=>w(q).catch((ee)=>ee),\n            onKeyUp: E,\n            onValuesChange: _,\n            initialValues: (fe = N == null ? void 0 : N.data) == null ? void 0 : fe.data\n        },\n        saveButtonProps: re,\n        defaultFormValuesLoading: A.defaultFormValuesLoading,\n        ...M,\n        onFinish: async (q)=>await w(q ?? A.form.getFieldsValue(!0))\n    };\n}, \"useForm\");\n\n\n\nvar to = o(({ modalProps: e = {} } = {})=>{\n    let { show: t, close: r, visible: s } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useModal)({\n        defaultVisible: e.open\n    });\n    return {\n        modalProps: {\n            ...e,\n            onCancel: (n)=>{\n                var i;\n                (i = e.onCancel) == null || i.call(e, n), r();\n            },\n            open: s,\n            visible: s\n        },\n        show: t,\n        close: r\n    };\n}, \"useModal\");\nvar ro = o(({ syncWithLocation: e, defaultVisible: t = !1, autoSubmitClose: r = !0, autoResetForm: s = !0, autoResetFormWhenClose: n = !0, autoSave: i, invalidates: a, ...p })=>{\n    var R, j;\n    let [d, m] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), c = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useInvalidate)(), { resource: l, action: y, identifier: g } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(p.resource), b = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useParsed)(), u = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)(), x = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)(), f = p.action ?? y ?? \"\", S = !(typeof e == \"object\" && (e == null ? void 0 : e.syncId) === !1), F = typeof e == \"object\" && \"key\" in e ? e.key : l && f && e ? `modal-${g}-${f}` : void 0, P = he({\n        meta: {\n            ...F ? {\n                [F]: void 0\n            } : {},\n            ...p.meta\n        },\n        autoSave: i,\n        invalidates: a,\n        ...p\n    }), { form: C, formProps: B, id: k, setId: v, formLoading: D, onFinish: T, autoSaveProps: L } = P, G = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { warnWhen: V, setWarnWhen: h } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useWarnAboutChange)(), { show: W, close: Z, modalProps: A } = to({\n        modalProps: {\n            open: t\n        }\n    }), I = A.open || !1, M = {\n        modalProps: A,\n        form: C,\n        formLoading: D,\n        formProps: B,\n        formResult: void 0,\n        formValues: C.getFieldsValue,\n        defaultFormValuesLoading: !1,\n        initialValues: {},\n        submit: T,\n        close: Z,\n        open: A.open || !1,\n        show: W,\n        visible: I\n    };\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var E, _, re, J;\n        if (d === !1 && F) {\n            let fe = (_ = (E = b == null ? void 0 : b.params) == null ? void 0 : E[F]) == null ? void 0 : _.open;\n            if (typeof fe == \"boolean\" ? fe && W() : typeof fe == \"string\" && fe === \"true\" && W(), S) {\n                let q = (J = (re = b == null ? void 0 : b.params) == null ? void 0 : re[F]) == null ? void 0 : J.id;\n                q && (v == null || v(q));\n            }\n            m(!0);\n        }\n    }, [\n        F,\n        b,\n        S,\n        v\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var E;\n        d === !0 && (I && F ? u({\n            query: {\n                [F]: {\n                    ...(E = b == null ? void 0 : b.params) == null ? void 0 : E[F],\n                    open: !0,\n                    ...S && k && {\n                        id: k\n                    }\n                }\n            },\n            options: {\n                keepQuery: !0\n            },\n            type: \"replace\"\n        }) : F && !I && u({\n            query: {\n                [F]: void 0\n            },\n            options: {\n                keepQuery: !0\n            },\n            type: \"replace\"\n        }));\n    }, [\n        k,\n        I,\n        W,\n        F,\n        S\n    ]);\n    let O = {\n        disabled: D,\n        loading: D,\n        onClick: ()=>{\n            C.submit();\n        }\n    }, w = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (L.status === \"success\" && i != null && i.invalidateOnClose && c({\n            id: k,\n            invalidates: a || [\n                \"list\",\n                \"many\",\n                \"detail\"\n            ],\n            dataProviderName: p.dataProviderName,\n            resource: g\n        }), V) if (window.confirm(G(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"))) h(!1);\n        else return;\n        v == null || v(void 0), M.close(), n && C.resetFields();\n    }, [\n        V,\n        L.status\n    ]), N = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((E)=>{\n        typeof E < \"u\" && (v == null || v(E)), (!(f === \"edit\" || f === \"clone\") || typeof E < \"u\" || typeof k < \"u\") && M.show();\n    }, [\n        k\n    ]), { visible: Q, ...X } = A, $ = {\n        open: Q,\n        ...X\n    };\n    return {\n        ...P,\n        ...M,\n        show: N,\n        close: w,\n        open: I,\n        formProps: {\n            ...B,\n            ...P.formProps,\n            onValuesChange: B == null ? void 0 : B.onValuesChange,\n            onKeyUp: B == null ? void 0 : B.onKeyUp,\n            onFinish: async (E)=>{\n                await T(E), r && Z(), s && C.resetFields();\n            }\n        },\n        modalProps: {\n            ...$,\n            width: \"1000px\",\n            okButtonProps: O,\n            title: G(`${g}.titles.${p.action}`, `${x(`${p.action} ${((R = l == null ? void 0 : l.meta) == null ? void 0 : R.label) ?? ((j = l == null ? void 0 : l.options) == null ? void 0 : j.label) ?? (l == null ? void 0 : l.label) ?? g}`, \"singular\")}`),\n            okText: G(\"buttons.save\", \"Save\"),\n            cancelText: G(\"buttons.cancel\", \"Cancel\"),\n            onCancel: w,\n            forceRender: !0\n        },\n        formLoading: D\n    };\n}, \"useModalForm\");\n\n\n\nvar so = o(({ drawerProps: e = {} } = {})=>{\n    let { show: t, close: r, visible: s } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useModal)({\n        defaultVisible: e.open\n    });\n    return {\n        drawerProps: {\n            ...e,\n            onClose: (n)=>{\n                var i;\n                (i = e.onClose) == null || i.call(e, n), r();\n            },\n            open: s\n        },\n        show: t,\n        close: r\n    };\n}, \"useDrawer\");\nvar ao = o(({ syncWithLocation: e, defaultVisible: t = !1, autoSubmitClose: r = !0, autoResetForm: s = !0, autoSave: n, invalidates: i, ...a })=>{\n    let p = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useInvalidate)(), [d, m] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), { show: c, close: l, drawerProps: y } = so({\n        drawerProps: {\n            open: t\n        }\n    }), g = y.open || !1, { resource: b, action: u, identifier: x } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(a.resource), f = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useParsed)(), S = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)(), F = a.action ?? u ?? \"\", P = !(typeof e == \"object\" && (e == null ? void 0 : e.syncId) === !1), C = typeof e == \"object\" && \"key\" in e ? e.key : b && F && e ? `drawer-${(b == null ? void 0 : b.identifier) ?? (b == null ? void 0 : b.name)}-${F}` : void 0, B = he({\n        meta: {\n            ...C ? {\n                [C]: void 0\n            } : {},\n            ...a.meta\n        },\n        autoSave: n,\n        invalidates: i,\n        ...a\n    }), { form: k, formProps: v, formLoading: D, id: T, setId: L, onFinish: G, autoSaveProps: V } = B;\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var w, N, Q, X;\n        if (d === !1 && C) {\n            let $ = (N = (w = f == null ? void 0 : f.params) == null ? void 0 : w[C]) == null ? void 0 : N.open;\n            if (typeof $ == \"boolean\" ? $ ? c() : l() : typeof $ == \"string\" && $ === \"true\" && c(), P) {\n                let R = (X = (Q = f == null ? void 0 : f.params) == null ? void 0 : Q[C]) == null ? void 0 : X.id;\n                R && (L == null || L(R));\n            }\n            m(!0);\n        }\n    }, [\n        C,\n        f,\n        P,\n        L,\n        d\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var w;\n        d === !0 && (g && C ? S({\n            query: {\n                [C]: {\n                    ...(w = f == null ? void 0 : f.params) == null ? void 0 : w[C],\n                    open: !0,\n                    ...P && T && {\n                        id: T\n                    }\n                }\n            },\n            options: {\n                keepQuery: !0\n            },\n            type: \"replace\"\n        }) : C && !g && S({\n            query: {\n                [C]: void 0\n            },\n            options: {\n                keepQuery: !0\n            },\n            type: \"replace\"\n        }));\n    }, [\n        T,\n        g,\n        c,\n        l,\n        C,\n        P,\n        d\n    ]);\n    let h = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { warnWhen: W, setWarnWhen: Z } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useWarnAboutChange)(), A = {\n        disabled: D,\n        onClick: ()=>{\n            k.submit();\n        },\n        loading: D\n    }, I = {\n        recordItemId: T,\n        onSuccess: ()=>{\n            L == null || L(void 0), l();\n        }\n    }, M = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        if (V.status === \"success\" && n != null && n.invalidateOnClose && p({\n            id: T,\n            invalidates: i || [\n                \"list\",\n                \"many\",\n                \"detail\"\n            ],\n            dataProviderName: a.dataProviderName,\n            resource: x\n        }), W) if (window.confirm(h(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"))) Z(!1);\n        else return;\n        l(), L == null || L(void 0);\n    }, [\n        W\n    ]), O = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((w)=>{\n        typeof w < \"u\" && (L == null || L(w)), (!(F === \"edit\" || F === \"clone\") || typeof w < \"u\" || typeof T < \"u\") && c();\n    }, [\n        T\n    ]);\n    return {\n        ...B,\n        show: O,\n        close: M,\n        formProps: {\n            form: k,\n            ...B.formProps,\n            onValuesChange: v == null ? void 0 : v.onValuesChange,\n            onKeyUp: v == null ? void 0 : v.onKeyUp,\n            onFinish: async (w)=>{\n                await G(w), r && l(), s && k.resetFields();\n            }\n        },\n        drawerProps: {\n            ...y,\n            width: \"500px\",\n            onClose: M,\n            open: g,\n            forceRender: !0\n        },\n        saveButtonProps: A,\n        deleteButtonProps: I,\n        formLoading: D\n    };\n}, \"useDrawerForm\");\n\nvar io = o((e = {})=>{\n    let t = he({\n        ...e\n    }), { form: r, formProps: s } = t, n = (0,sunflower_antd__WEBPACK_IMPORTED_MODULE_1__.useStepsForm)({\n        isBackValidate: !1,\n        form: r,\n        submit: (i)=>{\n            var a;\n            (a = s == null ? void 0 : s.onFinish) == null || a.call(s, i);\n        },\n        ...e\n    });\n    return {\n        ...t,\n        ...n,\n        formLoading: t.formLoading,\n        formProps: {\n            ...n.formProps,\n            ...t.formProps,\n            onValuesChange: s == null ? void 0 : s.onValuesChange,\n            onKeyUp: s == null ? void 0 : s.onKeyUp\n        },\n        saveButtonProps: {\n            ...t.saveButtonProps,\n            onClick: ()=>n.submit()\n        }\n    };\n}, \"useStepsForm\");\n\n\n\n\n\nvar wr = o((e, t)=>{\n    let r = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.getDefaultSortOrder)(e, t);\n    if (r) return `${r}end`;\n}, \"getDefaultSortOrder\"), Rr = o((e, t, r = \"eq\")=>(0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.getDefaultFilter)(e, t, r), \"getDefaultFilter\"), yt = o((e)=>{\n    let t = [];\n    if (Array.isArray(e)) e.sort((r, s)=>{\n        var n, i;\n        return (((n = r.column) == null ? void 0 : n.sorter).multiple ?? 0) < (((i = s.column) == null ? void 0 : i.sorter).multiple ?? 0) ? -1 : 0;\n    }).map((r)=>{\n        if (r.field && r.order) {\n            let s = Array.isArray(r.field) ? r.field.join(\".\") : `${r.field}`;\n            t.push({\n                field: `${r.columnKey ?? s}`,\n                order: r.order.replace(\"end\", \"\")\n            });\n        }\n    });\n    else if (e.field && e.order) {\n        let r = Array.isArray(e.field) ? e.field.join(\".\") : `${e.field}`;\n        t.push({\n            field: `${e.columnKey ?? r}`,\n            order: e.order.replace(\"end\", \"\")\n        });\n    }\n    return t;\n}, \"mapAntdSorterToCrudSorting\"), ft = o((e, t, r)=>{\n    let s = [], n = (r ?? []).reduce((i, a)=>{\n        let p = a.key || a.field;\n        return {\n            ...i,\n            [p]: a\n        };\n    }, {});\n    return Object.keys(e).map((i)=>{\n        var d, m;\n        let a = e[i], p = ((d = t.filter((c)=>c.operator !== \"or\").find((c)=>c.field === i)) == null ? void 0 : d.operator) || ((m = n[i]) == null ? void 0 : m.operator);\n        p !== \"or\" && p !== \"and\" && s.push({\n            field: i,\n            operator: p ?? (Array.isArray(a) ? \"in\" : \"eq\"),\n            value: a\n        });\n    }), s;\n}, \"mapAntdFilterToCrudFilter\");\n\n\nvar Fe = o(({ to: e, element: t })=>{\n    let { Link: r } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)(), s = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), n = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(s === \"legacy\" ? r : n, {\n        to: e,\n        replace: !1,\n        onClick: (a)=>{\n            a.preventDefault();\n        }\n    }, t);\n}, \"PaginationLink\");\nvar gt = o(({ onSearch: e, initialCurrent: t, initialPageSize: r, hasPagination: s = !0, pagination: n, initialSorter: i, permanentSorter: a, initialFilter: p, permanentFilter: d, defaultSetFilterBehavior: m, filters: c, sorters: l, syncWithLocation: y, resource: g, successNotification: b, errorNotification: u, queryOptions: x, liveMode: f, onLiveEvent: S, liveParams: F, meta: P, metaData: C, dataProviderName: B } = {})=>{\n    let { tableQueryResult: k, tableQuery: v, current: D, setCurrent: T, pageSize: L, setPageSize: G, filters: V, setFilters: h, sorters: W, setSorters: Z, sorter: A, setSorter: I, createLinkForSyncWithLocation: M, pageCount: O, overtime: w } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTable)({\n        permanentSorter: a,\n        permanentFilter: d,\n        initialCurrent: t,\n        initialPageSize: r,\n        pagination: n,\n        hasPagination: s,\n        filters: c,\n        sorters: l,\n        initialSorter: i,\n        initialFilter: p,\n        syncWithLocation: y,\n        resource: g,\n        defaultSetFilterBehavior: m,\n        successNotification: b,\n        errorNotification: u,\n        queryOptions: x,\n        liveMode: f,\n        onLiveEvent: S,\n        liveParams: F,\n        meta: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(P, C),\n        metaData: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(P, C),\n        dataProviderName: B\n    }), { syncWithLocation: N } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useSyncWithLocation)(), Q = y ?? N, X = _barrel_optimize_names_Form_Grid_antd__WEBPACK_IMPORTED_MODULE_4__[\"default\"].useBreakpoint(), [$] = _barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].useForm(), R = (0,sunflower_antd__WEBPACK_IMPORTED_MODULE_1__.useForm)({\n        form: $\n    }), j = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLiveMode)(f), E = s === !1 ? \"off\" : \"server\", _ = ((n == null ? void 0 : n.mode) ?? E) !== \"off\", re = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(c == null ? void 0 : c.initial, p), { data: J, isFetched: fe, isLoading: q } = k;\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (Q) {\n            let ae = R.form.getFieldsValue(), te = Object.keys(ae).reduce((de, ie)=>{\n                let pe = V.find((Te)=>\"field\" in Te && Te.field === ie);\n                return pe && (de[ie] = pe == null ? void 0 : pe.value), de;\n            }, {});\n            R.form.setFieldsValue(te);\n        }\n    }, [\n        Q\n    ]);\n    let ee = o((ae, te, de)=>{\n        if (te && Object.keys(te).length > 0) {\n            let ie = ft(te, V, re);\n            h(ie);\n        }\n        if (de && Object.keys(de).length > 0) {\n            let ie = yt(de);\n            Z(ie);\n        }\n        _ && (T == null || T(ae.current || 1), G == null || G(ae.pageSize || 10));\n    }, \"onChange\"), ye = o(async (ae)=>{\n        if (e) {\n            let te = await e(ae);\n            h(te), _ && (T == null || T(1));\n        }\n    }, \"onFinish\"), ne = o(()=>_ ? {\n            itemRender: (ae, te, de)=>{\n                var pe;\n                let ie = M({\n                    pagination: {\n                        pageSize: L,\n                        current: ae\n                    },\n                    sorters: W,\n                    filters: V\n                });\n                if (te === \"page\") return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Fe, {\n                    to: ie,\n                    element: `${ae}`\n                });\n                if (te === \"next\" || te === \"prev\") return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Fe, {\n                    to: ie,\n                    element: de\n                });\n                if (te === \"jump-next\" || te === \"jump-prev\") {\n                    let Te = (pe = de == null ? void 0 : de.props) == null ? void 0 : pe.children;\n                    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Fe, {\n                        to: ie,\n                        element: react__WEBPACK_IMPORTED_MODULE_0__.Children.count(Te) > 1 ? /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, Te) : Te\n                    });\n                }\n                return de;\n            },\n            pageSize: L,\n            current: D,\n            simple: !X.sm,\n            position: X.sm ? [\n                \"bottomRight\"\n            ] : [\n                \"bottomCenter\"\n            ],\n            total: J == null ? void 0 : J.total\n        } : !1, \"antdPagination\");\n    return {\n        searchFormProps: {\n            ...R.formProps,\n            onFinish: ye\n        },\n        tableProps: {\n            dataSource: J == null ? void 0 : J.data,\n            loading: j === \"auto\" ? q : !fe,\n            onChange: ee,\n            pagination: ne(),\n            scroll: {\n                x: !0\n            }\n        },\n        tableQueryResult: k,\n        tableQuery: v,\n        sorters: W,\n        sorter: A,\n        filters: V,\n        setSorters: Z,\n        setSorter: I,\n        setFilters: h,\n        current: D,\n        setCurrent: T,\n        pageSize: L,\n        setPageSize: G,\n        pageCount: O,\n        createLinkForSyncWithLocation: M,\n        overtime: w\n    };\n}, \"useTable\");\nvar Gr = o(({ autoSubmitClose: e = !0, ...t } = {})=>{\n    let r = gt({\n        ...t,\n        successNotification: void 0,\n        errorNotification: void 0\n    }), s = he({\n        ...t,\n        action: \"edit\",\n        redirect: !1\n    }), { id: n, setId: i, saveButtonProps: a } = s, p = {\n        onClick: ()=>{\n            i(void 0);\n        }\n    }, d = o((c)=>({\n            onClick: ()=>i(c)\n        }), \"editButtonProps\"), m = o((c)=>c === n, \"isEditing\");\n    return {\n        ...r,\n        ...s,\n        formProps: {\n            ...s.formProps,\n            onFinish: async (c)=>{\n                let l = await s.onFinish(c);\n                return e && i(void 0), l;\n            }\n        },\n        saveButtonProps: a,\n        cancelButtonProps: p,\n        editButtonProps: d,\n        isEditing: m\n    };\n}, \"useEditableTable\");\n\nvar cm = o((e)=>{\n    let { query: t, defaultValueQuery: r, onSearch: s, options: n } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useSelect)(e);\n    return {\n        selectProps: {\n            options: n,\n            onSearch: s,\n            loading: r.isFetching,\n            showSearch: !0,\n            filterOption: !1\n        },\n        query: t,\n        defaultValueQuery: r,\n        queryResult: t,\n        defaultValueQueryResult: r\n    };\n}, \"useSelect\");\n\nvar gm = o(({ resource: e, sort: t, sorters: r, filters: s, optionLabel: n, optionValue: i, queryOptions: a, fetchSize: p, pagination: d, liveMode: m, defaultValue: c, selectedOptionsOrder: l, onLiveEvent: y, liveParams: g, meta: b, metaData: u, dataProviderName: x })=>{\n    let { query: f, options: S } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useSelect)({\n        resource: e,\n        sort: t,\n        sorters: r,\n        filters: s,\n        optionLabel: n,\n        optionValue: i,\n        queryOptions: a,\n        fetchSize: p,\n        pagination: d,\n        liveMode: m,\n        defaultValue: c,\n        selectedOptionsOrder: l,\n        onLiveEvent: y,\n        liveParams: g,\n        meta: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(b, u),\n        metaData: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(b, u),\n        dataProviderName: x\n    });\n    return {\n        checkboxGroupProps: {\n            options: S,\n            defaultValue: c\n        },\n        query: f,\n        queryResult: f\n    };\n}, \"useCheckboxGroup\");\n\nvar Pm = o(({ resource: e, sort: t, sorters: r, filters: s, optionLabel: n, optionValue: i, queryOptions: a, fetchSize: p, pagination: d, liveMode: m, defaultValue: c, selectedOptionsOrder: l, onLiveEvent: y, liveParams: g, meta: b, metaData: u, dataProviderName: x })=>{\n    let { query: f, options: S } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useSelect)({\n        resource: e,\n        sort: t,\n        sorters: r,\n        filters: s,\n        optionLabel: n,\n        optionValue: i,\n        queryOptions: a,\n        fetchSize: p,\n        pagination: d,\n        liveMode: m,\n        defaultValue: c,\n        selectedOptionsOrder: l,\n        onLiveEvent: y,\n        liveParams: g,\n        meta: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(b, u),\n        metaData: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(b, u),\n        dataProviderName: x\n    });\n    return {\n        radioGroupProps: {\n            options: S,\n            defaultValue: c\n        },\n        query: f,\n        queryResult: f\n    };\n}, \"useRadioGroup\");\n\n\n\nvar Lm = o(({ resource: e, resourceName: t, mapData: r = o((c)=>c, \"mapData\"), paparseOptions: s, batchSize: n = Number.MAX_SAFE_INTEGER, onFinish: i, meta: a, metaData: p, dataProviderName: d, onProgress: m } = {})=>{\n    let c = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { resource: l } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(e ?? t), { mutationResult: y, isLoading: g, handleChange: b } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useImport)({\n        resource: (l == null ? void 0 : l.identifier) ?? (l == null ? void 0 : l.name),\n        mapData: r,\n        paparseOptions: s,\n        batchSize: n,\n        meta: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(a, p),\n        metaData: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(a, p),\n        dataProviderName: d,\n        onFinish: i,\n        onProgress: m ?? (({ totalAmount: u, processedAmount: x })=>{\n            if (u > 0 && x > 0) {\n                let f = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                    style: {\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        justifyContent: \"space-between\",\n                        marginTop: \"-7px\"\n                    }\n                }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Progress_notification_antd__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                    type: \"circle\",\n                    percent: Math.floor(x / u * 100),\n                    size: 50,\n                    strokeColor: \"#1890ff\",\n                    status: \"normal\"\n                }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n                    style: {\n                        marginLeft: 8,\n                        width: \"100%\"\n                    }\n                }, c(\"notifications.importProgress\", {\n                    processed: x,\n                    total: u\n                }, `Importing: ${x}/${u}`)));\n                _barrel_optimize_names_Progress_notification_antd__WEBPACK_IMPORTED_MODULE_6__[\"default\"].open({\n                    description: f,\n                    message: null,\n                    key: `${l}-import`,\n                    duration: 0\n                }), x >= u, x === u && setTimeout(()=>{\n                    _barrel_optimize_names_Progress_notification_antd__WEBPACK_IMPORTED_MODULE_6__[\"default\"].destroy(`${l}-import`);\n                }, 4500);\n            }\n        })\n    });\n    return {\n        uploadProps: {\n            onChange: b,\n            beforeUpload: ()=>!1,\n            showUploadList: !1,\n            accept: \".csv\"\n        },\n        buttonProps: {\n            type: \"default\",\n            loading: g\n        },\n        mutationResult: y,\n        isLoading: g\n    };\n}, \"useImport\");\n\n\n\n\nvar as = o(({ resource: e, initialCurrent: t, initialPageSize: r, pagination: s, hasPagination: n = !0, initialSorter: i, permanentSorter: a, initialFilter: p, permanentFilter: d, defaultSetFilterBehavior: m, filters: c, sorters: l, onSearch: y, queryOptions: g, syncWithLocation: b, successNotification: u, errorNotification: x, liveMode: f, onLiveEvent: S, liveParams: F, meta: P, metaData: C, dataProviderName: B } = {})=>{\n    let { sorters: k, sorter: v, filters: D, current: T, pageSize: L, pageCount: G, setFilters: V, setCurrent: h, setPageSize: W, setSorter: Z, setSorters: A, createLinkForSyncWithLocation: I, tableQueryResult: M, tableQuery: O, overtime: w } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTable)({\n        resource: e,\n        initialSorter: i,\n        permanentSorter: a,\n        initialFilter: p,\n        permanentFilter: d,\n        filters: c,\n        sorters: l,\n        defaultSetFilterBehavior: m,\n        initialCurrent: t,\n        initialPageSize: r,\n        queryOptions: g,\n        successNotification: u,\n        errorNotification: x,\n        liveMode: f,\n        onLiveEvent: S,\n        liveParams: F,\n        meta: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(P, C),\n        metaData: (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(P, C),\n        syncWithLocation: b,\n        dataProviderName: B,\n        pagination: s,\n        hasPagination: n\n    }), N = n === !1 ? \"off\" : \"server\", Q = ((s == null ? void 0 : s.mode) ?? N) !== \"off\", X = _barrel_optimize_names_Form_Grid_antd__WEBPACK_IMPORTED_MODULE_4__[\"default\"].useBreakpoint(), $ = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLiveMode)(f), [R] = _barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].useForm(), { data: j, isFetched: E, isLoading: _ } = M, re = o((q, ee)=>{\n        Q && (h(q), W(ee || 10));\n    }, \"onChange\"), J = o(async (q)=>{\n        if (y) {\n            let ee = await y(q);\n            return Q && (h == null || h(1)), V(ee);\n        }\n    }, \"onFinish\"), fe = o(()=>Q ? {\n            itemRender: (q, ee, ye)=>{\n                var ae;\n                let ne = I({\n                    pagination: {\n                        pageSize: L,\n                        current: q\n                    },\n                    sorters: k,\n                    filters: D\n                });\n                if (ee === \"page\") return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Fe, {\n                    to: ne,\n                    element: `${q}`\n                });\n                if (ee === \"next\" || ee === \"prev\") return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Fe, {\n                    to: ne,\n                    element: ye\n                });\n                if (ee === \"jump-next\" || ee === \"jump-prev\") {\n                    let te = (ae = ye == null ? void 0 : ye.props) == null ? void 0 : ae.children;\n                    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(Fe, {\n                        to: ne,\n                        element: react__WEBPACK_IMPORTED_MODULE_0__.Children.count(te) > 1 ? /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, te) : te\n                    });\n                }\n                return ye;\n            },\n            pageSize: L,\n            current: T,\n            simple: !X.sm,\n            total: j == null ? void 0 : j.total,\n            onChange: re\n        } : !1, \"antdPagination\");\n    return {\n        searchFormProps: {\n            form: R,\n            onFinish: J\n        },\n        listProps: {\n            dataSource: j == null ? void 0 : j.data,\n            loading: $ === \"auto\" ? _ : !E,\n            pagination: fe()\n        },\n        query: O,\n        queryResult: M,\n        filters: D,\n        setFilters: V,\n        sorter: v,\n        setSorter: Z,\n        sorters: k,\n        setSorters: A,\n        current: T,\n        setCurrent: h,\n        pageSize: L,\n        setPageSize: W,\n        pageCount: G,\n        createLinkForSyncWithLocation: I,\n        overtime: w\n    };\n}, \"useSimpleList\");\n\nvar Nm = o(()=>{\n    let [e, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((s)=>{\n        ds(s.fileList).includes(!0) ? t(!0) : t(!1);\n    }, []);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            isLoading: e,\n            onChange: r\n        }), [\n        e\n    ]);\n}, \"useFileUploadState\"), ds = o((e)=>e.map((t)=>{\n        switch(t.status){\n            case \"uploading\":\n                return !0;\n            default:\n                return !1;\n        }\n    }), \"mapStatusToLoading\");\n\n\nvar He = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    siderCollapsed: !1,\n    mobileSiderOpen: !1,\n    setSiderCollapsed: ()=>{},\n    setMobileSiderOpen: ()=>{}\n}), xt = o(({ children: e, initialSiderCollapsed: t, onSiderCollapsed: r })=>{\n    let [s, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(t ?? !1), [i, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), p = o((d)=>{\n        n(d), r && r(d);\n    }, \"setSiderCollapsed\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(He.Provider, {\n        value: {\n            siderCollapsed: s,\n            mobileSiderOpen: i,\n            setSiderCollapsed: p,\n            setMobileSiderOpen: a\n        }\n    }, e);\n}, \"ThemedLayoutContextProvider\");\nvar _m = o(()=>{\n    let { mobileSiderOpen: e, siderCollapsed: t, setMobileSiderOpen: r, setSiderCollapsed: s } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(He);\n    return {\n        siderVisible: e,\n        setSiderVisible: r,\n        drawerSiderVisible: t,\n        setDrawerSiderVisible: s\n    };\n}, \"useSiderVisible\");\n\nvar To = o(()=>{\n    let { mobileSiderOpen: e, siderCollapsed: t, setMobileSiderOpen: r, setSiderCollapsed: s } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(He);\n    return {\n        mobileSiderOpen: e,\n        siderCollapsed: t,\n        setMobileSiderOpen: r,\n        setSiderCollapsed: s\n    };\n}, \"useThemedLayoutContext\");\n\n\n\n\n\nvar ht = o(({ message: e, cancelMutation: t, undoableTimeout: r })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n            marginTop: \"-7px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Progress_notification_antd__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n        type: \"circle\",\n        percent: (r ?? 0) * 20,\n        format: (s)=>s && s / 20,\n        size: 50,\n        strokeColor: \"#1890ff\",\n        status: \"normal\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            marginLeft: 8,\n            width: \"100%\"\n        }\n    }, e), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        style: {\n            flexShrink: 0\n        },\n        onClick: t,\n        disabled: r === 0,\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_UndoOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_8__[\"default\"], null)\n    })), \"UndoableNotification\");\nvar uc = {\n    open: ({ key: e, message: t, description: r, type: s, cancelMutation: n, undoableTimeout: i })=>{\n        s === \"progress\" ? _barrel_optimize_names_Progress_notification_antd__WEBPACK_IMPORTED_MODULE_6__[\"default\"].open({\n            key: e,\n            description: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ht, {\n                notificationKey: e,\n                message: t,\n                cancelMutation: ()=>{\n                    n == null || n(), _barrel_optimize_names_Progress_notification_antd__WEBPACK_IMPORTED_MODULE_6__[\"default\"].destroy(e ?? \"\");\n                },\n                undoableTimeout: i\n            }),\n            message: null,\n            duration: 0,\n            closeIcon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null)\n        }) : _barrel_optimize_names_Progress_notification_antd__WEBPACK_IMPORTED_MODULE_6__[\"default\"].open({\n            key: e,\n            description: t,\n            message: r ?? null,\n            type: s\n        });\n    },\n    close: (e)=>_barrel_optimize_names_Progress_notification_antd__WEBPACK_IMPORTED_MODULE_6__[\"default\"].destroy(e)\n}, mc = o(()=>{\n    let { notification: e } = _barrel_optimize_names_App_notification_antd__WEBPACK_IMPORTED_MODULE_9__[\"default\"].useApp(), t = \"open\" in e ? e : _barrel_optimize_names_Progress_notification_antd__WEBPACK_IMPORTED_MODULE_6__[\"default\"];\n    return {\n        open: ({ key: s, message: n, description: i, type: a, cancelMutation: p, undoableTimeout: d })=>{\n            a === \"progress\" ? t.open({\n                key: s,\n                description: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ht, {\n                    notificationKey: s,\n                    message: n,\n                    cancelMutation: ()=>{\n                        p == null || p(), t.destroy(s ?? \"\");\n                    },\n                    undoableTimeout: d\n                }),\n                message: null,\n                duration: 0,\n                closeIcon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null)\n            }) : t.open({\n                key: s,\n                description: n,\n                message: i ?? null,\n                type: a\n            });\n        },\n        close: (s)=>t.destroy(s)\n    };\n}, \"useNotificationProvider\");\n\n\n\n\n\n\nvar go = {\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    position: \"fixed\",\n    top: 64,\n    zIndex: 999\n};\nvar Ct = o(({ Title: e, render: t, meta: r })=>{\n    let [s, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [i, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), p = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useIsExistAuthentication)(), d = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), m = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)(), { warnWhen: c, setWarnWhen: l } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useWarnAboutChange)(), { Link: y } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)(), g = d === \"legacy\" ? y : m, b = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTitle)(), u = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { menuItems: x, selectedKey: f, defaultOpenKeys: S } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useMenu)({\n        meta: r\n    }), F = _barrel_optimize_names_Form_Grid_antd__WEBPACK_IMPORTED_MODULE_4__[\"default\"].useBreakpoint(), { hasDashboard: P } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)(), C = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)(), { mutate: B } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogout)({\n        v3LegacyAuthProviderCompatible: !!(C != null && C.isLegacy)\n    }), k = typeof F.lg > \"u\" ? !1 : !F.lg, v = e ?? b ?? Ft, D = o((I, M)=>I.map((O)=>{\n            let { icon: w, label: N, route: Q, key: X, name: $, children: R, parentName: j, meta: E, options: _ } = O;\n            if (R.length > 0) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                key: O.key,\n                resource: $,\n                action: \"list\",\n                params: {\n                    resource: O\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"].SubMenu, {\n                key: O.key,\n                icon: w ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_11__[\"default\"], null),\n                title: N\n            }, D(R, M)));\n            let re = X === M, J = !((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(E == null ? void 0 : E.parent, _ == null ? void 0 : _.parent, j) !== void 0 && R.length === 0);\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                key: O.key,\n                resource: $,\n                action: \"list\",\n                params: {\n                    resource: O\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"].Item, {\n                key: O.key,\n                style: {\n                    fontWeight: re ? \"bold\" : \"normal\"\n                },\n                icon: w ?? (J && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_11__[\"default\"], null))\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(g, {\n                to: Q ?? \"\"\n            }, N), !s && re && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                className: \"ant-menu-tree-arrow\"\n            })));\n        }), \"renderTreeView\"), T = o(()=>{\n        c ? window.confirm(u(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\")) && (l(!1), B()) : B();\n    }, \"handleLogout\"), L = p && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"].Item, {\n        key: \"logout\",\n        onClick: T,\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_12__[\"default\"], null)\n    }, u(\"buttons.logout\", \"Logout\")), G = P ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"].Item, {\n        key: \"dashboard\",\n        style: {\n            fontWeight: f === \"/\" ? \"bold\" : \"normal\"\n        },\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_13__[\"default\"], null)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(g, {\n        to: \"/\"\n    }, u(\"dashboard.title\", \"Dashboard\")), !s && f === \"/\" && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"ant-menu-tree-arrow\"\n    })) : null, V = D(x, f), h = o(()=>t ? t({\n            dashboard: G,\n            items: V,\n            logout: L,\n            collapsed: s\n        }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, G, V, L), \"renderSider\"), W = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n            theme: \"dark\",\n            selectedKeys: f ? [\n                f\n            ] : [],\n            defaultOpenKeys: S,\n            mode: \"inline\",\n            onClick: ()=>{\n                a(!1), F.lg || n(!0);\n            }\n        }, h())), \"renderMenu\"), Z = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n            open: i,\n            onClose: ()=>a(!1),\n            placement: \"left\",\n            closable: !1,\n            width: 200,\n            bodyStyle: {\n                padding: 0\n            },\n            maskClosable: !0\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"], null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"].Sider, {\n            style: {\n                height: \"100vh\",\n                overflow: \"hidden\"\n            }\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(v, {\n            collapsed: !1\n        }), W()))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n            style: go,\n            size: \"large\",\n            onClick: ()=>a(!0),\n            icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_16__[\"default\"], null)\n        })), \"renderDrawerSider\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_17__[\"default\"], {\n        theme: {\n            components: {\n                Menu: {\n                    colorItemBg: \"transparent\",\n                    colorItemText: \"#fff\",\n                    colorItemTextSelected: \"#fff\",\n                    colorItemBgSelected: \"transparent\",\n                    colorItemTextHover: \"#fff\"\n                }\n            }\n        }\n    }, o(()=>k ? Z() : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"].Sider, {\n            collapsible: !0,\n            collapsed: s,\n            onCollapse: (I)=>n(I),\n            collapsedWidth: 80,\n            breakpoint: \"lg\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(v, {\n            collapsed: s\n        }), W()), \"renderContent\")());\n}, \"Sider\");\n\n\n\nvar Bt = o(()=>{\n    let e = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)(), { data: t } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGetIdentity)({\n        v3LegacyAuthProviderCompatible: !!(e != null && e.isLegacy)\n    });\n    return t && (t.name || t.avatar) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"].Header, {\n        style: {\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            alignItems: \"center\",\n            padding: \"0px 24px\",\n            height: \"64px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        style: {\n            marginLeft: \"8px\"\n        }\n    }, (t == null ? void 0 : t.name) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, {\n        style: {\n            color: \"white\"\n        },\n        strong: !0\n    }, t.name), (t == null ? void 0 : t.avatar) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n        src: t == null ? void 0 : t.avatar,\n        alt: t == null ? void 0 : t.name\n    }))) : null;\n}, \"Header\");\nvar Ws = o(({ children: e, Header: t, Sider: r, Title: s, Footer: n, OffLayoutArea: i })=>{\n    let a = _barrel_optimize_names_Form_Grid_antd__WEBPACK_IMPORTED_MODULE_4__[\"default\"].useBreakpoint(), p = r ?? Ct, d = t ?? Bt, m = typeof a.sm > \"u\" ? !0 : a.sm;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        style: {\n            minHeight: \"100vh\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(p, {\n        Title: s\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"], null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(d, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"].Content, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            minHeight: 360,\n            padding: m ? 24 : 12\n        }\n    }, e), i && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(i, null)), n && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(n, null)));\n}, \"Layout\");\n\n\nvar Ft = o(({ collapsed: e })=>{\n    let t = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), r = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)(), { Link: s } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(t === \"legacy\" ? s : r, {\n        to: \"/\"\n    }, e ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", {\n        src: \"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine-mini.svg\",\n        alt: \"Refine\",\n        style: {\n            margin: \"0 auto\",\n            padding: \"12px 0\",\n            maxHeight: \"65.5px\"\n        }\n    })) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", {\n        src: \"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\",\n        alt: \"Refine\",\n        style: {\n            width: \"200px\",\n            padding: \"12px 24px\"\n        }\n    }));\n}, \"Title\");\n\n\n\n\n\n\nvar Po = {\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    position: \"fixed\",\n    top: 64,\n    zIndex: 999\n};\nvar Lt = o(({ Title: e, render: t, meta: r })=>{\n    let { token: s } = _barrel_optimize_names_Button_Drawer_Grid_Layout_Menu_theme_antd__WEBPACK_IMPORTED_MODULE_21__[\"default\"].useToken(), [n, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [a, p] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), d = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useIsExistAuthentication)(), m = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), c = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)(), { warnWhen: l, setWarnWhen: y } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useWarnAboutChange)(), { Link: g } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)(), b = m === \"legacy\" ? g : c, u = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTitle)(), x = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { menuItems: f, selectedKey: S, defaultOpenKeys: F } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useMenu)({\n        meta: r\n    }), P = _barrel_optimize_names_Form_Grid_antd__WEBPACK_IMPORTED_MODULE_4__[\"default\"].useBreakpoint(), { hasDashboard: C } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)(), B = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)(), { mutate: k } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogout)({\n        v3LegacyAuthProviderCompatible: !!(B != null && B.isLegacy)\n    }), v = typeof P.lg > \"u\" ? !1 : !P.lg, D = e ?? u ?? kt, T = o((I, M)=>I.map((O)=>{\n            let { icon: w, label: N, route: Q, key: X, name: $, children: R, parentName: j, meta: E, options: _ } = O;\n            if (R.length > 0) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                key: O.key,\n                resource: $,\n                action: \"list\",\n                params: {\n                    resource: O\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"].SubMenu, {\n                key: O.key,\n                icon: w ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_11__[\"default\"], null),\n                title: N\n            }, T(R, M)));\n            let re = X === M, J = !((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(E == null ? void 0 : E.parent, _ == null ? void 0 : _.parent, j) !== void 0 && R.length === 0);\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                key: O.key,\n                resource: $,\n                action: \"list\",\n                params: {\n                    resource: O\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"].Item, {\n                key: O.key,\n                icon: w ?? (J && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_11__[\"default\"], null))\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(b, {\n                to: Q ?? \"\"\n            }, N), !n && re && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                className: \"ant-menu-tree-arrow\"\n            })));\n        }), \"renderTreeView\"), L = o(()=>{\n        l ? window.confirm(x(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\")) && (y(!1), k()) : k();\n    }, \"handleLogout\"), G = d && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"].Item, {\n        key: \"logout\",\n        onClick: ()=>L(),\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_12__[\"default\"], null)\n    }, x(\"buttons.logout\", \"Logout\")), V = C ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"].Item, {\n        key: \"dashboard\",\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_13__[\"default\"], null)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(b, {\n        to: \"/\"\n    }, x(\"dashboard.title\", \"Dashboard\")), !n && S === \"/\" && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"ant-menu-tree-arrow\"\n    })) : null, h = T(f, S), W = o(()=>t ? t({\n            dashboard: V,\n            items: h,\n            logout: G,\n            collapsed: n\n        }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, V, h, G), \"renderSider\"), Z = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n            selectedKeys: S ? [\n                S\n            ] : [],\n            defaultOpenKeys: F,\n            mode: \"inline\",\n            style: {\n                marginTop: \"8px\",\n                border: \"none\"\n            },\n            onClick: ()=>{\n                p(!1), P.lg || i(!0);\n            }\n        }, W())), \"renderMenu\"), A = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n            open: a,\n            onClose: ()=>p(!1),\n            placement: \"left\",\n            closable: !1,\n            width: 200,\n            bodyStyle: {\n                padding: 0\n            },\n            maskClosable: !0\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"], null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"].Sider, {\n            style: {\n                height: \"100vh\",\n                overflow: \"hidden\",\n                backgroundColor: s.colorBgContainer,\n                borderRight: `1px solid ${s.colorBgElevated}`\n            }\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: {\n                width: \"200px\",\n                padding: \"0 16px\",\n                display: \"flex\",\n                justifyContent: \"flex-start\",\n                alignItems: \"center\",\n                height: \"64px\",\n                backgroundColor: s.colorBgElevated\n            }\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(D, {\n            collapsed: !1\n        })), Z()))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n            style: Po,\n            size: \"large\",\n            onClick: ()=>p(!0),\n            icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_16__[\"default\"], null)\n        })), \"renderDrawerSider\");\n    return v ? A() : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"].Sider, {\n        style: {\n            backgroundColor: s.colorBgContainer,\n            borderRight: `1px solid ${s.colorBgElevated}`\n        },\n        collapsible: !0,\n        collapsed: n,\n        onCollapse: (I)=>i(I),\n        collapsedWidth: 80,\n        breakpoint: \"lg\",\n        trigger: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n            type: \"text\",\n            style: {\n                borderRadius: 0,\n                height: \"100%\",\n                width: \"100%\",\n                backgroundColor: s.colorBgElevated\n            }\n        }, n ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LeftOutlined_LogoutOutlined_RightOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_22__[\"default\"], {\n            style: {\n                color: s.colorPrimary\n            }\n        }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LeftOutlined_LogoutOutlined_RightOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n            style: {\n                color: s.colorPrimary\n            }\n        }))\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: n ? \"80px\" : \"200px\",\n            padding: n ? \"0\" : \"0 16px\",\n            display: \"flex\",\n            justifyContent: n ? \"center\" : \"flex-start\",\n            alignItems: \"center\",\n            height: \"64px\",\n            backgroundColor: s.colorBgElevated,\n            fontSize: \"14px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(D, {\n        collapsed: n\n    })), Z());\n}, \"ThemedSider\");\n\n\n\nvar Dt = o(()=>{\n    let { token: e } = _barrel_optimize_names_Button_Drawer_Grid_Layout_Menu_theme_antd__WEBPACK_IMPORTED_MODULE_21__[\"default\"].useToken(), t = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)(), { data: r } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGetIdentity)({\n        v3LegacyAuthProviderCompatible: !!(t != null && t.isLegacy)\n    });\n    return r && (r.name || r.avatar) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"].Header, {\n        style: {\n            backgroundColor: e.colorBgElevated,\n            display: \"flex\",\n            justifyContent: \"flex-end\",\n            alignItems: \"center\",\n            padding: \"0px 24px\",\n            height: \"64px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        size: \"middle\"\n    }, (r == null ? void 0 : r.name) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, {\n        strong: !0\n    }, r.name), (r == null ? void 0 : r.avatar) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n        src: r == null ? void 0 : r.avatar,\n        alt: r == null ? void 0 : r.name\n    })))) : null;\n}, \"ThemedHeader\");\nvar Pn = o(({ children: e, Header: t, Sider: r, Title: s, Footer: n, OffLayoutArea: i })=>{\n    let a = _barrel_optimize_names_Form_Grid_antd__WEBPACK_IMPORTED_MODULE_4__[\"default\"].useBreakpoint(), p = r ?? Lt, d = t ?? Dt, m = typeof a.sm > \"u\" ? !0 : a.sm;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        style: {\n            minHeight: \"100vh\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(p, {\n        Title: s\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"], null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(d, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"].Content, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            minHeight: 360,\n            padding: m ? 24 : 12\n        }\n    }, e), i && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(i, null)), n && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(n, null)));\n}, \"ThemedLayout\");\n\n\n\nvar kn = \"Refine Project\", Dn = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\"\n}, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M13.7889 0.422291C12.6627 -0.140764 11.3373 -0.140764 10.2111 0.422291L2.21115 4.42229C0.85601 5.09986 0 6.48491 0 8V16C0 17.5151 0.85601 18.9001 2.21115 19.5777L10.2111 23.5777C11.3373 24.1408 12.6627 24.1408 13.7889 23.5777L21.7889 19.5777C23.144 18.9001 24 17.5151 24 16V8C24 6.48491 23.144 5.09986 21.7889 4.42229L13.7889 0.422291ZM8 8C8 5.79086 9.79086 4 12 4C14.2091 4 16 5.79086 16 8V16C16 18.2091 14.2091 20 12 20C9.79086 20 8 18.2091 8 16V8Z\",\n    fill: \"currentColor\"\n}), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n    d: \"M14 8C14 9.10457 13.1046 10 12 10C10.8954 10 10 9.10457 10 8C10 6.89543 10.8954 6 12 6C13.1046 6 14 6.89543 14 8Z\",\n    fill: \"currentColor\"\n})), kt = o(({ collapsed: e, icon: t = Dn, text: r = kn, wrapperStyles: s })=>{\n    let { token: n } = _barrel_optimize_names_Button_Drawer_Grid_Layout_Menu_theme_antd__WEBPACK_IMPORTED_MODULE_21__[\"default\"].useToken(), i = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), a = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)(), { Link: p } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(i === \"legacy\" ? p : a, {\n        to: \"/\",\n        style: {\n            display: \"inline-block\",\n            textDecoration: \"none\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            fontSize: \"inherit\",\n            ...s\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height: \"24px\",\n            width: \"24px\",\n            color: n.colorPrimary\n        }\n    }, t), !e && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Title, {\n        style: {\n            fontSize: \"inherit\",\n            marginBottom: 0,\n            fontWeight: 700\n        }\n    }, r)));\n}, \"ThemedTitle\");\n\n\n\n\n\n\nvar Lo = {\n    borderStartStartRadius: 0,\n    borderEndStartRadius: 0,\n    position: \"fixed\",\n    top: 64,\n    zIndex: 999\n};\nvar Rt = o(({ Title: e, render: t, meta: r, fixed: s, activeItemDisabled: n = !1, siderItemsAreCollapsed: i = !0 })=>{\n    var $;\n    let { token: a } = _barrel_optimize_names_Button_Drawer_Grid_Layout_Menu_theme_antd__WEBPACK_IMPORTED_MODULE_21__[\"default\"].useToken(), { siderCollapsed: p, setSiderCollapsed: d, mobileSiderOpen: m, setMobileSiderOpen: c } = To(), l = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useIsExistAuthentication)(), y = ($ = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_17__[\"default\"].ConfigContext)) == null ? void 0 : $.direction, g = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), b = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)(), { warnWhen: u, setWarnWhen: x } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useWarnAboutChange)(), { Link: f } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)(), S = g === \"legacy\" ? f : b, F = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTitle)(), P = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { menuItems: C, selectedKey: B, defaultOpenKeys: k } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useMenu)({\n        meta: r\n    }), v = _barrel_optimize_names_Form_Grid_antd__WEBPACK_IMPORTED_MODULE_4__[\"default\"].useBreakpoint(), { hasDashboard: D } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)(), T = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)(), { mutate: L } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogout)({\n        v3LegacyAuthProviderCompatible: !!(T != null && T.isLegacy)\n    }), G = typeof v.lg > \"u\" ? !1 : !v.lg, V = e ?? F ?? be, h = o((R, j)=>R.map((E)=>{\n            let { icon: _, label: re, route: J, key: fe, name: q, children: ee, parentName: ye, meta: ne, options: ae } = E;\n            if (ee.length > 0) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                key: E.key,\n                resource: q,\n                action: \"list\",\n                params: {\n                    resource: E\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"].SubMenu, {\n                key: E.key,\n                icon: _ ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_11__[\"default\"], null),\n                title: re\n            }, h(ee, j)));\n            let te = fe === j, de = !((0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(ne == null ? void 0 : ne.parent, ae == null ? void 0 : ae.parent, ye) !== void 0 && ee.length === 0), ie = n && te ? {\n                pointerEvents: \"none\"\n            } : {};\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.CanAccess, {\n                key: E.key,\n                resource: q,\n                action: \"list\",\n                params: {\n                    resource: E\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"].Item, {\n                key: E.key,\n                icon: _ ?? (de && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_11__[\"default\"], null)),\n                style: ie\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(S, {\n                to: J ?? \"\",\n                style: ie\n            }, re), !p && te && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                className: \"ant-menu-tree-arrow\"\n            })));\n        }), \"renderTreeView\"), W = o(()=>{\n        u ? window.confirm(P(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\")) && (x(!1), L()) : L();\n    }, \"handleLogout\"), Z = l && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"].Item, {\n        key: \"logout\",\n        onClick: ()=>W(),\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_12__[\"default\"], null)\n    }, P(\"buttons.logout\", \"Logout\")), A = D ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"].Item, {\n        key: \"dashboard\",\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_13__[\"default\"], null)\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(S, {\n        to: \"/\"\n    }, P(\"dashboard.title\", \"Dashboard\")), !p && B === \"/\" && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"ant-menu-tree-arrow\"\n    })) : null, I = (()=>i ? [] : C.map(({ key: R })=>R))(), M = h(C, B), O = o(()=>t ? t({\n            dashboard: A,\n            items: M,\n            logout: Z,\n            collapsed: p\n        }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, A, M, Z), \"renderSider\"), w = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_10__[\"default\"], {\n            selectedKeys: B ? [\n                B\n            ] : [],\n            defaultOpenKeys: [\n                ...k,\n                ...I\n            ],\n            mode: \"inline\",\n            style: {\n                paddingTop: \"8px\",\n                border: \"none\",\n                overflow: \"auto\",\n                height: \"calc(100% - 72px)\"\n            },\n            onClick: ()=>{\n                c(!1);\n            }\n        }, O()), \"renderMenu\"), N = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_14__[\"default\"], {\n            open: m,\n            onClose: ()=>c(!1),\n            placement: y === \"rtl\" ? \"right\" : \"left\",\n            closable: !1,\n            width: 200,\n            bodyStyle: {\n                padding: 0\n            },\n            maskClosable: !0\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"], null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"].Sider, {\n            style: {\n                height: \"100vh\",\n                backgroundColor: a.colorBgContainer,\n                borderRight: `1px solid ${a.colorBgElevated}`\n            }\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: {\n                width: \"200px\",\n                padding: \"0 16px\",\n                display: \"flex\",\n                justifyContent: \"flex-start\",\n                alignItems: \"center\",\n                height: \"64px\",\n                backgroundColor: a.colorBgElevated\n            }\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(V, {\n            collapsed: !1\n        })), w()))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n            style: Lo,\n            size: \"large\",\n            onClick: ()=>c(!0),\n            icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_16__[\"default\"], null)\n        })), \"renderDrawerSider\");\n    if (G) return N();\n    let Q = {\n        backgroundColor: a.colorBgContainer,\n        borderRight: `1px solid ${a.colorBgElevated}`\n    };\n    s && (Q.position = \"fixed\", Q.top = 0, Q.height = \"100vh\", Q.zIndex = 999);\n    let X = o(()=>{\n        let R = {\n            style: {\n                color: a.colorPrimary\n            }\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(p ? y === \"rtl\" ? _barrel_optimize_names_BarsOutlined_DashboardOutlined_LeftOutlined_LogoutOutlined_RightOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_23__[\"default\"] : _barrel_optimize_names_BarsOutlined_DashboardOutlined_LeftOutlined_LogoutOutlined_RightOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_22__[\"default\"] : y === \"rtl\" ? _barrel_optimize_names_BarsOutlined_DashboardOutlined_LeftOutlined_LogoutOutlined_RightOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_22__[\"default\"] : _barrel_optimize_names_BarsOutlined_DashboardOutlined_LeftOutlined_LogoutOutlined_RightOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n            ...R\n        });\n    }, \"renderClosingIcons\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, s && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: p ? \"80px\" : \"200px\",\n            transition: \"all 0.2s\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"].Sider, {\n        style: Q,\n        collapsible: !0,\n        collapsed: p,\n        onCollapse: (R, j)=>{\n            j === \"clickTrigger\" && d(R);\n        },\n        collapsedWidth: 80,\n        breakpoint: \"lg\",\n        trigger: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n            type: \"text\",\n            style: {\n                borderRadius: 0,\n                height: \"100%\",\n                width: \"100%\",\n                backgroundColor: a.colorBgElevated\n            }\n        }, X())\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: p ? \"80px\" : \"200px\",\n            padding: p ? \"0\" : \"0 16px\",\n            display: \"flex\",\n            justifyContent: p ? \"center\" : \"flex-start\",\n            alignItems: \"center\",\n            height: \"64px\",\n            backgroundColor: a.colorBgElevated,\n            fontSize: \"14px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(V, {\n        collapsed: p\n    })), w()));\n}, \"ThemedSiderV2\");\n\n\n\nvar It = o(({ isSticky: e, sticky: t })=>{\n    let { token: r } = _barrel_optimize_names_Button_Drawer_Grid_Layout_Menu_theme_antd__WEBPACK_IMPORTED_MODULE_21__[\"default\"].useToken(), s = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)(), { data: n } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGetIdentity)({\n        v3LegacyAuthProviderCompatible: !!(s != null && s.isLegacy)\n    });\n    if (!(n && (n.name || n.avatar))) return null;\n    let a = {\n        backgroundColor: r.colorBgElevated,\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        alignItems: \"center\",\n        padding: \"0px 24px\",\n        height: \"64px\"\n    };\n    return (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.pickNotDeprecated)(t, e) && (a.position = \"sticky\", a.top = 0, a.zIndex = 1), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"].Header, {\n        style: a\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        size: \"middle\"\n    }, (n == null ? void 0 : n.name) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, {\n        strong: !0\n    }, n.name), (n == null ? void 0 : n.avatar) && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_20__[\"default\"], {\n        src: n == null ? void 0 : n.avatar,\n        alt: n == null ? void 0 : n.name\n    }))));\n}, \"ThemedHeaderV2\");\nvar sa = o(({ children: e, Header: t, Sider: r, Title: s, Footer: n, OffLayoutArea: i, initialSiderCollapsed: a, onSiderCollapsed: p })=>{\n    let d = _barrel_optimize_names_Form_Grid_antd__WEBPACK_IMPORTED_MODULE_4__[\"default\"].useBreakpoint(), m = r ?? Rt, c = t ?? It, l = typeof d.sm > \"u\" ? !0 : d.sm, y = !!m({\n        Title: s\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(xt, {\n        initialSiderCollapsed: a,\n        onSiderCollapsed: p\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        style: {\n            minHeight: \"100vh\"\n        },\n        hasSider: y\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(m, {\n        Title: s\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"], null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(c, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"].Content, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            minHeight: 360,\n            padding: l ? 24 : 12\n        }\n    }, e), i && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(i, null)), n && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(n, null))));\n}, \"ThemedLayoutV2\");\n\n\n\nvar be = o(({ collapsed: e, icon: t, text: r, wrapperStyles: s })=>{\n    let { title: { icon: n, text: i } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineOptions)(), a = typeof t > \"u\" ? n : t, p = typeof r > \"u\" ? i : r, { token: d } = _barrel_optimize_names_Button_Drawer_Grid_Layout_Menu_theme_antd__WEBPACK_IMPORTED_MODULE_21__[\"default\"].useToken(), m = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), c = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)(), { Link: l } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(m === \"legacy\" ? l : c, {\n        to: \"/\",\n        style: {\n            display: \"inline-block\",\n            textDecoration: \"none\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            fontSize: \"inherit\",\n            ...s\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height: \"24px\",\n            width: \"24px\",\n            color: d.colorPrimary\n        }\n    }, a), !e && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Title, {\n        style: {\n            fontSize: \"inherit\",\n            marginBottom: 0,\n            fontWeight: 700\n        }\n    }, p)));\n}, \"ThemedTitleV2\");\n\n\n\n\n\nvar Ht = o(({ resource: e, resourceNameOrRouteName: t, hideText: r = !1, accessControl: s, meta: n, children: i, onClick: a, ...p })=>{\n    let { hidden: d, disabled: m, label: c, title: l, LinkComponent: y, to: g } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useCreateButton)({\n        resource: e ?? t,\n        meta: n,\n        accessControl: s\n    }), b = m || p.disabled;\n    return d || p.hidden ? null : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(y, {\n        to: g,\n        replace: !1,\n        onClick: (x)=>{\n            if (b) {\n                x.preventDefault();\n                return;\n            }\n            a && (x.preventDefault(), a(x));\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_PlusSquareOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_25__[\"default\"], null),\n        disabled: b,\n        title: l,\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_24__.RefineButtonClassNames.CreateButton,\n        type: \"primary\",\n        ...p\n    }, !r && (i ?? c)));\n}, \"CreateButton\");\n\n\n\n\n\nvar At = o(({ resource: e, resourceNameOrRouteName: t, recordItemId: r, hideText: s = !1, accessControl: n, meta: i, children: a, onClick: p, ...d })=>{\n    let { to: m, label: c, title: l, hidden: y, disabled: g, LinkComponent: b } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useEditButton)({\n        resource: e ?? t,\n        id: r,\n        meta: i,\n        accessControl: n\n    }), u = g || d.disabled;\n    return y || d.hidden ? null : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(b, {\n        to: m,\n        replace: !1,\n        onClick: (f)=>{\n            if (u) {\n                f.preventDefault();\n                return;\n            }\n            p && (f.preventDefault(), p(f));\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_EditOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_26__[\"default\"], null),\n        disabled: u,\n        title: l,\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_24__.RefineButtonClassNames.EditButton,\n        ...d\n    }, !s && (a ?? c)));\n}, \"EditButton\");\n\n\n\n\n\nvar Ye = o(({ resource: e, resourceNameOrRouteName: t, recordItemId: r, onSuccess: s, mutationMode: n, children: i, successNotification: a, errorNotification: p, hideText: d = !1, accessControl: m, metaData: c, meta: l, dataProviderName: y, confirmTitle: g, confirmOkText: b, confirmCancelText: u, invalidates: x, ...f })=>{\n    let { title: S, label: F, hidden: P, disabled: C, loading: B, confirmTitle: k, confirmOkLabel: v, cancelLabel: D, onConfirm: T } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useDeleteButton)({\n        resource: e ?? t,\n        id: r,\n        dataProviderName: y,\n        invalidates: x,\n        meta: l,\n        onSuccess: s,\n        mutationMode: n,\n        errorNotification: p,\n        successNotification: a,\n        accessControl: m\n    }), L = C || f.disabled;\n    return P || f.hidden ? null : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Popconfirm_antd__WEBPACK_IMPORTED_MODULE_27__[\"default\"], {\n        key: \"delete\",\n        okText: b ?? v,\n        cancelText: u ?? D,\n        okType: \"danger\",\n        title: g ?? k,\n        okButtonProps: {\n            disabled: B\n        },\n        onConfirm: T,\n        disabled: L\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        danger: !0,\n        loading: B,\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_DeleteOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_28__[\"default\"], null),\n        title: S,\n        disabled: L,\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_24__.RefineButtonClassNames.DeleteButton,\n        ...f\n    }, !d && (i ?? F)));\n}, \"DeleteButton\");\n\n\n\n\n\nvar _e = o(({ resource: e, resourceNameOrRouteName: t, recordItemId: r, hideText: s = !1, dataProviderName: n, children: i, meta: a, metaData: p, ...d })=>{\n    let { onClick: m, label: c, loading: l } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefreshButton)({\n        resource: e ?? t,\n        id: r,\n        dataProviderName: n\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        onClick: m,\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_RedoOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n            spin: l\n        }),\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_24__.RefineButtonClassNames.RefreshButton,\n        ...d\n    }, !s && (i ?? c));\n}, \"RefreshButton\");\n\n\n\n\n\nvar Aa = o(({ resource: e, resourceNameOrRouteName: t, recordItemId: r, hideText: s = !1, accessControl: n, meta: i, children: a, onClick: p, ...d })=>{\n    let { to: m, label: c, title: l, hidden: y, disabled: g, LinkComponent: b } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useShowButton)({\n        resource: e ?? t,\n        id: r,\n        accessControl: n,\n        meta: i\n    }), u = g || d.disabled;\n    return y || d.hidden ? null : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(b, {\n        to: m,\n        replace: !1,\n        onClick: (f)=>{\n            if (u) {\n                f.preventDefault();\n                return;\n            }\n            p && (f.preventDefault(), p(f));\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        disabled: u,\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_EyeOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_30__[\"default\"], null),\n        title: l,\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_24__.RefineButtonClassNames.ShowButton,\n        ...d\n    }, !s && (a ?? c)));\n}, \"ShowButton\");\n\n\n\n\n\nvar Ze = o(({ resource: e, resourceNameOrRouteName: t, hideText: r = !1, accessControl: s, meta: n, children: i, onClick: a, ...p })=>{\n    let { to: d, label: m, title: c, hidden: l, disabled: y, LinkComponent: g } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useListButton)({\n        resource: e ?? t,\n        meta: n,\n        accessControl: s\n    }), b = y || p.disabled;\n    return l || p.hidden ? null : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(g, {\n        to: d,\n        replace: !1,\n        onClick: (x)=>{\n            if (b) {\n                x.preventDefault();\n                return;\n            }\n            a && (x.preventDefault(), a(x));\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_BarsOutlined_DashboardOutlined_LogoutOutlined_UnorderedListOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_16__[\"default\"], null),\n        disabled: b,\n        title: c,\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_24__.RefineButtonClassNames.ListButton,\n        ...p\n    }, !r && (i ?? m)));\n}, \"ListButton\");\n\n\n\n\n\nvar Ya = o(({ hideText: e = !1, children: t, ...r })=>{\n    let { label: s } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useExportButton)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        type: \"default\",\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_ExportOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_31__[\"default\"], null),\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_24__.RefineButtonClassNames.ExportButton,\n        ...r\n    }, !e && (t ?? s));\n}, \"ExportButton\");\n\n\n\n\n\nvar Xe = o(({ hideText: e = !1, children: t, ...r })=>{\n    let { label: s } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useSaveButton)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        type: \"primary\",\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_SaveOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_32__[\"default\"], null),\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_24__.RefineButtonClassNames.SaveButton,\n        ...r\n    }, !e && (t ?? s));\n}, \"SaveButton\");\n\n\n\n\n\nvar ai = o(({ resourceNameOrRouteName: e, resource: t, recordItemId: r, hideText: s = !1, accessControl: n, meta: i, children: a, onClick: p, ...d })=>{\n    let { to: m, LinkComponent: c, label: l, disabled: y, hidden: g, title: b } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useCloneButton)({\n        id: r,\n        resource: t ?? e,\n        accessControl: n,\n        meta: i\n    }), u = y || d.disabled;\n    return g || d.hidden ? null : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(c, {\n        to: m,\n        replace: !1,\n        onClick: (f)=>{\n            if (u) {\n                f.preventDefault();\n                return;\n            }\n            p && (f.preventDefault(), p(f));\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_PlusSquareOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_25__[\"default\"], null),\n        disabled: u,\n        title: b,\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_24__.RefineButtonClassNames.CloneButton,\n        ...d\n    }, !s && (a ?? l)));\n}, \"CloneButton\");\n\n\n\n\n\nvar ci = o(({ uploadProps: e, buttonProps: t, hideText: r = !1, children: s, loading: n, ...i })=>{\n    let { label: a } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useImportButton)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Upload_antd__WEBPACK_IMPORTED_MODULE_33__[\"default\"], {\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_ImportOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_34__[\"default\"], null),\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_24__.RefineButtonClassNames.ImportButton,\n        loading: n,\n        ...t,\n        ...i\n    }, !r && (s ?? a)));\n}, \"ImportButton\");\n\n\n\nvar hi = o(({ canCreate: e, title: t, children: r, createButtonProps: s, resource: n, wrapperProps: i, contentProps: a, headerProps: p, breadcrumb: d, headerButtonProps: m, headerButtons: c })=>{\n    var C, B;\n    let l = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { options: { breadcrumb: y } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)(), g = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), b = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)(), { resource: u, identifier: x } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(n), f = e ?? (((u == null ? void 0 : u.canCreate) ?? !!(u != null && u.create)) || s), S = typeof d > \"u\" ? y : d, F = f ? {\n        size: \"middle\",\n        resource: g === \"legacy\" ? u == null ? void 0 : u.route : x,\n        ...s\n    } : void 0, P = f ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ht, {\n        ...F\n    }) : null;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...i ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ke, {\n        title: t ?? l(`${x}.titles.list`, b(((C = u == null ? void 0 : u.meta) == null ? void 0 : C.label) ?? ((B = u == null ? void 0 : u.options) == null ? void 0 : B.label) ?? (u == null ? void 0 : u.label) ?? x, \"plural\")),\n        extra: c ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n            wrap: !0,\n            ...m\n        }, typeof c == \"function\" ? c({\n            defaultButtons: P,\n            createButtonProps: F\n        }) : c) : P,\n        breadcrumb: typeof S < \"u\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, S) ?? void 0 : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Le, null),\n        ...p ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...a ?? {}\n    }, r)));\n}, \"List\");\n\n\n\nvar Ei = o(({ title: e, saveButtonProps: t, children: r, resource: s, isLoading: n = !1, breadcrumb: i, wrapperProps: a, headerProps: p, contentProps: d, headerButtonProps: m, headerButtons: c, footerButtonProps: l, footerButtons: y, goBack: g })=>{\n    var T, L;\n    let b = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { options: { breadcrumb: u } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)(), x = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), f = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBack)(), { goBack: S } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)(), F = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)(), { resource: P, action: C, identifier: B } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(s), k = typeof i > \"u\" ? u : i, v = {\n        ...n ? {\n            disabled: !0\n        } : {},\n        ...t,\n        htmlType: \"submit\"\n    }, D = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Xe, {\n        ...v\n    }));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...a ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ke, {\n        backIcon: g,\n        onBack: C !== \"list\" || typeof C < \"u\" ? x === \"legacy\" ? S : f : void 0,\n        title: e ?? b(`${B}.titles.create`, `Create ${F(((T = P == null ? void 0 : P.meta) == null ? void 0 : T.label) ?? ((L = P == null ? void 0 : P.options) == null ? void 0 : L.label) ?? (P == null ? void 0 : P.label) ?? B, \"singular\")}`),\n        breadcrumb: typeof k < \"u\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, k) ?? void 0 : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Le, null),\n        extra: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n            wrap: !0,\n            ...m ?? {}\n        }, c ? typeof c == \"function\" ? c({\n            defaultButtons: null\n        }) : c : null),\n        ...p ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Card_Space_Spin_antd__WEBPACK_IMPORTED_MODULE_35__[\"default\"], {\n        spinning: n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Card_Space_Spin_antd__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        bordered: !1,\n        actions: [\n            /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n                key: \"action-buttons\",\n                style: {\n                    float: \"right\",\n                    marginRight: 24\n                },\n                ...l ?? {}\n            }, y ? typeof y == \"function\" ? y({\n                defaultButtons: D,\n                saveButtonProps: v\n            }) : y : D)\n        ],\n        ...d ?? {}\n    }, r))));\n}, \"Create\");\n\n\n\nvar Wi = o(({ title: e, saveButtonProps: t, mutationMode: r, recordItemId: s, children: n, deleteButtonProps: i, canDelete: a, resource: p, isLoading: d = !1, dataProviderName: m, breadcrumb: c, wrapperProps: l, headerProps: y, contentProps: g, headerButtonProps: b, headerButtons: u, footerButtonProps: x, footerButtons: f, goBack: S, autoSaveProps: F })=>{\n    var _, re, J;\n    let P = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { options: { breadcrumb: C } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)(), { mutationMode: B } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useMutationMode)(), k = r ?? B, v = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), D = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBack)(), T = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)(), { goBack: L, list: G } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)(), V = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)(), { resource: h, action: W, id: Z, identifier: A } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(p), I = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useToPath)({\n        resource: h,\n        action: \"list\"\n    }), M = s ?? Z, O = typeof c > \"u\" ? C : c, w = (h == null ? void 0 : h.list) && !s, N = a ?? ((((_ = h == null ? void 0 : h.meta) == null ? void 0 : _.canDelete) ?? (h == null ? void 0 : h.canDelete)) || i), Q = w ? {\n        ...d ? {\n            disabled: !0\n        } : {},\n        resource: v === \"legacy\" ? h == null ? void 0 : h.route : A\n    } : void 0, X = {\n        ...d ? {\n            disabled: !0\n        } : {},\n        resource: v === \"legacy\" ? h == null ? void 0 : h.route : A,\n        recordItemId: M,\n        dataProviderName: m\n    }, $ = N ? {\n        ...d ? {\n            disabled: !0\n        } : {},\n        resource: v === \"legacy\" ? h == null ? void 0 : h.route : A,\n        mutationMode: k,\n        onSuccess: ()=>{\n            v === \"legacy\" ? G((h == null ? void 0 : h.route) ?? (h == null ? void 0 : h.name) ?? \"\") : T({\n                to: I\n            });\n        },\n        recordItemId: M,\n        dataProviderName: m,\n        ...i\n    } : void 0, R = {\n        ...d ? {\n            disabled: !0\n        } : {},\n        ...t\n    }, j = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, F && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Mo, {\n        ...F\n    }), w && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ze, {\n        ...Q\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_e, {\n        ...X\n    })), E = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, N && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ye, {\n        ...$\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Xe, {\n        ...R\n    }));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...l ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ke, {\n        backIcon: S,\n        onBack: W !== \"list\" && typeof W < \"u\" ? v === \"legacy\" ? L : D : void 0,\n        title: e ?? P(`${A}.titles.edit`, `Edit ${V(((re = h == null ? void 0 : h.meta) == null ? void 0 : re.label) ?? ((J = h == null ? void 0 : h.options) == null ? void 0 : J.label) ?? (h == null ? void 0 : h.label) ?? A, \"singular\")}`),\n        extra: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n            wrap: !0,\n            ...b ?? {}\n        }, u ? typeof u == \"function\" ? u({\n            defaultButtons: j,\n            listButtonProps: Q,\n            refreshButtonProps: X\n        }) : u : j),\n        breadcrumb: typeof O < \"u\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, O) ?? void 0 : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Le, null),\n        ...y ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Card_Space_Spin_antd__WEBPACK_IMPORTED_MODULE_35__[\"default\"], {\n        spinning: d\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Card_Space_Spin_antd__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        bordered: !1,\n        actions: [\n            /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n                key: \"footer-buttons\",\n                wrap: !0,\n                style: {\n                    float: \"right\",\n                    marginRight: 24\n                },\n                ...x ?? {}\n            }, f ? typeof f == \"function\" ? f({\n                defaultButtons: E,\n                deleteButtonProps: $,\n                saveButtonProps: R\n            }) : f : E)\n        ],\n        ...g ?? {}\n    }, n))));\n}, \"Edit\");\n\n\n\nvar tp = o(({ title: e, canEdit: t, canDelete: r, deleteButtonProps: s, isLoading: n = !1, children: i, resource: a, recordItemId: p, dataProviderName: d, breadcrumb: m, contentProps: c, headerProps: l, wrapperProps: y, headerButtons: g, footerButtons: b, footerButtonProps: u, headerButtonProps: x, goBack: f })=>{\n    var $, R, j;\n    let S = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { options: { breadcrumb: F } = {} } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)(), P = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), C = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBack)(), B = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)(), { goBack: k, list: v } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)(), D = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUserFriendlyName)(), { resource: T, action: L, id: G, identifier: V } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(a), h = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useToPath)({\n        resource: T,\n        action: \"list\"\n    }), W = p ?? G, Z = typeof m > \"u\" ? F : m, A = (T == null ? void 0 : T.list) && !p, I = r ?? (((($ = T == null ? void 0 : T.meta) == null ? void 0 : $.canDelete) ?? (T == null ? void 0 : T.canDelete)) || s), M = t ?? (T == null ? void 0 : T.canEdit) ?? !!(T != null && T.edit), O = A ? {\n        resource: P === \"legacy\" ? T == null ? void 0 : T.route : V\n    } : void 0, w = M ? {\n        ...n ? {\n            disabled: !0\n        } : {},\n        type: \"primary\",\n        resource: P === \"legacy\" ? T == null ? void 0 : T.route : V,\n        recordItemId: W\n    } : void 0, N = I ? {\n        ...n ? {\n            disabled: !0\n        } : {},\n        resource: P === \"legacy\" ? T == null ? void 0 : T.route : V,\n        recordItemId: W,\n        onSuccess: ()=>{\n            P === \"legacy\" ? v((T == null ? void 0 : T.route) ?? (T == null ? void 0 : T.name) ?? \"\") : B({\n                to: h\n            });\n        },\n        dataProviderName: d,\n        ...s\n    } : void 0, Q = {\n        ...n ? {\n            disabled: !0\n        } : {},\n        resource: P === \"legacy\" ? T == null ? void 0 : T.route : V,\n        recordItemId: W,\n        dataProviderName: d\n    }, X = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, A && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ze, {\n        ...O\n    }), M && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(At, {\n        ...w\n    }), I && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ye, {\n        ...N\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_e, {\n        ...Q\n    }));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...y ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ke, {\n        backIcon: f,\n        onBack: L !== \"list\" && typeof L < \"u\" ? P === \"legacy\" ? k : C : void 0,\n        title: e ?? S(`${V}.titles.show`, `Show ${D(((R = T == null ? void 0 : T.meta) == null ? void 0 : R.label) ?? ((j = T == null ? void 0 : T.options) == null ? void 0 : j.label) ?? (T == null ? void 0 : T.label) ?? V, \"singular\")}`),\n        extra: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n            key: \"extra-buttons\",\n            wrap: !0,\n            ...x ?? {}\n        }, g ? typeof g == \"function\" ? g({\n            defaultButtons: X,\n            deleteButtonProps: N,\n            editButtonProps: w,\n            listButtonProps: O,\n            refreshButtonProps: Q\n        }) : g : X),\n        breadcrumb: typeof Z < \"u\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, Z) ?? void 0 : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Le, null),\n        ...l ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Card_Space_Spin_antd__WEBPACK_IMPORTED_MODULE_35__[\"default\"], {\n        spinning: n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Card_Space_Spin_antd__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        bordered: !1,\n        actions: b ? [\n            /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n                key: \"footer-buttons\",\n                wrap: !0,\n                ...u\n            }, typeof b == \"function\" ? b({\n                defaultButtons: null\n            }) : b)\n        ] : void 0,\n        ...c ?? {}\n    }, i))));\n}, \"Show\");\n\n\nvar sp = o(({ value: e, ...t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, {\n        ...t\n    }, e), \"TextField\");\n\n\nvar ip = o(({ value: e, ...t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Tag_antd__WEBPACK_IMPORTED_MODULE_37__[\"default\"], {\n        ...t\n    }, e == null ? void 0 : e.toString()), \"TagField\");\n\n\nvar dp = o(({ value: e, ...t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Link, {\n        href: `mailto:${e}`,\n        ...t\n    }, e), \"EmailField\");\n\n\nvar cp = o(({ value: e, imageTitle: t, ...r })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Image_antd__WEBPACK_IMPORTED_MODULE_38__[\"default\"], {\n        ...r,\n        src: e,\n        title: t\n    }), \"ImageField\");\n\n\n\nvar gp = o(({ value: e, valueLabelTrue: t = \"true\", valueLabelFalse: r = \"false\", trueIcon: s = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_CheckOutlined_CloseOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_39__[\"default\"], null), falseIcon: n = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_CheckOutlined_CloseOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_40__[\"default\"], null), ...i })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Tooltip_antd__WEBPACK_IMPORTED_MODULE_41__[\"default\"], {\n        title: e ? t : r,\n        ...i\n    }, e ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, s) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, n)), \"BooleanField\");\n\n\n\n\nvar Pp = o(({ value: e, locales: t, format: r = \"L\", ...s })=>{\n    dayjs__WEBPACK_IMPORTED_MODULE_42__.extend(dayjs_plugin_localizedFormat_js__WEBPACK_IMPORTED_MODULE_43__);\n    let n = dayjs__WEBPACK_IMPORTED_MODULE_42__.locale();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, {\n        ...s\n    }, e ? dayjs__WEBPACK_IMPORTED_MODULE_42__(e).locale(t || n).format(r) : \"\");\n}, \"DateField\");\n\nvar Fp = o(({ title: e, src: t, ...r })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(qt, {\n        value: t,\n        title: e,\n        ...r\n    }, e ?? t), \"FileField\");\n\n\nvar qt = o(({ children: e, value: t, ...r })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Link, {\n        href: t,\n        ...r\n    }, e ?? t), \"UrlField\");\n\n\nfunction kp() {\n    return !!(typeof Intl == \"object\" && Intl && typeof Intl.NumberFormat == \"function\");\n}\no(kp, \"toLocaleStringSupportsOptions\");\nvar Dp = o(({ value: e, locale: t, options: r, ...s })=>{\n    let n = Number(e);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, {\n        ...s\n    }, kp() ? n.toLocaleString(t, r) : n);\n}, \"NumberField\");\n\n\n\nvar Ip = o(({ value: e = \"\" })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_markdown__WEBPACK_IMPORTED_MODULE_44__, {\n        remarkPlugins: [\n            remark_gfm__WEBPACK_IMPORTED_MODULE_45__\n        ]\n    }, e), \"MarkdownField\");\n\n\n\n\n\nvar Op = o((e)=>{\n    let { setSelectedKeys: t, confirm: r, clearFilters: s, mapValue: n = o((y)=>y, \"mapValue\"), selectedKeys: i, children: a } = e, p = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), d = o(()=>{\n        s && s();\n    }, \"clearFilter\"), m = o(()=>{\n        let y;\n        typeof i == \"number\" ? y = `${i}` : dayjs__WEBPACK_IMPORTED_MODULE_42__.isDayjs(i) ? y = [\n            i.toISOString()\n        ] : y = i, t(y), r == null || r();\n    }, \"onFilter\"), c = o((y)=>{\n        if (typeof y == \"object\") {\n            if (Array.isArray(y)) {\n                let f = n(y, \"onChange\");\n                return t(f);\n            }\n            let b = !y || !y.target || dayjs__WEBPACK_IMPORTED_MODULE_42__.isDayjs(y) ? {\n                target: {\n                    value: y\n                }\n            } : y, { target: u } = b, x = n(u.value, \"onChange\");\n            t(x);\n            return;\n        }\n        let g = n(y, \"onChange\");\n        t(g);\n    }, \"onChange\"), l = react__WEBPACK_IMPORTED_MODULE_0__.Children.map(a, (y)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(y) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(y, {\n            onChange: c,\n            value: n(i, \"value\")\n        }) : y);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            padding: 10,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"flex-end\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            marginBottom: 15\n        }\n    }, l), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        type: \"primary\",\n        size: \"small\",\n        onClick: ()=>m()\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_FilterOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_46__[\"default\"], null), \" \", p(\"buttons.filter\", \"Filter\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        danger: !0,\n        size: \"small\",\n        onClick: ()=>d()\n    }, p(\"buttons.clear\", \"Clear\"))));\n}, \"FilterDropdown\");\n\n\n\n\n\nvar _p = o(()=>{\n    let [e, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), r = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { push: s } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useNavigation)(), n = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useGo)(), i = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), { resource: a, action: p } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        a && p && t(r(\"pages.error.info\", {\n            action: p,\n            resource: a == null ? void 0 : a.name\n        }, `You may have forgotten to add the \"${p}\" component to \"${a == null ? void 0 : a.name}\" resource.`));\n    }, [\n        a,\n        p\n    ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Result_Space_Tooltip_Typography_antd__WEBPACK_IMPORTED_MODULE_47__[\"default\"], {\n        status: \"404\",\n        title: \"404\",\n        extra: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n            direction: \"vertical\",\n            size: \"large\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, null, r(\"pages.error.404\", \"Sorry, the page you visited does not exist.\")), e && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Tooltip_antd__WEBPACK_IMPORTED_MODULE_41__[\"default\"], {\n            title: e\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_InfoCircleOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_48__[\"default\"], {}))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n            type: \"primary\",\n            onClick: ()=>{\n                i === \"legacy\" ? s(\"/\") : n({\n                    to: \"/\"\n                });\n            }\n        }, r(\"pages.error.backHome\", \"Back Home\")))\n    });\n}, \"ErrorComponent\");\n\n\n\n\nvar jo = {\n    background: \"radial-gradient(50% 50% at 50% 50%, #63386A 0%, #310438 100%)\",\n    backgroundSize: \"cover\"\n}, qo = {\n    maxWidth: \"408px\",\n    margin: \"auto\"\n}, Go = {\n    textAlign: \"center\",\n    color: \"#626262\",\n    fontSize: \"30px\",\n    letterSpacing: \"-0.04em\"\n}, Ko = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginBottom: \"28px\"\n};\nvar al = o(()=>{\n    let [e] = _barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].useForm(), t = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), r = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)(), { mutate: s, isLoading: n } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogin)({\n        v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy)\n    }), i = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Title, {\n        level: 3,\n        style: Go\n    }, t(\"pages.login.title\", \"Sign in your account\"));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        style: jo\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n        justify: \"center\",\n        align: \"middle\",\n        style: {\n            height: \"100vh\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_50__[\"default\"], {\n        xs: 22\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: qo\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: Ko\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", {\n        src: \"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\",\n        alt: \"Refine Logo\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Card_Space_Spin_antd__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        title: i,\n        headStyle: {\n            borderBottom: 0\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        layout: \"vertical\",\n        form: e,\n        onFinish: (a)=>{\n            s(a);\n        },\n        requiredMark: !1,\n        initialValues: {\n            remember: !1\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, {\n        name: \"username\",\n        label: t(\"pages.login.username\", \"Username\"),\n        rules: [\n            {\n                required: !0\n            }\n        ]\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        size: \"large\",\n        placeholder: t(\"pages.login.username\", \"Username\")\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, {\n        name: \"password\",\n        label: t(\"pages.login.password\", \"Password\"),\n        rules: [\n            {\n                required: !0\n            }\n        ],\n        style: {\n            marginBottom: \"12px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        size: \"large\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            marginBottom: \"12px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, {\n        name: \"remember\",\n        valuePropName: \"checked\",\n        noStyle: !0\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_52__[\"default\"], {\n        style: {\n            fontSize: \"12px\"\n        }\n    }, t(\"pages.login.remember\", \"Remember me\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        style: {\n            float: \"right\",\n            fontSize: \"12px\"\n        },\n        href: \"#\"\n    }, t(\"pages.login.forgotPassword\", \"Forgot password?\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        type: \"primary\",\n        size: \"large\",\n        htmlType: \"submit\",\n        loading: n,\n        block: !0\n    }, t(\"pages.login.signin\", \"Sign in\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            marginTop: 8\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, {\n        style: {\n            fontSize: 12\n        }\n    }, t(\"pages.login.noAccount\", \"Don’t have an account?\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"#\",\n        style: {\n            fontWeight: \"bold\"\n        }\n    }, t(\"pages.login.signup\", \"Sign up\")))))))));\n}, \"LoginPage\");\n\n\n\nvar Ae = {\n    root: {\n        height: \"100vh\",\n        backgroundImage: \"url('https://refine.ams3.cdn.digitaloceanspaces.com/login-background/background.png')\",\n        backgroundSize: \"cover\",\n        backgroundColor: \"#331049\"\n    },\n    title: {\n        color: \"white\",\n        fontWeight: 800,\n        fontSize: \"64px\",\n        marginBottom: \"8px\"\n    },\n    p1: {\n        color: \"white\",\n        marginBottom: 0,\n        fontSize: \"20px\",\n        fontWeight: \"bold\"\n    },\n    p2: {\n        color: \"white\",\n        fontSize: \"20px\"\n    },\n    code: {\n        backgroundColor: \"white\",\n        color: \"#331049\"\n    }\n}, yl = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n        align: \"middle\",\n        justify: \"center\",\n        style: Ae.root\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_50__[\"default\"], {\n        style: {\n            textAlign: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", {\n        style: {\n            marginBottom: \"48px\"\n        },\n        src: \"https://refine.ams3.cdn.digitaloceanspaces.com/logo/refine.svg\",\n        alt: \"Refine Logo\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Title, {\n        style: Ae.title\n    }, \"Welcome on board\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", {\n        style: Ae.p1\n    }, \"Your configuration is completed.\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", {\n        style: Ae.p2\n    }, \"Now you can get started by adding your resources to the\", \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", {\n        style: Ae.code\n    }, \"resources\"), \" property of\", \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", {\n        style: Ae.code\n    }, \"<Refine>\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_18__[\"default\"], {\n        size: \"large\",\n        wrap: !0,\n        style: {\n            marginTop: \"70px\",\n            justifyContent: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://refine.dev\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        size: \"large\",\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_FolderOutlined_ReadOutlined_TeamOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_53__[\"default\"], null)\n    }, \"Documentation\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://refine.dev/examples\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        size: \"large\",\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_FolderOutlined_ReadOutlined_TeamOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_54__[\"default\"], null)\n    }, \"Examples\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://discord.gg/refine\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        size: \"large\",\n        icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_FolderOutlined_ReadOutlined_TeamOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_55__[\"default\"], null)\n    }, \"Community\"))))), \"ReadyPage\");\n\n\nvar gl = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.WelcomePage, null), \"WelcomePage\");\n\n\n\n\n\nvar De = {}, Ee = {\n    maxWidth: \"400px\",\n    margin: \"auto\",\n    padding: \"32px\",\n    boxShadow: \"0px 2px 4px rgba(0, 0, 0, 0.02), 0px 1px 6px -1px rgba(0, 0, 0, 0.02), 0px 1px 2px rgba(0, 0, 0, 0.03)\"\n}, we = {\n    borderBottom: 0,\n    padding: 0\n}, Re = {\n    padding: 0,\n    marginTop: \"32px\"\n}, Ie = {\n    textAlign: \"center\",\n    marginBottom: 0,\n    fontSize: \"24px\",\n    lineHeight: \"32px\",\n    fontWeight: 700,\n    overflowWrap: \"break-word\",\n    hyphens: \"manual\",\n    textOverflow: \"unset\",\n    whiteSpace: \"pre-wrap\"\n};\nvar $t = o(({ providers: e, registerLink: t, forgotPasswordLink: r, rememberMe: s, contentProps: n, wrapperProps: i, renderContent: a, formProps: p, title: d, hideForm: m, mutationVariables: c })=>{\n    let { token: l } = _barrel_optimize_names_Button_Drawer_Grid_Layout_Menu_theme_antd__WEBPACK_IMPORTED_MODULE_21__[\"default\"].useToken(), [y] = _barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].useForm(), g = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), b = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), u = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)(), { Link: x } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)(), f = b === \"legacy\" ? x : u, S = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)(), { mutate: F, isLoading: P } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLogin)({\n        v3LegacyAuthProviderCompatible: !!(S != null && S.isLegacy)\n    }), C = d === !1 ? null : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, d ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(be, {\n        collapsed: !1\n    })), B = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Title, {\n        level: 3,\n        style: {\n            color: l.colorPrimaryTextHover,\n            ...Ie\n        }\n    }, g(\"pages.login.title\", \"Sign in to your account\")), k = o(()=>e && e.length > 0 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, e.map((D)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                key: D.name,\n                type: \"default\",\n                block: !0,\n                icon: D.icon,\n                style: {\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    width: \"100%\",\n                    marginBottom: \"8px\"\n                },\n                onClick: ()=>F({\n                        ...c,\n                        providerName: D.name\n                    })\n            }, D.label)), !m && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Divider_Form_Input_Layout_Row_Typography_theme_antd__WEBPACK_IMPORTED_MODULE_56__[\"default\"], null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, {\n            style: {\n                color: l.colorTextLabel\n            }\n        }, g(\"pages.login.divider\", \"or\")))) : null, \"renderProviders\"), v = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Card_Space_Spin_antd__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        title: B,\n        headStyle: we,\n        bodyStyle: Re,\n        style: {\n            ...Ee,\n            backgroundColor: l.colorBgElevated\n        },\n        ...n ?? {}\n    }, k(), !m && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        layout: \"vertical\",\n        form: y,\n        onFinish: (D)=>F({\n                ...D,\n                ...c\n            }),\n        requiredMark: !1,\n        initialValues: {\n            remember: !1\n        },\n        ...p\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, {\n        name: \"email\",\n        label: g(\"pages.login.fields.email\", \"Email\"),\n        rules: [\n            {\n                required: !0,\n                message: g(\"pages.login.errors.requiredEmail\", \"Email is required\")\n            },\n            {\n                type: \"email\",\n                message: g(\"pages.login.errors.validEmail\", \"Invalid email address\")\n            }\n        ]\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        size: \"large\",\n        placeholder: g(\"pages.login.fields.email\", \"Email\")\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, {\n        name: \"password\",\n        label: g(\"pages.login.fields.password\", \"Password\"),\n        rules: [\n            {\n                required: !0,\n                message: g(\"pages.login.errors.requiredPassword\", \"Password is required\")\n            }\n        ]\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        type: \"password\",\n        autoComplete: \"current-password\",\n        placeholder: \"●●●●●●●●\",\n        size: \"large\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            marginBottom: \"24px\"\n        }\n    }, s ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, {\n        name: \"remember\",\n        valuePropName: \"checked\",\n        noStyle: !0\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_52__[\"default\"], {\n        style: {\n            fontSize: \"12px\"\n        }\n    }, g(\"pages.login.buttons.rememberMe\", \"Remember me\"))), r ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(f, {\n        style: {\n            color: l.colorPrimaryTextHover,\n            fontSize: \"12px\",\n            marginLeft: \"auto\"\n        },\n        to: \"/forgot-password\"\n    }, g(\"pages.login.buttons.forgotPassword\", \"Forgot password?\"))), !m && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        type: \"primary\",\n        size: \"large\",\n        htmlType: \"submit\",\n        loading: P,\n        block: !0\n    }, g(\"pages.login.signin\", \"Sign in\")))), t ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            marginTop: m ? 16 : 8\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, {\n        style: {\n            fontSize: 12\n        }\n    }, g(\"pages.login.buttons.noAccount\", \"Don’t have an account?\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(f, {\n        to: \"/register\",\n        style: {\n            fontWeight: \"bold\",\n            color: l.colorPrimaryTextHover\n        }\n    }, g(\"pages.login.signup\", \"Sign up\")))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        style: De,\n        ...i ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n        justify: \"center\",\n        align: m ? \"top\" : \"middle\",\n        style: {\n            padding: \"16px 0\",\n            minHeight: \"100dvh\",\n            paddingTop: m ? \"15dvh\" : \"16px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_50__[\"default\"], {\n        xs: 22\n    }, a ? a(v, C) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, C, v))));\n}, \"LoginPage\");\n\n\n\n\nvar Yt = o(({ providers: e, loginLink: t, wrapperProps: r, contentProps: s, renderContent: n, formProps: i, title: a, hideForm: p, mutationVariables: d })=>{\n    let { token: m } = _barrel_optimize_names_Button_Drawer_Grid_Layout_Menu_theme_antd__WEBPACK_IMPORTED_MODULE_21__[\"default\"].useToken(), [c] = _barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].useForm(), l = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), y = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), g = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)(), { Link: b } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)(), u = y === \"legacy\" ? b : g, x = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)(), { mutate: f, isLoading: S } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRegister)({\n        v3LegacyAuthProviderCompatible: !!(x != null && x.isLegacy)\n    }), F = a === !1 ? null : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, a ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(be, {\n        collapsed: !1\n    })), P = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Title, {\n        level: 3,\n        style: {\n            color: m.colorPrimaryTextHover,\n            ...Ie\n        }\n    }, l(\"pages.register.title\", \"Sign up for your account\")), C = o(()=>e && e.length > 0 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, e.map((k)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n                key: k.name,\n                type: \"default\",\n                block: !0,\n                icon: k.icon,\n                style: {\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    width: \"100%\",\n                    marginBottom: \"8px\"\n                },\n                onClick: ()=>f({\n                        ...d,\n                        providerName: k.name\n                    })\n            }, k.label)), !p && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Divider_Form_Input_Layout_Row_Typography_theme_antd__WEBPACK_IMPORTED_MODULE_56__[\"default\"], null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, {\n            style: {\n                color: m.colorTextLabel\n            }\n        }, l(\"pages.register.divider\", l(\"pages.login.divider\", \"or\"))))) : null, \"renderProviders\"), B = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Card_Space_Spin_antd__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        title: P,\n        headStyle: we,\n        bodyStyle: Re,\n        style: {\n            ...Ee,\n            backgroundColor: m.colorBgElevated\n        },\n        ...s ?? {}\n    }, C(), !p && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        layout: \"vertical\",\n        form: c,\n        onFinish: (k)=>f({\n                ...d,\n                ...k\n            }),\n        requiredMark: !1,\n        ...i\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, {\n        name: \"email\",\n        label: l(\"pages.register.email\", \"Email\"),\n        rules: [\n            {\n                required: !0,\n                message: l(\"pages.register.errors.requiredEmail\", \"Email is required\")\n            },\n            {\n                type: \"email\",\n                message: l(\"pages.register.errors.validEmail\", \"Invalid email address\")\n            }\n        ]\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        size: \"large\",\n        placeholder: l(\"pages.register.fields.email\", \"Email\")\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, {\n        name: \"password\",\n        label: l(\"pages.register.fields.password\", \"Password\"),\n        rules: [\n            {\n                required: !0,\n                message: l(\"pages.register.errors.requiredPassword\", \"Password is required\")\n            }\n        ]\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        size: \"large\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            marginBottom: \"24px\"\n        }\n    }, t ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, {\n        style: {\n            fontSize: 12,\n            marginLeft: \"auto\"\n        }\n    }, l(\"pages.register.buttons.haveAccount\", l(\"pages.login.buttons.haveAccount\", \"Have an account?\")), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(u, {\n        style: {\n            fontWeight: \"bold\",\n            color: m.colorPrimaryTextHover\n        },\n        to: \"/login\"\n    }, l(\"pages.register.signin\", l(\"pages.login.signin\", \"Sign in\"))))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, {\n        style: {\n            marginBottom: 0\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        type: \"primary\",\n        size: \"large\",\n        htmlType: \"submit\",\n        loading: S,\n        block: !0\n    }, l(\"pages.register.buttons.submit\", \"Sign up\")))), p && t !== !1 && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            marginTop: p ? 16 : 8\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, {\n        style: {\n            fontSize: 12\n        }\n    }, l(\"pages.register.buttons.haveAccount\", l(\"pages.login.buttons.haveAccount\", \"Have an account?\")), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(u, {\n        style: {\n            fontWeight: \"bold\",\n            color: m.colorPrimaryTextHover\n        },\n        to: \"/login\"\n    }, l(\"pages.register.signin\", l(\"pages.login.signin\", \"Sign in\"))))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        style: De,\n        ...r ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n        justify: \"center\",\n        align: p ? \"top\" : \"middle\",\n        style: {\n            padding: \"16px 0\",\n            minHeight: \"100dvh\",\n            paddingTop: p ? \"15dvh\" : \"16px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_50__[\"default\"], {\n        xs: 22\n    }, n ? n(B, F) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, F, B))));\n}, \"RegisterPage\");\n\n\n\n\nvar _t = o(({ loginLink: e, wrapperProps: t, contentProps: r, renderContent: s, formProps: n, title: i, mutationVariables: a })=>{\n    let { token: p } = _barrel_optimize_names_Button_Drawer_Grid_Layout_Menu_theme_antd__WEBPACK_IMPORTED_MODULE_21__[\"default\"].useToken(), [d] = _barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].useForm(), m = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), c = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), l = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)(), { Link: y } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)(), g = c === \"legacy\" ? y : l, { mutate: b, isLoading: u } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useForgotPassword)(), x = i === !1 ? null : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, i ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(be, {\n        collapsed: !1\n    })), f = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Title, {\n        level: 3,\n        style: {\n            color: p.colorPrimaryTextHover,\n            ...Ie\n        }\n    }, m(\"pages.forgotPassword.title\", \"Forgot your password?\")), S = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Card_Space_Spin_antd__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        title: f,\n        headStyle: we,\n        bodyStyle: Re,\n        style: {\n            ...Ee,\n            backgroundColor: p.colorBgElevated\n        },\n        ...r ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        layout: \"vertical\",\n        form: d,\n        onFinish: (F)=>b({\n                ...F,\n                ...a\n            }),\n        requiredMark: !1,\n        ...n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, {\n        name: \"email\",\n        label: m(\"pages.forgotPassword.fields.email\", \"Email\"),\n        rules: [\n            {\n                required: !0,\n                message: m(\"pages.forgotPassword.errors.requiredEmail\", \"Email is required\")\n            },\n            {\n                type: \"email\",\n                message: m(\"pages.forgotPassword.errors.validEmail\", \"Invalid email address\")\n            }\n        ]\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        type: \"email\",\n        size: \"large\",\n        placeholder: m(\"pages.forgotPassword.fields.email\", \"Email\")\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"space-between\"\n        }\n    }, e ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, {\n        style: {\n            fontSize: 12,\n            marginLeft: \"auto\"\n        }\n    }, m(\"pages.forgotPassword.buttons.haveAccount\", m(\"pages.register.buttons.haveAccount\", \"Have an account? \")), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(g, {\n        style: {\n            fontWeight: \"bold\",\n            color: p.colorPrimaryTextHover\n        },\n        to: \"/login\"\n    }, m(\"pages.forgotPassword.signin\", m(\"pages.login.signin\", \"Sign in\"))))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, {\n        style: {\n            marginTop: \"24px\",\n            marginBottom: 0\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        type: \"primary\",\n        size: \"large\",\n        htmlType: \"submit\",\n        loading: u,\n        block: !0\n    }, m(\"pages.forgotPassword.buttons.submit\", \"Send reset instructions\")))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        style: De,\n        ...t ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n        justify: \"center\",\n        align: \"middle\",\n        style: {\n            padding: \"16px 0\",\n            minHeight: \"100dvh\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_50__[\"default\"], {\n        xs: 22\n    }, s ? s(S, x) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, x, S))));\n}, \"ForgotPasswordPage\");\n\n\n\n\nvar Zt = o(({ wrapperProps: e, contentProps: t, renderContent: r, formProps: s, title: n, mutationVariables: i })=>{\n    let { token: a } = _barrel_optimize_names_Button_Drawer_Grid_Layout_Menu_theme_antd__WEBPACK_IMPORTED_MODULE_21__[\"default\"].useToken(), [p] = _barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].useForm(), d = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), m = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useActiveAuthProvider)(), { mutate: c, isLoading: l } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useUpdatePassword)({\n        v3LegacyAuthProviderCompatible: !!(m != null && m.isLegacy)\n    }), y = n === !1 ? null : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginBottom: \"32px\",\n            fontSize: \"20px\"\n        }\n    }, n ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(be, {\n        collapsed: !1\n    })), g = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Title, {\n        level: 3,\n        style: {\n            color: a.colorPrimaryTextHover,\n            ...Ie\n        }\n    }, d(\"pages.updatePassword.title\", \"Set New Password\")), b = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Card_Space_Spin_antd__WEBPACK_IMPORTED_MODULE_36__[\"default\"], {\n        title: g,\n        headStyle: we,\n        bodyStyle: Re,\n        style: {\n            ...Ee,\n            backgroundColor: a.colorBgElevated\n        },\n        ...t ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        layout: \"vertical\",\n        form: p,\n        onFinish: (u)=>c({\n                ...u,\n                ...i\n            }),\n        requiredMark: !1,\n        ...s\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, {\n        name: \"password\",\n        label: d(\"pages.updatePassword.fields.password\", \"New Password\"),\n        rules: [\n            {\n                required: !0,\n                message: d(\"pages.updatePassword.errors.requiredPassword\", \"Password is required\")\n            }\n        ],\n        style: {\n            marginBottom: \"12px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        size: \"large\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, {\n        name: \"confirmPassword\",\n        label: d(\"pages.updatePassword.fields.confirmPassword\", \"Confirm New Password\"),\n        hasFeedback: !0,\n        dependencies: [\n            \"password\"\n        ],\n        rules: [\n            {\n                required: !0,\n                message: d(\"pages.updatePassword.errors.requiredConfirmPassword\", \"Confirm password is required\")\n            },\n            ({ getFieldValue: u })=>({\n                    validator (x, f) {\n                        return !f || u(\"password\") === f ? Promise.resolve() : Promise.reject(new Error(d(\"pages.updatePassword.errors.confirmPasswordNotMatch\", \"Passwords do not match\")));\n                    }\n                })\n        ]\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_51__[\"default\"], {\n        type: \"password\",\n        placeholder: \"●●●●●●●●\",\n        size: \"large\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Form_antd__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Item, {\n        style: {\n            marginBottom: 0\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n        type: \"primary\",\n        size: \"large\",\n        htmlType: \"submit\",\n        loading: l,\n        block: !0\n    }, d(\"pages.updatePassword.buttons.submit\", \"Update\")))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_15__[\"default\"], {\n        style: De,\n        ...e ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_49__[\"default\"], {\n        justify: \"center\",\n        align: \"middle\",\n        style: {\n            padding: \"16px 0\",\n            minHeight: \"100dvh\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Card_Checkbox_Col_Form_Input_Layout_Row_Typography_antd__WEBPACK_IMPORTED_MODULE_50__[\"default\"], {\n        xs: 22\n    }, r ? r(b, y) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, y, b))));\n}, \"UpdatePasswordPage\");\nvar ud = o((e)=>{\n    let { type: t } = e;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, o(()=>{\n        switch(t){\n            case \"register\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Yt, {\n                    ...e\n                });\n            case \"forgotPassword\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_t, {\n                    ...e\n                });\n            case \"updatePassword\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Zt, {\n                    ...e\n                });\n            default:\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($t, {\n                    ...e\n                });\n        }\n    }, \"renderView\")());\n}, \"AuthPage\");\n\n\n\n\nvar Le = o(({ breadcrumbProps: e, showHome: t = !0, hideIcons: r = !1, meta: s, minItems: n = 2 })=>{\n    let i = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterType)(), { breadcrumbs: a } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useBreadcrumb)({\n        meta: s\n    }), p = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useLink)(), { Link: d } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRouterContext)(), { hasDashboard: m } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useRefineContext)(), { resources: c } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useResource)(), l = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.matchResourceFromRoute)(\"/\", c), y = i === \"legacy\" ? d : p;\n    if (a.length < n) return null;\n    let g = a.map(({ label: u, icon: x, href: f })=>({\n            key: `breadcrumb-item-${u}`,\n            title: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    gap: 4\n                }\n            }, !r && x, f ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(y, {\n                to: f\n            }, u) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, u))\n        }));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Breadcrumb_antd__WEBPACK_IMPORTED_MODULE_57__[\"default\"], {\n        items: o(()=>{\n            var u, x;\n            return t && (m || l.found) ? [\n                {\n                    key: \"breadcrumb-item-home\",\n                    title: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(y, {\n                        to: \"/\"\n                    }, ((x = (u = l == null ? void 0 : l.resource) == null ? void 0 : u.meta) == null ? void 0 : x.icon) ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_HomeOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_58__[\"default\"], null))\n                },\n                ...g\n            ] : g;\n        }, \"getBreadcrumbItems\")(),\n        ...e\n    });\n}, \"Breadcrumb\");\n\n\n\n\n\nvar ke = o(({ children: e, ...t })=>{\n    var p;\n    let r = (p = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_barrel_optimize_names_Button_ConfigProvider_Drawer_Grid_Layout_Menu_antd__WEBPACK_IMPORTED_MODULE_17__[\"default\"].ConfigContext)) == null ? void 0 : p.direction, s = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Button_Progress_antd__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n            type: \"text\",\n            icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(r === \"rtl\" ? _barrel_optimize_names_ArrowLeftOutlined_ArrowRightOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_59__[\"default\"] : _barrel_optimize_names_ArrowLeftOutlined_ArrowRightOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_60__[\"default\"], null)\n        }), \"renderBackButton\"), n = typeof t.backIcon > \"u\" ? s() : t.backIcon, i = typeof t.title == \"string\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Title, {\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_24__.RefinePageHeaderClassNames.Title,\n        level: 4,\n        style: {\n            marginBottom: 0\n        }\n    }, t.title) : t.title, a = typeof t.title == \"string\" ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Title, {\n        className: _refinedev_ui_types__WEBPACK_IMPORTED_MODULE_24__.RefinePageHeaderClassNames.SubTitle,\n        level: 5,\n        type: \"secondary\",\n        style: {\n            marginBottom: 0\n        }\n    }, t.subTitle) : t.subTitle;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ant_design_pro_layout__WEBPACK_IMPORTED_MODULE_61__.PageHeader, {\n        ...t,\n        backIcon: n,\n        title: i,\n        subTitle: a,\n        style: {\n            padding: 0,\n            ...t.style\n        }\n    }, e);\n}, \"PageHeader\");\n\n\n\n\nvar Mo = o(({ status: e, elements: { success: t = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ut, {\n    translationKey: \"autoSave.success\",\n    defaultMessage: \"saved\",\n    icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_CheckCircleOutlined_EllipsisOutlined_ExclamationCircleOutlined_SyncOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_62__[\"default\"], null)\n}), error: r = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ut, {\n    translationKey: \"autoSave.error\",\n    defaultMessage: \"auto save failure\",\n    icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_CheckCircleOutlined_EllipsisOutlined_ExclamationCircleOutlined_SyncOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_63__[\"default\"], null)\n}), loading: s = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ut, {\n    translationKey: \"autoSave.loading\",\n    defaultMessage: \"saving...\",\n    icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_CheckCircleOutlined_EllipsisOutlined_ExclamationCircleOutlined_SyncOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_64__[\"default\"], null)\n}), idle: n = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ut, {\n    translationKey: \"autoSave.idle\",\n    defaultMessage: \"waiting for changes\",\n    icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_CheckCircleOutlined_EllipsisOutlined_ExclamationCircleOutlined_SyncOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_65__[\"default\"], null)\n}) } = {} })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.AutoSaveIndicator, {\n        status: e,\n        elements: {\n            success: t,\n            error: r,\n            loading: s,\n            idle: n\n        }\n    }), \"AutoSaveIndicator\"), ut = o(({ translationKey: e, defaultMessage: t, icon: r })=>{\n    let s = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_2__.useTranslate)(), { token: n } = _barrel_optimize_names_Button_Drawer_Grid_Layout_Menu_theme_antd__WEBPACK_IMPORTED_MODULE_21__[\"default\"].useToken();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_barrel_optimize_names_Avatar_Layout_Space_Typography_antd__WEBPACK_IMPORTED_MODULE_19__[\"default\"].Text, {\n        style: {\n            marginRight: 5,\n            color: n.colorTextTertiary,\n            fontSize: \".8rem\"\n        }\n    }, s(e, t), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            marginLeft: \".2rem\"\n        }\n    }, r));\n}, \"Message\");\n\nvar Ud = o((e, t)=>e && (t === \"value\" ? e.map((r)=>typeof r == \"string\" ? dayjs__WEBPACK_IMPORTED_MODULE_42__(r) : r) : t === \"onChange\" && e.every(dayjs__WEBPACK_IMPORTED_MODULE_42__.isDayjs) ? e.map((r)=>dayjs__WEBPACK_IMPORTED_MODULE_42__(r).toISOString()) : e), \"rangePickerFilterMapper\");\nvar Hd = o((e)=>{\n    let { fileList: t } = e;\n    return [\n        ...t\n    ];\n}, \"getValueFromEvent\");\nvar uh = {\n    Blue: {\n        token: {\n            colorPrimary: \"#1677FF\"\n        }\n    },\n    Purple: {\n        token: {\n            colorPrimary: \"#722ED1\"\n        }\n    },\n    Magenta: {\n        token: {\n            colorPrimary: \"#EB2F96\"\n        }\n    },\n    Red: {\n        token: {\n            colorPrimary: \"#F5222D\"\n        }\n    },\n    Orange: {\n        token: {\n            colorPrimary: \"#FA541C\"\n        }\n    },\n    Yellow: {\n        token: {\n            colorPrimary: \"#FAAD14\"\n        }\n    },\n    Green: {\n        token: {\n            colorPrimary: \"#52C41A\"\n        }\n    }\n};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/antd/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/core/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@refinedev/core/dist/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessControlContext: () => (/* binding */ ct),\n/* harmony export */   ActionTypes: () => (/* binding */ Os),\n/* harmony export */   AuthPage: () => (/* binding */ ac),\n/* harmony export */   Authenticated: () => (/* binding */ Ec),\n/* harmony export */   AutoSaveIndicator: () => (/* binding */ Vc),\n/* harmony export */   CanAccess: () => (/* binding */ Sc),\n/* harmony export */   ErrorComponent: () => (/* binding */ sc),\n/* harmony export */   GitHubBanner: () => (/* binding */ Fc),\n/* harmony export */   I18nContext: () => (/* binding */ Xe),\n/* harmony export */   KeyBuilder: () => (/* binding */ wt),\n/* harmony export */   LayoutWrapper: () => (/* binding */ Dc),\n/* harmony export */   Link: () => (/* binding */ Io),\n/* harmony export */   LoginPage: () => (/* binding */ Yr),\n/* harmony export */   MetaContextProvider: () => (/* binding */ Zu),\n/* harmony export */   ReadyPage: () => (/* binding */ Qo),\n/* harmony export */   Refine: () => (/* binding */ Rc),\n/* harmony export */   ResourceContext: () => (/* binding */ Rt),\n/* harmony export */   RouteChangeHandler: () => (/* binding */ Vo),\n/* harmony export */   TranslationContext: () => (/* binding */ Xe),\n/* harmony export */   UndoableQueue: () => (/* binding */ un),\n/* harmony export */   WelcomePage: () => (/* binding */ mc),\n/* harmony export */   createTreeView: () => (/* binding */ is),\n/* harmony export */   file2Base64: () => (/* binding */ Da),\n/* harmony export */   flattenObjectKeys: () => (/* binding */ Cr),\n/* harmony export */   generateDefaultDocumentTitle: () => (/* binding */ ls),\n/* harmony export */   getDefaultFilter: () => (/* binding */ va),\n/* harmony export */   getDefaultSortOrder: () => (/* binding */ ba),\n/* harmony export */   getNextPageParam: () => (/* binding */ Tr),\n/* harmony export */   getPreviousPageParam: () => (/* binding */ xr),\n/* harmony export */   handleUseParams: () => (/* binding */ es),\n/* harmony export */   importCSVMapper: () => (/* binding */ sr),\n/* harmony export */   keys: () => (/* binding */ nt),\n/* harmony export */   legacyResourceTransform: () => (/* binding */ hr),\n/* harmony export */   matchResourceFromRoute: () => (/* binding */ as),\n/* harmony export */   parseTableParams: () => (/* binding */ vr),\n/* harmony export */   parseTableParamsFromQuery: () => (/* binding */ Ca),\n/* harmony export */   pickDataProvider: () => (/* binding */ ee),\n/* harmony export */   pickNotDeprecated: () => (/* binding */ I),\n/* harmony export */   propertyPathToArray: () => (/* binding */ Ts),\n/* harmony export */   queryKeys: () => (/* binding */ ts),\n/* harmony export */   routeGenerator: () => (/* binding */ yr),\n/* harmony export */   setInitialFilters: () => (/* binding */ Er),\n/* harmony export */   setInitialSorters: () => (/* binding */ Lr),\n/* harmony export */   stringifyTableParams: () => (/* binding */ Dr),\n/* harmony export */   unionFilters: () => (/* binding */ St),\n/* harmony export */   unionSorters: () => (/* binding */ Ur),\n/* harmony export */   useActiveAuthProvider: () => (/* binding */ ie),\n/* harmony export */   useApiUrl: () => (/* binding */ li),\n/* harmony export */   useAuthenticated: () => (/* binding */ Va),\n/* harmony export */   useBack: () => (/* binding */ Mo),\n/* harmony export */   useBreadcrumb: () => (/* binding */ fb),\n/* harmony export */   useCan: () => (/* binding */ Ar),\n/* harmony export */   useCanWithoutCache: () => (/* binding */ cC),\n/* harmony export */   useCancelNotification: () => (/* binding */ ut),\n/* harmony export */   useCheckError: () => (/* binding */ Na),\n/* harmony export */   useCloneButton: () => (/* binding */ Jv),\n/* harmony export */   useCreate: () => (/* binding */ Xt),\n/* harmony export */   useCreateButton: () => (/* binding */ qv),\n/* harmony export */   useCreateMany: () => (/* binding */ bo),\n/* harmony export */   useCustom: () => (/* binding */ yi),\n/* harmony export */   useCustomMutation: () => (/* binding */ xi),\n/* harmony export */   useDataProvider: () => (/* binding */ le),\n/* harmony export */   useDelete: () => (/* binding */ Po),\n/* harmony export */   useDeleteButton: () => (/* binding */ qu),\n/* harmony export */   useDeleteMany: () => (/* binding */ di),\n/* harmony export */   useEditButton: () => (/* binding */ Yv),\n/* harmony export */   useExport: () => (/* binding */ fP),\n/* harmony export */   useExportButton: () => (/* binding */ rD),\n/* harmony export */   useForgotPassword: () => (/* binding */ lo),\n/* harmony export */   useForm: () => (/* binding */ RP),\n/* harmony export */   useGetIdentity: () => (/* binding */ no),\n/* harmony export */   useGetLocale: () => (/* binding */ Lo),\n/* harmony export */   useGetToPath: () => (/* binding */ Ut),\n/* harmony export */   useGo: () => (/* binding */ Pe),\n/* harmony export */   useHandleNotification: () => (/* binding */ Ce),\n/* harmony export */   useImport: () => (/* binding */ mR),\n/* harmony export */   useImportButton: () => (/* binding */ oD),\n/* harmony export */   useInfiniteList: () => (/* binding */ bi),\n/* harmony export */   useInvalidate: () => (/* binding */ ke),\n/* harmony export */   useInvalidateAuthStore: () => (/* binding */ Dt),\n/* harmony export */   useIsAuthenticated: () => (/* binding */ wr),\n/* harmony export */   useIsExistAuthentication: () => (/* binding */ yo),\n/* harmony export */   useKeys: () => (/* binding */ Z),\n/* harmony export */   useLink: () => (/* binding */ yt),\n/* harmony export */   useList: () => (/* binding */ $t),\n/* harmony export */   useListButton: () => (/* binding */ eD),\n/* harmony export */   useLiveMode: () => (/* binding */ sn),\n/* harmony export */   useLoadingOvertime: () => (/* binding */ fe),\n/* harmony export */   useLog: () => (/* binding */ Je),\n/* harmony export */   useLogList: () => (/* binding */ eb),\n/* harmony export */   useLogin: () => (/* binding */ Ht),\n/* harmony export */   useLogout: () => (/* binding */ Mr),\n/* harmony export */   useMany: () => (/* binding */ go),\n/* harmony export */   useMenu: () => (/* binding */ zu),\n/* harmony export */   useMeta: () => (/* binding */ ue),\n/* harmony export */   useMetaContext: () => (/* binding */ Br),\n/* harmony export */   useModal: () => (/* binding */ TR),\n/* harmony export */   useMutationMode: () => (/* binding */ _e),\n/* harmony export */   useNavigation: () => (/* binding */ he),\n/* harmony export */   useNotification: () => (/* binding */ He),\n/* harmony export */   useOnError: () => (/* binding */ Re),\n/* harmony export */   useOne: () => (/* binding */ zt),\n/* harmony export */   useParse: () => (/* binding */ vo),\n/* harmony export */   useParsed: () => (/* binding */ Te),\n/* harmony export */   usePermissions: () => (/* binding */ Ua),\n/* harmony export */   usePublish: () => (/* binding */ Ye),\n/* harmony export */   useRedirectionAfterSubmission: () => (/* binding */ fn),\n/* harmony export */   useRefineContext: () => (/* binding */ ge),\n/* harmony export */   useRefineOptions: () => (/* binding */ kt),\n/* harmony export */   useRefreshButton: () => (/* binding */ tc),\n/* harmony export */   useRegister: () => (/* binding */ co),\n/* harmony export */   useResource: () => (/* binding */ q),\n/* harmony export */   useResourceParams: () => (/* binding */ qe),\n/* harmony export */   useResourceSubscription: () => (/* binding */ Pt),\n/* harmony export */   useResourceWithRoute: () => (/* binding */ rn),\n/* harmony export */   useRouterContext: () => (/* binding */ pe),\n/* harmony export */   useRouterType: () => (/* binding */ oe),\n/* harmony export */   useSaveButton: () => (/* binding */ tD),\n/* harmony export */   useSelect: () => (/* binding */ PC),\n/* harmony export */   useSetLocale: () => (/* binding */ Eo),\n/* harmony export */   useShow: () => (/* binding */ nR),\n/* harmony export */   useShowButton: () => (/* binding */ Zv),\n/* harmony export */   useSubscription: () => (/* binding */ ph),\n/* harmony export */   useSyncWithLocation: () => (/* binding */ to),\n/* harmony export */   useTable: () => (/* binding */ IC),\n/* harmony export */   useTitle: () => (/* binding */ Ta),\n/* harmony export */   useToPath: () => (/* binding */ Du),\n/* harmony export */   useTranslate: () => (/* binding */ z),\n/* harmony export */   useTranslation: () => (/* binding */ tP),\n/* harmony export */   useUpdate: () => (/* binding */ To),\n/* harmony export */   useUpdateMany: () => (/* binding */ ii),\n/* harmony export */   useUpdatePassword: () => (/* binding */ fo),\n/* harmony export */   useUserFriendlyName: () => (/* binding */ ht),\n/* harmony export */   useWarnAboutChange: () => (/* binding */ vt),\n/* harmony export */   userFriendlyResourceName: () => (/* binding */ nr)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @refinedev/devtools-internal */ \"(ssr)/./node_modules/@refinedev/devtools-internal/dist/index.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useQuery.mjs\");\n/* harmony import */ var lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash-es/differenceWith.js */ \"(ssr)/./node_modules/lodash-es/differenceWith.js\");\n/* harmony import */ var lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash-es/unionWith.js */ \"(ssr)/./node_modules/lodash-es/unionWith.js\");\n/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! qs */ \"(ssr)/./node_modules/qs/lib/index.js\");\n/* harmony import */ var warn_once__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! warn-once */ \"(ssr)/./node_modules/warn-once/index.js\");\n/* harmony import */ var lodash_es_fromPairs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash-es/fromPairs.js */ \"(ssr)/./node_modules/lodash-es/fromPairs.js\");\n/* harmony import */ var lodash_es_zip_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash-es/zip.js */ \"(ssr)/./node_modules/lodash-es/zip.js\");\n/* harmony import */ var pluralize__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! pluralize */ \"(ssr)/./node_modules/pluralize/pluralize.js\");\n/* harmony import */ var lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash-es/debounce.js */ \"(ssr)/./node_modules/lodash-es/debounce.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useMutation.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useInfiniteQuery.mjs\");\n/* harmony import */ var lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash-es/isEqual.js */ \"(ssr)/./node_modules/lodash-es/isEqual.js\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! papaparse */ \"(ssr)/./node_modules/papaparse/papaparse.js\");\n/* harmony import */ var lodash_es_chunk_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lodash-es/chunk.js */ \"(ssr)/./node_modules/lodash-es/chunk.js\");\n/* harmony import */ var lodash_es_get_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! lodash-es/get.js */ \"(ssr)/./node_modules/lodash-es/get.js\");\n/* harmony import */ var lodash_es_uniqBy_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! lodash-es/uniqBy.js */ \"(ssr)/./node_modules/lodash-es/uniqBy.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/queryClient.mjs\");\n/* __next_internal_client_entry_do_not_use__ AccessControlContext,ActionTypes,AuthPage,Authenticated,AutoSaveIndicator,CanAccess,ErrorComponent,GitHubBanner,I18nContext,KeyBuilder,LayoutWrapper,Link,LoginPage,MetaContextProvider,ReadyPage,Refine,ResourceContext,RouteChangeHandler,TranslationContext,UndoableQueue,WelcomePage,createTreeView,file2Base64,flattenObjectKeys,generateDefaultDocumentTitle,getDefaultFilter,getDefaultSortOrder,getNextPageParam,getPreviousPageParam,handleUseParams,importCSVMapper,keys,legacyResourceTransform,matchResourceFromRoute,parseTableParams,parseTableParamsFromQuery,pickDataProvider,pickNotDeprecated,propertyPathToArray,queryKeys,routeGenerator,setInitialFilters,setInitialSorters,stringifyTableParams,unionFilters,unionSorters,useActiveAuthProvider,useApiUrl,useAuthenticated,useBack,useBreadcrumb,useCan,useCanWithoutCache,useCancelNotification,useCheckError,useCloneButton,useCreate,useCreateButton,useCreateMany,useCustom,useCustomMutation,useDataProvider,useDelete,useDeleteButton,useDeleteMany,useEditButton,useExport,useExportButton,useForgotPassword,useForm,useGetIdentity,useGetLocale,useGetToPath,useGo,useHandleNotification,useImport,useImportButton,useInfiniteList,useInvalidate,useInvalidateAuthStore,useIsAuthenticated,useIsExistAuthentication,useKeys,useLink,useList,useListButton,useLiveMode,useLoadingOvertime,useLog,useLogList,useLogin,useLogout,useMany,useMenu,useMeta,useMetaContext,useModal,useMutationMode,useNavigation,useNotification,useOnError,useOne,useParse,useParsed,usePermissions,usePublish,useRedirectionAfterSubmission,useRefineContext,useRefineOptions,useRefreshButton,useRegister,useResource,useResourceParams,useResourceSubscription,useResourceWithRoute,useRouterContext,useRouterType,useSaveButton,useSelect,useSetLocale,useShow,useShowButton,useSubscription,useSyncWithLocation,useTable,useTitle,useToPath,useTranslate,useTranslation,useUpdate,useUpdateMany,useUpdatePassword,useUserFriendlyName,useWarnAboutChange,userFriendlyResourceName auto */ var na = Object.defineProperty;\nvar o = (e, t)=>na(e, \"name\", {\n        value: t,\n        configurable: !0\n    });\n\n\n\n\nvar Xo = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Zo = o(({ children: e, isProvided: t, ...r })=>{\n    let { replace: s } = he(), n = o(async (c)=>{\n        var p;\n        try {\n            return await ((p = r.login) == null ? void 0 : p.call(r, c));\n        } catch (l) {\n            return Promise.reject(l);\n        }\n    }, \"loginFunc\"), i = o(async (c)=>{\n        var p;\n        try {\n            return await ((p = r.register) == null ? void 0 : p.call(r, c));\n        } catch (l) {\n            return Promise.reject(l);\n        }\n    }, \"registerFunc\"), a = o(async (c)=>{\n        var p;\n        try {\n            return await ((p = r.logout) == null ? void 0 : p.call(r, c));\n        } catch (l) {\n            return Promise.reject(l);\n        }\n    }, \"logoutFunc\"), u = o(async (c)=>{\n        var p;\n        try {\n            return await ((p = r.checkAuth) == null ? void 0 : p.call(r, c)), Promise.resolve();\n        } catch (l) {\n            return l != null && l.redirectPath && s(l.redirectPath), Promise.reject(l);\n        }\n    }, \"checkAuthFunc\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Xo.Provider, {\n        value: {\n            ...r,\n            login: n,\n            logout: a,\n            checkAuth: u,\n            register: i,\n            isProvided: t\n        }\n    }, e);\n}, \"LegacyAuthContextProvider\"), Yo = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Jo = o(({ children: e, isProvided: t, ...r })=>{\n    let s = o(async (p)=>{\n        var l;\n        try {\n            return await ((l = r.login) == null ? void 0 : l.call(r, p));\n        } catch (m) {\n            return console.warn(\"Unhandled Error in login: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleLogin\"), n = o(async (p)=>{\n        var l;\n        try {\n            return await ((l = r.register) == null ? void 0 : l.call(r, p));\n        } catch (m) {\n            return console.warn(\"Unhandled Error in register: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleRegister\"), i = o(async (p)=>{\n        var l;\n        try {\n            return await ((l = r.logout) == null ? void 0 : l.call(r, p));\n        } catch (m) {\n            return console.warn(\"Unhandled Error in logout: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleLogout\"), a = o(async (p)=>{\n        var l;\n        try {\n            let m = await ((l = r.check) == null ? void 0 : l.call(r, p));\n            return Promise.resolve(m);\n        } catch (m) {\n            return console.warn(\"Unhandled Error in check: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleCheck\"), u = o(async (p)=>{\n        var l;\n        try {\n            let m = await ((l = r.forgotPassword) == null ? void 0 : l.call(r, p));\n            return Promise.resolve(m);\n        } catch (m) {\n            return console.warn(\"Unhandled Error in forgotPassword: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleForgotPassword\"), c = o(async (p)=>{\n        var l;\n        try {\n            let m = await ((l = r.updatePassword) == null ? void 0 : l.call(r, p));\n            return Promise.resolve(m);\n        } catch (m) {\n            return console.warn(\"Unhandled Error in updatePassword: refine always expects a resolved promise.\", m), Promise.reject(m);\n        }\n    }, \"handleUpdatePassword\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Yo.Provider, {\n        value: {\n            ...r,\n            login: s,\n            logout: i,\n            check: a,\n            register: n,\n            forgotPassword: u,\n            updatePassword: c,\n            isProvided: t\n        }\n    }, e);\n}, \"AuthBindingsContextProvider\"), xe = o(()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(Xo), \"useLegacyAuthContext\"), Ue = o(()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(Yo), \"useAuthBindingsContext\");\n\n\n\n\nvar Bt = o((e)=>e / 1e3, \"userFriendlySecond\");\n\n\nvar sr = o((e, t = (r)=>r)=>{\n    let [r, ...s] = e;\n    return s.map((n)=>(0,lodash_es_fromPairs_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])((0,lodash_es_zip_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(r, n))).map((n, i, a)=>t.call(void 0, n, i, a));\n}, \"importCSVMapper\");\n\nvar nr = o((e = \"\", t)=>{\n    let r = Kt(e);\n    return t === \"singular\" ? pluralize__WEBPACK_IMPORTED_MODULE_4__.singular(r) : pluralize__WEBPACK_IMPORTED_MODULE_4__.plural(r);\n}, \"userFriendlyResourceName\");\nvar es = o((e = {})=>e != null && e.id ? {\n        ...e,\n        id: decodeURIComponent(e.id)\n    } : e, \"handleUseParams\");\nfunction pt(e, t) {\n    return e.findIndex((r, s)=>s <= e.length - t.length && t.every((n, i)=>e[s + i] === n));\n}\no(pt, \"arrayFindIndex\");\nfunction ua(e) {\n    if (e[0] === \"data\") {\n        let t = e.slice(1);\n        if (t[2] === \"many\") t[2] = \"getMany\";\n        else if (t[2] === \"infinite\") t[2] = \"list\";\n        else if (t[2] === \"one\") t[2] = \"detail\";\n        else if (t[1] === \"custom\") {\n            let r = {\n                ...t[2]\n            };\n            return delete r.method, delete r.url, [\n                t[0],\n                t[1],\n                t[2].method,\n                t[2].url,\n                r\n            ];\n        }\n        return t;\n    }\n    if (e[0] === \"audit\" && e[2] === \"list\") return [\n        \"logList\",\n        e[1],\n        e[3]\n    ];\n    if (e[0] === \"access\" && e.length === 4) return [\n        \"useCan\",\n        {\n            resource: e[1],\n            action: e[2],\n            ...e[3]\n        }\n    ];\n    if (e[0] === \"auth\") {\n        if (pt(e, [\n            \"auth\",\n            \"login\"\n        ]) !== -1) return [\n            \"useLogin\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"logout\"\n        ]) !== -1) return [\n            \"useLogout\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"identity\"\n        ]) !== -1) return [\n            \"getUserIdentity\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"register\"\n        ]) !== -1) return [\n            \"useRegister\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"forgotPassword\"\n        ]) !== -1) return [\n            \"useForgotPassword\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"check\"\n        ]) !== -1) return [\n            \"useAuthenticated\",\n            e[2]\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"onError\"\n        ]) !== -1) return [\n            \"useCheckError\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"permissions\"\n        ]) !== -1) return [\n            \"usePermissions\"\n        ];\n        if (pt(e, [\n            \"auth\",\n            \"updatePassword\"\n        ]) !== -1) return [\n            \"useUpdatePassword\"\n        ];\n    }\n    return e;\n}\no(ua, \"convertToLegacy\");\nvar Oe = class {\n    constructor(t = []){\n        this.segments = [];\n        this.segments = t;\n    }\n    key() {\n        return this.segments;\n    }\n    legacy() {\n        return ua(this.segments);\n    }\n    get(t) {\n        return t ? this.legacy() : this.segments;\n    }\n};\no(Oe, \"BaseKeyBuilder\");\nvar st = class extends Oe {\n    params(t) {\n        return new Oe([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(st, \"ParamsKeyBuilder\");\nvar ar = class extends Oe {\n    id(t) {\n        return new st([\n            ...this.segments,\n            t ? String(t) : void 0\n        ]);\n    }\n};\no(ar, \"DataIdRequiringKeyBuilder\");\nvar ir = class extends Oe {\n    ids(...t) {\n        return new st([\n            ...this.segments,\n            ...t.length ? [\n                t.map((r)=>String(r))\n            ] : []\n        ]);\n    }\n};\no(ir, \"DataIdsRequiringKeyBuilder\");\nvar ur = class extends Oe {\n    action(t) {\n        if (t === \"one\") return new ar([\n            ...this.segments,\n            t\n        ]);\n        if (t === \"many\") return new ir([\n            ...this.segments,\n            t\n        ]);\n        if ([\n            \"list\",\n            \"infinite\"\n        ].includes(t)) return new st([\n            ...this.segments,\n            t\n        ]);\n        throw new Error(\"Invalid action type\");\n    }\n};\no(ur, \"DataResourceKeyBuilder\");\nvar cr = class extends Oe {\n    resource(t) {\n        return new ur([\n            ...this.segments,\n            t\n        ]);\n    }\n    mutation(t) {\n        return new st([\n            ...t === \"custom\" ? this.segments : [\n                this.segments[0]\n            ],\n            t\n        ]);\n    }\n};\no(cr, \"DataKeyBuilder\");\nvar pr = class extends Oe {\n    action(t) {\n        return new st([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(pr, \"AuthKeyBuilder\");\nvar dr = class extends Oe {\n    action(t) {\n        return new st([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(dr, \"AccessResourceKeyBuilder\");\nvar lr = class extends Oe {\n    resource(t) {\n        return new dr([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(lr, \"AccessKeyBuilder\");\nvar mr = class extends Oe {\n    action(t) {\n        return new st([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(mr, \"AuditActionKeyBuilder\");\nvar fr = class extends Oe {\n    resource(t) {\n        return new mr([\n            ...this.segments,\n            t\n        ]);\n    }\n    action(t) {\n        return new st([\n            ...this.segments,\n            t\n        ]);\n    }\n};\no(fr, \"AuditKeyBuilder\");\nvar wt = class extends Oe {\n    data(t) {\n        return new cr([\n            \"data\",\n            t || \"default\"\n        ]);\n    }\n    auth() {\n        return new pr([\n            \"auth\"\n        ]);\n    }\n    access() {\n        return new lr([\n            \"access\"\n        ]);\n    }\n    audit() {\n        return new fr([\n            \"audit\"\n        ]);\n    }\n};\no(wt, \"KeyBuilder\");\nvar nt = o(()=>new wt([]), \"keys\");\nvar I = o((...e)=>e.find((t)=>typeof t < \"u\"), \"pickNotDeprecated\");\nvar ts = o((e, t, r, s)=>{\n    let n = t || \"default\", i = {\n        all: [\n            n\n        ],\n        resourceAll: [\n            n,\n            e || \"\"\n        ],\n        list: (a)=>[\n                ...i.resourceAll,\n                \"list\",\n                {\n                    ...a,\n                    ...I(r, s) || {}\n                }\n            ],\n        many: (a)=>[\n                ...i.resourceAll,\n                \"getMany\",\n                a == null ? void 0 : a.map(String),\n                {\n                    ...I(r, s) || {}\n                }\n            ].filter((u)=>u !== void 0),\n        detail: (a)=>[\n                ...i.resourceAll,\n                \"detail\",\n                a == null ? void 0 : a.toString(),\n                {\n                    ...I(r, s) || {}\n                }\n            ],\n        logList: (a)=>[\n                \"logList\",\n                e,\n                a,\n                s\n            ].filter((u)=>u !== void 0)\n    };\n    return i;\n}, \"queryKeys\"), dt = o((e)=>(t, r, s, n)=>{\n        let i = r || \"default\";\n        return {\n            all: nt().data(i).get(e),\n            resourceAll: nt().data(r).resource(t ?? \"\").get(e),\n            list: (u)=>nt().data(r).resource(t ?? \"\").action(\"list\").params({\n                    ...u,\n                    ...I(s, n) || {}\n                }).get(e),\n            many: (u)=>nt().data(r).resource(t ?? \"\").action(\"many\").ids(...u ?? []).params({\n                    ...I(s, n) || {}\n                }).get(e),\n            detail: (u)=>nt().data(r).resource(t ?? \"\").action(\"one\").id(u ?? \"\").params({\n                    ...I(s, n) || {}\n                }).get(e),\n            logList: (u)=>[\n                    ...nt().audit().resource(t).action(\"list\").params(u).get(e),\n                    n\n                ].filter((c)=>c !== void 0)\n        };\n    }, \"queryKeysReplacement\");\nvar Xr = o((e, t)=>!e || !t ? !1 : !!e.find((r)=>r === t), \"hasPermission\");\nvar It = o((e)=>e.startsWith(\":\"), \"isParameter\");\nvar it = o((e)=>e.split(\"/\").filter((r)=>r !== \"\"), \"splitToSegments\");\nvar rs = o((e, t)=>{\n    let r = it(e), s = it(t);\n    return r.length === s.length;\n}, \"isSegmentCountsSame\");\nvar Ae = o((e)=>e.replace(/^\\/|\\/$/g, \"\"), \"removeLeadingTrailingSlashes\");\nvar os = o((e, t)=>{\n    let r = Ae(e), s = Ae(t);\n    if (!rs(r, s)) return !1;\n    let n = it(r);\n    return it(s).every((a, u)=>It(a) || a === n[u]);\n}, \"checkBySegments\");\nvar ss = o((e, t, r)=>{\n    let s = Ae(r || \"\"), n = `${s}${s ? \"/\" : \"\"}${e}`;\n    return t === \"list\" ? n = `${n}` : t === \"create\" ? n = `${n}/create` : t === \"edit\" ? n = `${n}/edit/:id` : t === \"show\" ? n = `${n}/show/:id` : t === \"clone\" && (n = `${n}/clone/:id`), `/${n.replace(/^\\//, \"\")}`;\n}, \"getDefaultActionPath\");\nvar ze = o((e, t)=>{\n    var n, i;\n    let r = I((n = e.meta) == null ? void 0 : n.parent, (i = e.options) == null ? void 0 : i.parent, e.parentName);\n    return r ? t.find((a)=>(a.identifier ?? a.name) === r) ?? {\n        name: r\n    } : void 0;\n}, \"getParentResource\");\nvar Gt = o((e, t, r)=>{\n    let s = [], n = ze(e, t);\n    for(; n;)s.push(n), n = ze(n, t);\n    if (s.length !== 0) return `/${s.reverse().map((i)=>{\n        var u;\n        let a = r ? ((u = i.options) == null ? void 0 : u.route) ?? i.name : i.name;\n        return Ae(a);\n    }).join(\"/\")}`;\n}, \"getParentPrefixForResource\");\nvar Se = o((e, t, r)=>{\n    let s = [], n = [\n        \"list\",\n        \"show\",\n        \"edit\",\n        \"create\",\n        \"clone\"\n    ], i = Gt(e, t, r);\n    return n.forEach((a)=>{\n        var p, l;\n        let u = r && a === \"clone\" ? e.create : e[a], c;\n        typeof u == \"function\" || r ? c = ss(r ? ((p = e.meta) == null ? void 0 : p.route) ?? ((l = e.options) == null ? void 0 : l.route) ?? e.name : e.name, a, r ? i : void 0) : typeof u == \"string\" ? c = u : typeof u == \"object\" && (c = u.path), c && s.push({\n            action: a,\n            resource: e,\n            route: `/${c.replace(/^\\//, \"\")}`\n        });\n    }), s;\n}, \"getActionRoutesFromResource\");\nvar ns = o((e)=>{\n    var n;\n    if (e.length === 0) return;\n    if (e.length === 1) return e[0];\n    let t = e.map((i)=>({\n            ...i,\n            splitted: it(Ae(i.route))\n        })), r = ((n = t[0]) == null ? void 0 : n.splitted.length) ?? 0, s = [\n        ...t\n    ];\n    for(let i = 0; i < r; i++){\n        let a = s.filter((u)=>!It(u.splitted[i]));\n        if (a.length !== 0) {\n            if (a.length === 1) {\n                s = a;\n                break;\n            }\n            s = a;\n        }\n    }\n    return s[0];\n}, \"pickMatchedRoute\");\nvar as = o((e, t)=>{\n    let s = t.flatMap((i)=>Se(i, t)).filter((i)=>os(e, i.route)), n = ns(s);\n    return {\n        found: !!n,\n        resource: n == null ? void 0 : n.resource,\n        action: n == null ? void 0 : n.action,\n        matchedRoute: n == null ? void 0 : n.route\n    };\n}, \"matchResourceFromRoute\");\nvar yr = o((e, t)=>{\n    var n;\n    let r, s = Gt(e, t, !0);\n    if (s) {\n        let i = I(e.meta, e.options);\n        r = `${s}/${(i == null ? void 0 : i.route) ?? e.name}`;\n    } else r = ((n = e.options) == null ? void 0 : n.route) ?? e.name;\n    return `/${r.replace(/^\\//, \"\")}`;\n}, \"routeGenerator\");\nvar is = o((e)=>{\n    var a;\n    let t = [], r = {}, s = {}, n, i;\n    for(let u = 0; u < e.length; u++){\n        n = e[u];\n        let c = n.route ?? ((a = I(n == null ? void 0 : n.meta, n.options)) == null ? void 0 : a.route) ?? \"\";\n        r[c] = n, r[c].children = [], s[n.name] = n, s[n.name].children = [];\n    }\n    for(let u in r)Object.hasOwn(r, u) && (i = r[u], i.parentName && s[i.parentName] ? s[i.parentName].children.push(i) : t.push(i));\n    return t;\n}, \"createTreeView\");\nvar Kt = o((e)=>(e = e.replace(/([a-z]{1})([A-Z]{1})/g, \"$1-$2\"), e = e.replace(/([A-Z]{1})([A-Z]{1})([a-z]{1})/g, \"$1-$2$3\"), e = e.toLowerCase().replace(/[_-]+/g, \" \").replace(/\\s{2,}/g, \" \").trim(), e = e.charAt(0).toUpperCase() + e.slice(1), e), \"humanizeString\");\n\n\n\nvar Zr = o(({ children: e })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, e), \"DefaultLayout\");\nvar pa = {\n    icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        width: 24,\n        height: 24,\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        \"data-testid\": \"refine-logo\",\n        id: \"refine-default-logo\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fillRule: \"evenodd\",\n        clipRule: \"evenodd\",\n        d: \"M13.7889 0.422291C12.6627 -0.140764 11.3373 -0.140764 10.2111 0.422291L2.21115 4.42229C0.85601 5.09986 0 6.48491 0 8V16C0 17.5151 0.85601 18.9001 2.21115 19.5777L10.2111 23.5777C11.3373 24.1408 12.6627 24.1408 13.7889 23.5777L21.7889 19.5777C23.144 18.9001 24 17.5151 24 16V8C24 6.48491 23.144 5.09986 21.7889 4.42229L13.7889 0.422291ZM8 8C8 5.79086 9.79086 4 12 4C14.2091 4 16 5.79086 16 8V16C16 18.2091 14.2091 20 12 20C9.79086 20 8 18.2091 8 16V8Z\",\n        fill: \"currentColor\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M14 8C14 9.10457 13.1046 10 12 10C10.8954 10 10 9.10457 10 8C10 6.89543 10.8954 6 12 6C13.1046 6 14 6.89543 14 8Z\",\n        fill: \"currentColor\"\n    })),\n    text: \"Refine Project\"\n}, Fe = {\n    mutationMode: \"pessimistic\",\n    syncWithLocation: !1,\n    undoableTimeout: 5e3,\n    warnWhenUnsavedChanges: !1,\n    liveMode: \"off\",\n    redirect: {\n        afterCreate: \"list\",\n        afterClone: \"list\",\n        afterEdit: \"list\"\n    },\n    overtime: {\n        enabled: !0,\n        interval: 1e3\n    },\n    textTransformers: {\n        humanize: Kt,\n        plural: pluralize__WEBPACK_IMPORTED_MODULE_4__.plural,\n        singular: pluralize__WEBPACK_IMPORTED_MODULE_4__.singular\n    },\n    disableServerSideValidation: !1,\n    title: pa\n}, Qe = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    hasDashboard: !1,\n    mutationMode: \"pessimistic\",\n    warnWhenUnsavedChanges: !1,\n    syncWithLocation: !1,\n    undoableTimeout: 5e3,\n    Title: void 0,\n    Sider: void 0,\n    Header: void 0,\n    Footer: void 0,\n    Layout: Zr,\n    OffLayoutArea: void 0,\n    liveMode: \"off\",\n    onLiveEvent: void 0,\n    options: Fe\n}), cs = o(({ hasDashboard: e, mutationMode: t, warnWhenUnsavedChanges: r, syncWithLocation: s, undoableTimeout: n, children: i, DashboardPage: a, Title: u, Layout: c = Zr, Header: p, Sider: l, Footer: m, OffLayoutArea: y, LoginPage: d = Yr, catchAll: T, liveMode: x = \"off\", onLiveEvent: v, options: f })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Qe.Provider, {\n        value: {\n            __initialized: !0,\n            hasDashboard: e,\n            mutationMode: t,\n            warnWhenUnsavedChanges: r,\n            syncWithLocation: s,\n            Title: u,\n            undoableTimeout: n,\n            Layout: c,\n            Header: p,\n            Sider: l,\n            Footer: m,\n            OffLayoutArea: y,\n            DashboardPage: a,\n            LoginPage: d,\n            catchAll: T,\n            liveMode: x,\n            onLiveEvent: v,\n            options: f\n        }\n    }, i), \"RefineContextProvider\");\nvar Jr = o(({ options: e, disableTelemetry: t, liveMode: r, mutationMode: s, reactQueryClientConfig: n, reactQueryDevtoolConfig: i, syncWithLocation: a, undoableTimeout: u, warnWhenUnsavedChanges: c } = {})=>{\n    var y, d, T, x, v, f, P, M, Q, g, C, h;\n    let p = {\n        breadcrumb: e == null ? void 0 : e.breadcrumb,\n        mutationMode: (e == null ? void 0 : e.mutationMode) ?? s ?? Fe.mutationMode,\n        undoableTimeout: (e == null ? void 0 : e.undoableTimeout) ?? u ?? Fe.undoableTimeout,\n        syncWithLocation: (e == null ? void 0 : e.syncWithLocation) ?? a ?? Fe.syncWithLocation,\n        warnWhenUnsavedChanges: (e == null ? void 0 : e.warnWhenUnsavedChanges) ?? c ?? Fe.warnWhenUnsavedChanges,\n        liveMode: (e == null ? void 0 : e.liveMode) ?? r ?? Fe.liveMode,\n        redirect: {\n            afterCreate: ((y = e == null ? void 0 : e.redirect) == null ? void 0 : y.afterCreate) ?? Fe.redirect.afterCreate,\n            afterClone: ((d = e == null ? void 0 : e.redirect) == null ? void 0 : d.afterClone) ?? Fe.redirect.afterClone,\n            afterEdit: ((T = e == null ? void 0 : e.redirect) == null ? void 0 : T.afterEdit) ?? Fe.redirect.afterEdit\n        },\n        overtime: (e == null ? void 0 : e.overtime) ?? Fe.overtime,\n        textTransformers: {\n            humanize: ((x = e == null ? void 0 : e.textTransformers) == null ? void 0 : x.humanize) ?? Fe.textTransformers.humanize,\n            plural: ((v = e == null ? void 0 : e.textTransformers) == null ? void 0 : v.plural) ?? Fe.textTransformers.plural,\n            singular: ((f = e == null ? void 0 : e.textTransformers) == null ? void 0 : f.singular) ?? Fe.textTransformers.singular\n        },\n        disableServerSideValidation: (e == null ? void 0 : e.disableServerSideValidation) ?? Fe.disableServerSideValidation,\n        projectId: e == null ? void 0 : e.projectId,\n        useNewQueryKeys: e == null ? void 0 : e.useNewQueryKeys,\n        title: {\n            icon: typeof ((P = e == null ? void 0 : e.title) == null ? void 0 : P.icon) > \"u\" ? Fe.title.icon : (M = e == null ? void 0 : e.title) == null ? void 0 : M.icon,\n            text: typeof ((Q = e == null ? void 0 : e.title) == null ? void 0 : Q.text) > \"u\" ? Fe.title.text : (g = e == null ? void 0 : e.title) == null ? void 0 : g.text\n        }\n    }, l = (e == null ? void 0 : e.disableTelemetry) ?? t ?? !1, m = {\n        clientConfig: ((C = e == null ? void 0 : e.reactQuery) == null ? void 0 : C.clientConfig) ?? n ?? {},\n        devtoolConfig: ((h = e == null ? void 0 : e.reactQuery) == null ? void 0 : h.devtoolConfig) ?? i ?? {}\n    };\n    return {\n        optionsWithDefaults: p,\n        disableTelemetryWithDefault: l,\n        reactQueryWithDefaults: m\n    };\n}, \"handleRefineOptions\");\nvar qr = o(({ redirectFromProps: e, action: t, redirectOptions: r })=>{\n    if (e || e === !1) return e;\n    switch(t){\n        case \"clone\":\n            return r.afterClone;\n        case \"create\":\n            return r.afterCreate;\n        case \"edit\":\n            return r.afterEdit;\n        default:\n            return !1;\n    }\n}, \"redirectPage\");\nvar gr = o(async (e, t, r)=>{\n    let s = [];\n    for (let [n, i] of e.entries())try {\n        let a = await i();\n        s.push(t(a, n));\n    } catch (a) {\n        s.push(r(a, n));\n    }\n    return s;\n}, \"sequentialPromises\");\nvar Ee = o((e, t = [], r = !1)=>{\n    if (!e) return;\n    if (r) {\n        let n = t.find((a)=>Ae(a.route ?? \"\") === Ae(e));\n        return n || t.find((a)=>a.name === e);\n    }\n    let s = t.find((n)=>n.identifier === e);\n    return s || (s = t.find((n)=>n.name === e)), s;\n}, \"pickResource\");\nvar ee = o((e, t, r)=>{\n    if (t) return t;\n    let s = Ee(e, r), n = I(s == null ? void 0 : s.meta, s == null ? void 0 : s.options);\n    return n != null && n.dataProviderName ? n.dataProviderName : \"default\";\n}, \"pickDataProvider\");\nvar lt = o(async (e)=>({\n        data: (await Promise.all(e)).map((t)=>t.data)\n    }), \"handleMultiple\");\nvar Tr = o((e)=>{\n    let { pagination: t, cursor: r } = e;\n    if (r != null && r.next) return r.next;\n    let s = (t == null ? void 0 : t.current) || 1, n = (t == null ? void 0 : t.pageSize) || 10, i = Math.ceil((e.total || 0) / n);\n    return s < i ? Number(s) + 1 : void 0;\n}, \"getNextPageParam\"), xr = o((e)=>{\n    let { pagination: t, cursor: r } = e;\n    if (r != null && r.prev) return r.prev;\n    let s = (t == null ? void 0 : t.current) || 1;\n    return s === 1 ? void 0 : s - 1;\n}, \"getPreviousPageParam\");\nvar hr = o((e)=>{\n    let t = [];\n    return e.forEach((r)=>{\n        var s, n;\n        t.push({\n            ...r,\n            label: ((s = r.meta) == null ? void 0 : s.label) ?? ((n = r.options) == null ? void 0 : n.label),\n            route: yr(r, e),\n            canCreate: !!r.create,\n            canEdit: !!r.edit,\n            canShow: !!r.show,\n            canDelete: r.canDelete\n        });\n    }), t;\n}, \"legacyResourceTransform\");\nvar ps = o((e)=>it(Ae(e)).flatMap((r)=>It(r) ? [\n            r.slice(1)\n        ] : []), \"pickRouteParams\");\nvar ds = o((e, t = {})=>e.reduce((r, s)=>{\n        let n = t[s];\n        return typeof n < \"u\" && (r[s] = n), r;\n    }, {}), \"prepareRouteParams\");\nvar We = o((e, t = {}, r = {}, s = {})=>{\n    let n = ps(e), i = ds(n, {\n        ...t,\n        ...typeof (r == null ? void 0 : r.id) < \"u\" ? {\n            id: r.id\n        } : {},\n        ...typeof (r == null ? void 0 : r.action) < \"u\" ? {\n            action: r.action\n        } : {},\n        ...typeof (r == null ? void 0 : r.resource) < \"u\" ? {\n            resource: r.resource\n        } : {},\n        ...r == null ? void 0 : r.params,\n        ...s\n    });\n    return e.replace(/:([^\\/]+)/g, (a, u)=>{\n        let c = i[u];\n        return typeof c < \"u\" ? `${c}` : a;\n    });\n}, \"composeRoute\");\nvar ie = o(()=>{\n    let e = xe(), t = Ue();\n    return t.isProvided ? {\n        isLegacy: !1,\n        ...t\n    } : e.isProvided ? {\n        isLegacy: !0,\n        ...e,\n        check: e.checkAuth,\n        onError: e.checkError,\n        getIdentity: e.getUserIdentity\n    } : null;\n}, \"useActiveAuthProvider\");\nvar Wt = o(({ hasPagination: e, pagination: t, configPagination: r } = {})=>{\n    let s = e === !1 ? \"off\" : \"server\", n = (t == null ? void 0 : t.mode) ?? s, i = I(t == null ? void 0 : t.current, r == null ? void 0 : r.current) ?? 1, a = I(t == null ? void 0 : t.pageSize, r == null ? void 0 : r.pageSize) ?? 10;\n    return {\n        current: i,\n        pageSize: a,\n        mode: n\n    };\n}, \"handlePaginationParams\");\n\nvar Pr = o((e)=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let s = window.matchMedia(e);\n        s.matches !== t && r(s.matches);\n        let n = o(()=>r(s.matches), \"listener\");\n        return window.addEventListener(\"resize\", n), ()=>window.removeEventListener(\"resize\", n);\n    }, [\n        t,\n        e\n    ]), t;\n}, \"useMediaQuery\");\nvar Rr = o((e, t, r, s)=>{\n    let n = s ? e(t, s, r) : e(t, r), i = r ?? t;\n    return n === t || typeof n > \"u\" ? i : n;\n}, \"safeTranslate\");\nfunction ls(e, t, r, s, n) {\n    var y;\n    let i = {\n        create: \"Create new \",\n        clone: `#${s ?? \"\"} Clone `,\n        edit: `#${s ?? \"\"} Edit `,\n        show: `#${s ?? \"\"} Show `,\n        list: \"\"\n    }, a = (t == null ? void 0 : t.identifier) ?? (t == null ? void 0 : t.name), u = (t == null ? void 0 : t.label) ?? ((y = t == null ? void 0 : t.meta) == null ? void 0 : y.label) ?? nr(a, r === \"list\" ? \"plural\" : \"singular\"), c = n ?? u, p = Rr(e, \"documentTitle.default\", \"Refine\"), l = Rr(e, \"documentTitle.suffix\", \" | Refine\"), m = p;\n    return r && a && (m = Rr(e, `documentTitle.${a}.${r}`, `${i[r] ?? \"\"}${c}${l}`, {\n        id: s\n    })), m;\n}\no(ls, \"generateDefaultDocumentTitle\");\n\nvar _e = o((e, t)=>{\n    let { mutationMode: r, undoableTimeout: s } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return {\n        mutationMode: e ?? r,\n        undoableTimeout: t ?? s\n    };\n}, \"useMutationMode\");\n\n\nvar eo = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), fs = o(({ children: e })=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(eo.Provider, {\n        value: {\n            warnWhen: t,\n            setWarnWhen: r\n        }\n    }, e);\n}, \"UnsavedWarnContextProvider\");\nvar vt = o(()=>{\n    let { warnWhenUnsavedChanges: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe), { warnWhen: t, setWarnWhen: r } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(eo);\n    return {\n        warnWhenUnsavedChanges: e,\n        warnWhen: !!t,\n        setWarnWhen: r ?? (()=>{})\n    };\n}, \"useWarnAboutChange\");\n\nvar to = o(()=>{\n    let { syncWithLocation: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return {\n        syncWithLocation: e\n    };\n}, \"useSyncWithLocation\");\n\nvar Ta = o(()=>{\n    let { Title: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return e;\n}, \"useTitle\");\n\nvar ge = o(()=>{\n    let { Footer: e, Header: t, Layout: r, OffLayoutArea: s, Sider: n, Title: i, hasDashboard: a, mutationMode: u, syncWithLocation: c, undoableTimeout: p, warnWhenUnsavedChanges: l, DashboardPage: m, LoginPage: y, catchAll: d, options: T, __initialized: x } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return {\n        __initialized: x,\n        Footer: e,\n        Header: t,\n        Layout: r,\n        OffLayoutArea: s,\n        Sider: n,\n        Title: i,\n        hasDashboard: a,\n        mutationMode: u,\n        syncWithLocation: c,\n        undoableTimeout: p,\n        warnWhenUnsavedChanges: l,\n        DashboardPage: m,\n        LoginPage: y,\n        catchAll: d,\n        options: T\n    };\n}, \"useRefineContext\");\nvar ht = o(()=>{\n    let { options: { textTransformers: e } } = ge();\n    return o((r = \"\", s)=>{\n        let n = e.humanize(r);\n        return s === \"singular\" ? e.singular(n) : e.plural(n);\n    }, \"getFriendlyName\");\n}, \"useUserFriendlyName\");\nvar gs = o((e)=>typeof e == \"object\" && e !== null, \"isNested\"), ha = o((e)=>Array.isArray(e), \"isArray\"), Cr = o((e, t = \"\")=>gs(e) ? Object.keys(e).reduce((r, s)=>{\n        let n = t.length ? `${t}.` : \"\";\n        return gs(e[s]) && Object.keys(e[s]).length && (ha(e[s]) && e[s].length ? e[s].forEach((i, a)=>{\n            Object.assign(r, Cr(i, `${n + s}.${a}`));\n        }) : Object.assign(r, Cr(e[s], n + s))), r[n + s] = e[s], r;\n    }, {}) : {\n        [t]: e\n    }, \"flattenObjectKeys\");\nvar Ts = o((e)=>e.split(\".\").map((t)=>Number.isNaN(Number(t)) ? t : Number(t)), \"propertyPathToArray\");\nvar ro = o((e, t, r)=>{\n    if (true) return;\n    let s = new Blob([\n        t\n    ], {\n        type: r\n    }), n = document.createElement(\"a\");\n    n.setAttribute(\"visibility\", \"hidden\"), n.download = e;\n    let i = URL.createObjectURL(s);\n    n.href = i, document.body.appendChild(n), n.click(), document.body.removeChild(n), setTimeout(()=>{\n        URL.revokeObjectURL(i);\n    });\n}, \"downloadInBrowser\");\nvar br = o((e)=>{\n    setTimeout(e, 0);\n}, \"deferExecution\");\n\nvar oo = o((e, t = 1e3, r)=>{\n    let s = [], n = o(()=>{\n        s.forEach((u)=>{\n            var c;\n            return (c = u.reject) == null ? void 0 : c.call(u, r);\n        }), s = [];\n    }, \"cancelPrevious\"), i = (0,lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((...u)=>{\n        let { resolve: c, reject: p } = s.pop() || {};\n        Promise.resolve(e(...u)).then(c).catch(p);\n    }, t), a = o((...u)=>new Promise((c, p)=>{\n            n(), s.push({\n                resolve: c,\n                reject: p\n            }), i(...u);\n        }), \"runner\");\n    return a.flush = ()=>i.flush(), a.cancel = ()=>{\n        i.cancel(), n();\n    }, a;\n}, \"asyncDebounce\");\nvar je = o((e)=>{\n    let t = {\n        queryKey: e.queryKey,\n        pageParam: e.pageParam\n    };\n    return Object.defineProperty(t, \"signal\", {\n        enumerable: !0,\n        get: ()=>e.signal\n    }), t;\n}, \"prepareQueryContext\");\nvar vr = o((e)=>{\n    let { current: t, pageSize: r, sorter: s, sorters: n, filters: i } = qs__WEBPACK_IMPORTED_MODULE_6__.parse(e.substring(1));\n    return {\n        parsedCurrent: t && Number(t),\n        parsedPageSize: r && Number(r),\n        parsedSorter: I(n, s) ?? [],\n        parsedFilters: i ?? []\n    };\n}, \"parseTableParams\"), Ca = o((e)=>{\n    let t = qs__WEBPACK_IMPORTED_MODULE_6__.stringify(e);\n    return vr(`/${t}`);\n}, \"parseTableParamsFromQuery\"), Dr = o((e)=>{\n    let t = {\n        skipNulls: !0,\n        arrayFormat: \"indices\",\n        encode: !1\n    }, { pagination: r, sorter: s, sorters: n, filters: i, ...a } = e;\n    return qs__WEBPACK_IMPORTED_MODULE_6__.stringify({\n        ...a,\n        ...r || {},\n        sorters: I(n, s),\n        filters: i\n    }, t);\n}, \"stringifyTableParams\"), Ps = o((e, t)=>e.operator !== \"and\" && e.operator !== \"or\" && t.operator !== \"and\" && t.operator !== \"or\" ? (\"field\" in e ? e.field : void 0) === (\"field\" in t ? t.field : void 0) && e.operator === t.operator : (\"key\" in e ? e.key : void 0) === (\"key\" in t ? t.key : void 0) && e.operator === t.operator, \"compareFilters\"), Rs = o((e, t)=>e.field === t.field, \"compareSorters\"), St = o((e, t, r = [])=>(t.filter((n)=>(n.operator === \"or\" || n.operator === \"and\") && !n.key).length > 1 && warn_once__WEBPACK_IMPORTED_MODULE_1__(!0, `[conditionalFilters]: You have created multiple Conditional Filters at the top level, this requires the key parameter. \nFor more information, see https://refine.dev/docs/advanced-tutorials/data-provider/handling-filters/#top-level-multiple-conditional-filters-usage`), (0,lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(e, t, r, Ps).filter((n)=>n.value !== void 0 && n.value !== null && (n.operator !== \"or\" || n.operator === \"or\" && n.value.length !== 0) && (n.operator !== \"and\" || n.operator === \"and\" && n.value.length !== 0))), \"unionFilters\"), Ur = o((e, t)=>(0,lodash_es_unionWith_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(e, t, Rs).filter((r)=>r.order !== void 0 && r.order !== null), \"unionSorters\"), Er = o((e, t)=>[\n        ...(0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(t, e, Ps),\n        ...e\n    ], \"setInitialFilters\"), Lr = o((e, t)=>[\n        ...(0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(t, e, Rs),\n        ...e\n    ], \"setInitialSorters\"), ba = o((e, t)=>{\n    if (!t) return;\n    let r = t.find((s)=>s.field === e);\n    if (r) return r.order;\n}, \"getDefaultSortOrder\"), va = o((e, t, r = \"eq\")=>{\n    let s = t == null ? void 0 : t.find((n)=>{\n        if (n.operator !== \"or\" && n.operator !== \"and\" && \"field\" in n) {\n            let { operator: i, field: a } = n;\n            return a === e && i === r;\n        }\n    });\n    if (s) return s.value || [];\n}, \"getDefaultFilter\");\nvar Da = o((e)=>new Promise((t, r)=>{\n        let s = new FileReader, n = o(()=>{\n            s.result && (s.removeEventListener(\"load\", n, !1), t(s.result));\n        }, \"resultHandler\");\n        s.addEventListener(\"load\", n, !1), s.readAsDataURL(e.originFileObj), s.onerror = (i)=>(s.removeEventListener(\"load\", n, !1), r(i));\n    }), \"file2Base64\");\nvar Z = o(()=>{\n    let { options: { useNewQueryKeys: e } } = ge();\n    return {\n        keys: nt,\n        preferLegacyKeys: !e\n    };\n}, \"useKeys\");\nfunction Ua({ v3LegacyAuthProviderCompatible: e = !1, options: t, params: r } = {}) {\n    let { getPermissions: s } = xe(), { getPermissions: n } = Ue(), { keys: i, preferLegacyKeys: a } = Z(), u = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: i().auth().action(\"permissions\").get(a),\n        queryFn: n ? ()=>n(r) : ()=>Promise.resolve(void 0),\n        enabled: !e && !!n,\n        ...e ? {} : t,\n        meta: {\n            ...e ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"usePermissions\", a)\n        }\n    }), c = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: [\n            ...i().auth().action(\"permissions\").get(a),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        queryFn: s ? ()=>s(r) : ()=>Promise.resolve(void 0),\n        enabled: e && !!s,\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"usePermissions\", a)\n        }\n    });\n    return e ? c : u;\n}\no(Ua, \"usePermissions\");\n\n\nfunction no({ v3LegacyAuthProviderCompatible: e = !1, queryOptions: t } = {}) {\n    let { getUserIdentity: r } = xe(), { getIdentity: s } = Ue(), { keys: n, preferLegacyKeys: i } = Z(), a = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: n().auth().action(\"identity\").get(i),\n        queryFn: s ?? (()=>Promise.resolve({})),\n        enabled: !e && !!s,\n        retry: !1,\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useGetIdentity\", i)\n        }\n    }), u = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: [\n            ...n().auth().action(\"identity\").get(i),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        queryFn: r ?? (()=>Promise.resolve({})),\n        enabled: e && !!r,\n        retry: !1,\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useGetIdentity\", i)\n        }\n    });\n    return e ? u : a;\n}\no(no, \"useGetIdentity\");\n\n\n\nvar Dt = o(()=>{\n    let e = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), { keys: t, preferLegacyKeys: r } = Z();\n    return o(async ()=>{\n        await Promise.all([\n            \"check\",\n            \"identity\",\n            \"permissions\"\n        ].map((n)=>e.invalidateQueries(t().auth().action(n).get(r))));\n    }, \"invalidate\");\n}, \"useInvalidateAuthStore\");\nfunction Mr({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = Dt(), s = oe(), n = Pe(), { push: i } = he(), { open: a, close: u } = He(), { logout: c } = xe(), { logout: p } = Ue(), { keys: l, preferLegacyKeys: m } = Z(), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: l().auth().action(\"logout\").get(m),\n        mutationFn: p,\n        onSuccess: async (T, x)=>{\n            let { success: v, error: f, redirectTo: P, successNotification: M } = T, { redirectPath: Q } = x ?? {}, g = Q ?? P;\n            v && (u == null || u(\"useLogout-error\"), M && (a == null || a(La(M)))), (f || !v) && (a == null || a(ao(f))), g !== !1 && (s === \"legacy\" ? i(g ?? \"/login\") : g && n({\n                to: g\n            })), await r();\n        },\n        onError: (T)=>{\n            a == null || a(ao(T));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogout\", m)\n        }\n    }), d = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...l().auth().action(\"logout\").get(m),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: c,\n        onSuccess: async (T, x)=>{\n            let v = (x == null ? void 0 : x.redirectPath) ?? T;\n            if (v !== !1) {\n                if (v) {\n                    s === \"legacy\" ? i(v) : n({\n                        to: v\n                    });\n                    return;\n                }\n                s === \"legacy\" ? i(\"/login\") : n({\n                    to: \"/login\"\n                }), await r();\n            }\n        },\n        onError: (T)=>{\n            a == null || a(ao(T));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogout\", m)\n        }\n    });\n    return e ? d : y;\n}\no(Mr, \"useLogout\");\nvar ao = o((e)=>({\n        key: \"useLogout-error\",\n        type: \"error\",\n        message: (e == null ? void 0 : e.name) || \"Logout Error\",\n        description: (e == null ? void 0 : e.message) || \"Something went wrong during logout\"\n    }), \"buildNotification\"), La = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"logout-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\n\n\nfunction Ht({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = Dt(), s = oe(), n = Pe(), { replace: i } = he(), a = Te(), { useLocation: u } = pe(), { search: c } = u(), { close: p, open: l } = He(), { login: m } = xe(), { login: y } = Ue(), { keys: d, preferLegacyKeys: T } = Z(), x = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        var P;\n        return s === \"legacy\" ? qs__WEBPACK_IMPORTED_MODULE_6__.parse(c, {\n            ignoreQueryPrefix: !0\n        }).to : (P = a.params) == null ? void 0 : P.to;\n    }, [\n        s,\n        a.params,\n        c\n    ]), v = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: d().auth().action(\"login\").get(T),\n        mutationFn: y,\n        onSuccess: async ({ success: P, redirectTo: M, error: Q, successNotification: g })=>{\n            P && (p == null || p(\"login-error\"), g && (l == null || l(Ia(g)))), (Q || !P) && (l == null || l(io(Q))), x && P ? s === \"legacy\" ? i(x) : n({\n                to: x,\n                type: \"replace\"\n            }) : M ? s === \"legacy\" ? i(M) : n({\n                to: M,\n                type: \"replace\"\n            }) : s === \"legacy\" && i(\"/\"), setTimeout(()=>{\n                r();\n            }, 32);\n        },\n        onError: (P)=>{\n            l == null || l(io(P));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogin\", T)\n        }\n    }), f = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...d().auth().action(\"login\").get(T),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: m,\n        onSuccess: async (P)=>{\n            x && i(x), P !== !1 && !x && (typeof P == \"string\" ? s === \"legacy\" ? i(P) : n({\n                to: P,\n                type: \"replace\"\n            }) : s === \"legacy\" ? i(\"/\") : n({\n                to: \"/\",\n                type: \"replace\"\n            })), setTimeout(()=>{\n                r();\n            }, 32), p == null || p(\"login-error\");\n        },\n        onError: (P)=>{\n            l == null || l(io(P));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogin\", T)\n        }\n    });\n    return e ? f : v;\n}\no(Ht, \"useLogin\");\nvar io = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Login Error\",\n        description: (e == null ? void 0 : e.message) || \"Invalid credentials\",\n        key: \"login-error\",\n        type: \"error\"\n    }), \"buildNotification\"), Ia = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"login-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\nfunction co({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = Dt(), s = oe(), n = Pe(), { replace: i } = he(), { register: a } = xe(), { register: u } = Ue(), { close: c, open: p } = He(), { keys: l, preferLegacyKeys: m } = Z(), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: l().auth().action(\"register\").get(m),\n        mutationFn: u,\n        onSuccess: async ({ success: T, redirectTo: x, error: v, successNotification: f })=>{\n            T && (c == null || c(\"register-error\"), f && (p == null || p(Sa(f))), await r()), (v || !T) && (p == null || p(uo(v))), x ? s === \"legacy\" ? i(x) : n({\n                to: x,\n                type: \"replace\"\n            }) : s === \"legacy\" && i(\"/\");\n        },\n        onError: (T)=>{\n            p == null || p(uo(T));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useRegister\", m)\n        }\n    }), d = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...l().auth().action(\"register\").get(m),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: a,\n        onSuccess: async (T)=>{\n            T !== !1 && (T ? s === \"legacy\" ? i(T) : n({\n                to: T,\n                type: \"replace\"\n            }) : s === \"legacy\" ? i(\"/\") : n({\n                to: \"/\",\n                type: \"replace\"\n            }), await r(), c == null || c(\"register-error\"));\n        },\n        onError: (T)=>{\n            p == null || p(uo(T));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useRegister\", m)\n        }\n    });\n    return e ? d : y;\n}\no(co, \"useRegister\");\nvar uo = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Register Error\",\n        description: (e == null ? void 0 : e.message) || \"Error while registering\",\n        key: \"register-error\",\n        type: \"error\"\n    }), \"buildNotification\"), Sa = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"register-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\nfunction lo({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = oe(), s = Pe(), { replace: n } = he(), { forgotPassword: i } = xe(), { forgotPassword: a } = Ue(), { close: u, open: c } = He(), { keys: p, preferLegacyKeys: l } = Z(), m = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: p().auth().action(\"forgotPassword\").get(l),\n        mutationFn: a,\n        onSuccess: ({ success: d, redirectTo: T, error: x, successNotification: v })=>{\n            d && (u == null || u(\"forgot-password-error\"), v && (c == null || c(ka(v)))), (x || !d) && (c == null || c(po(x))), T && (r === \"legacy\" ? n(T) : s({\n                to: T,\n                type: \"replace\"\n            }));\n        },\n        onError: (d)=>{\n            c == null || c(po(d));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useForgotPassword\", l)\n        }\n    }), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...p().auth().action(\"forgotPassword\").get(l),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: i,\n        onSuccess: (d)=>{\n            d !== !1 && d && (r === \"legacy\" ? n(d) : s({\n                to: d,\n                type: \"replace\"\n            })), u == null || u(\"forgot-password-error\");\n        },\n        onError: (d)=>{\n            c == null || c(po(d));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useForgotPassword\", l)\n        }\n    });\n    return e ? y : m;\n}\no(lo, \"useForgotPassword\");\nvar po = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Forgot Password Error\",\n        description: (e == null ? void 0 : e.message) || \"Error while resetting password\",\n        key: \"forgot-password-error\",\n        type: \"error\"\n    }), \"buildNotification\"), ka = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"forgot-password-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\n\n\nfunction fo({ v3LegacyAuthProviderCompatible: e, mutationOptions: t } = {}) {\n    let r = oe(), s = Pe(), { replace: n } = he(), { updatePassword: i } = xe(), { updatePassword: a } = Ue(), { close: u, open: c } = He(), { keys: p, preferLegacyKeys: l } = Z(), m = Te(), { useLocation: y } = pe(), { search: d } = y(), T = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>r === \"legacy\" ? qs__WEBPACK_IMPORTED_MODULE_6__.parse(d, {\n            ignoreQueryPrefix: !0\n        }) ?? {} : m.params ?? {}, [\n        d,\n        m,\n        r\n    ]), x = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: p().auth().action(\"updatePassword\").get(l),\n        mutationFn: async (f)=>a == null ? void 0 : a({\n                ...T,\n                ...f\n            }),\n        onSuccess: ({ success: f, redirectTo: P, error: M, successNotification: Q })=>{\n            f && (u == null || u(\"update-password-error\"), Q && (c == null || c(Qa(Q)))), (M || !f) && (c == null || c(mo(M))), P && (r === \"legacy\" ? n(P) : s({\n                to: P,\n                type: \"replace\"\n            }));\n        },\n        onError: (f)=>{\n            c == null || c(mo(f));\n        },\n        ...e === !0 ? {} : t,\n        meta: {\n            ...e === !0 ? {} : t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdatePassword\", l)\n        }\n    }), v = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...p().auth().action(\"updatePassword\").get(l),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: async (f)=>i == null ? void 0 : i({\n                ...T,\n                ...f\n            }),\n        onSuccess: (f)=>{\n            f !== !1 && f && (r === \"legacy\" ? n(f) : s({\n                to: f,\n                type: \"replace\"\n            })), u == null || u(\"update-password-error\");\n        },\n        onError: (f)=>{\n            c == null || c(mo(f));\n        },\n        ...e ? t : {},\n        meta: {\n            ...e ? t == null ? void 0 : t.meta : {},\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdatePassword\", l)\n        }\n    });\n    return e ? v : x;\n}\no(fo, \"useUpdatePassword\");\nvar mo = o((e)=>({\n        message: (e == null ? void 0 : e.name) || \"Update Password Error\",\n        description: (e == null ? void 0 : e.message) || \"Error while updating password\",\n        key: \"update-password-error\",\n        type: \"error\"\n    }), \"buildNotification\"), Qa = o((e)=>({\n        message: e.message,\n        description: e.description,\n        key: \"update-password-success\",\n        type: \"success\"\n    }), \"buildSuccessNotification\");\n\n\nfunction wr({ v3LegacyAuthProviderCompatible: e = !1, params: t } = {}) {\n    let { checkAuth: r } = xe(), { check: s } = Ue(), { keys: n, preferLegacyKeys: i } = Z(), a = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: n().auth().action(\"check\").params(t).get(i),\n        queryFn: async ()=>await (s == null ? void 0 : s(t)) ?? {},\n        retry: !1,\n        enabled: !e,\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useIsAuthenticated\", i)\n        }\n    }), u = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: [\n            ...n().auth().action(\"check\").params(t).get(i),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        queryFn: async ()=>await (r == null ? void 0 : r(t)) ?? {},\n        retry: !1,\n        enabled: e,\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useIsAuthenticated\", i)\n        }\n    });\n    return e ? u : a;\n}\no(wr, \"useIsAuthenticated\");\nvar Va = wr;\n\n\nfunction Re({ v3LegacyAuthProviderCompatible: e = !1 } = {}) {\n    let t = oe(), r = Pe(), { replace: s } = he(), { checkError: n } = xe(), { onError: i } = Ue(), { keys: a, preferLegacyKeys: u } = Z(), { mutate: c } = Mr({\n        v3LegacyAuthProviderCompatible: !!e\n    }), { mutate: p } = Mr({\n        v3LegacyAuthProviderCompatible: !!e\n    }), l = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: a().auth().action(\"onError\").get(u),\n        ...i ? {\n            mutationFn: i,\n            onSuccess: ({ logout: y, redirectTo: d })=>{\n                if (y) {\n                    p({\n                        redirectPath: d\n                    });\n                    return;\n                }\n                if (d) {\n                    t === \"legacy\" ? s(d) : r({\n                        to: d,\n                        type: \"replace\"\n                    });\n                    return;\n                }\n            }\n        } : {\n            mutationFn: ()=>({})\n        },\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useOnError\", u)\n        }\n    }), m = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationKey: [\n            ...a().auth().action(\"onError\").get(u),\n            \"v3LegacyAuthProviderCompatible\"\n        ],\n        mutationFn: n,\n        onError: (y)=>{\n            c({\n                redirectPath: y\n            });\n        },\n        meta: {\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useOnError\", u)\n        }\n    });\n    return e ? m : l;\n}\no(Re, \"useOnError\");\nvar Na = Re;\nvar yo = o(()=>{\n    let { isProvided: e } = xe(), { isProvided: t } = Ue();\n    return !!(t || e);\n}, \"useIsExistAuthentication\");\n\n\n\nvar fe = o(({ enabled: e, isLoading: t, interval: r, onInterval: s })=>{\n    let [n, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), { options: a } = ge(), { overtime: u } = a, c = r ?? u.interval, p = s ?? (u == null ? void 0 : u.onInterval), l = typeof e < \"u\" ? e : typeof u.enabled < \"u\" ? u.enabled : !0;\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let m;\n        return l && t && (m = setInterval(()=>{\n            i((y)=>y === void 0 ? c : y + c);\n        }, c)), ()=>{\n            typeof m < \"u\" && clearInterval(m), i(void 0);\n        };\n    }, [\n        t,\n        c,\n        l\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        p && n && p(n);\n    }, [\n        n\n    ]), {\n        elapsedTime: n\n    };\n}, \"useLoadingOvertime\");\nvar $t = o(({ resource: e, config: t, filters: r, hasPagination: s, pagination: n, sorters: i, queryOptions: a, successNotification: u, errorNotification: c, meta: p, metaData: l, liveMode: m, onLiveEvent: y, liveParams: d, dataProviderName: T, overtimeOptions: x } = {})=>{\n    let { resources: v, resource: f, identifier: P } = q(e), M = le(), Q = z(), g = ie(), { mutate: C } = Re({\n        v3LegacyAuthProviderCompatible: !!(g != null && g.isLegacy)\n    }), h = Ce(), D = ue(), { keys: A, preferLegacyKeys: E } = Z(), L = ee(P, T, v), U = I(p, l), w = I(r, t == null ? void 0 : t.filters), N = I(i, t == null ? void 0 : t.sort), b = I(s, t == null ? void 0 : t.hasPagination), F = Wt({\n        pagination: n,\n        configPagination: t == null ? void 0 : t.pagination,\n        hasPagination: b\n    }), V = F.mode === \"server\", G = D({\n        resource: f,\n        meta: U\n    }), W = {\n        meta: G,\n        metaData: G,\n        filters: w,\n        hasPagination: V,\n        pagination: F,\n        sorters: N,\n        config: {\n            ...t,\n            sort: N\n        }\n    }, K = (a == null ? void 0 : a.enabled) === void 0 || (a == null ? void 0 : a.enabled) === !0, { getList: j } = M(L);\n    Pt({\n        resource: P,\n        types: [\n            \"*\"\n        ],\n        params: {\n            meta: G,\n            metaData: G,\n            pagination: F,\n            hasPagination: V,\n            sort: N,\n            sorters: N,\n            filters: w,\n            subscriptionType: \"useList\",\n            ...d\n        },\n        channel: `resources/${f == null ? void 0 : f.name}`,\n        enabled: K,\n        liveMode: m,\n        onLiveEvent: y,\n        dataProviderName: L,\n        meta: {\n            ...p,\n            dataProviderName: T\n        }\n    });\n    let re = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: A().data(L).resource(P ?? \"\").action(\"list\").params({\n            ...U || {},\n            filters: w,\n            hasPagination: V,\n            ...V && {\n                pagination: F\n            },\n            ...i && {\n                sorters: i\n            },\n            ...(t == null ? void 0 : t.sort) && {\n                sort: t == null ? void 0 : t.sort\n            }\n        }).get(E),\n        queryFn: (R)=>{\n            let S = {\n                ...G,\n                queryContext: je(R)\n            };\n            return j({\n                resource: (f == null ? void 0 : f.name) ?? \"\",\n                pagination: F,\n                hasPagination: V,\n                filters: w,\n                sort: N,\n                sorters: N,\n                meta: S,\n                metaData: S\n            });\n        },\n        ...a,\n        enabled: typeof (a == null ? void 0 : a.enabled) < \"u\" ? a == null ? void 0 : a.enabled : !!(f != null && f.name),\n        select: (R)=>{\n            var X;\n            let S = R, { current: B, mode: H, pageSize: $ } = F;\n            return H === \"client\" && (S = {\n                ...S,\n                data: S.data.slice((B - 1) * $, B * $),\n                total: S.total\n            }), a != null && a.select ? (X = a == null ? void 0 : a.select) == null ? void 0 : X.call(a, S) : S;\n        },\n        onSuccess: (R)=>{\n            var B;\n            (B = a == null ? void 0 : a.onSuccess) == null || B.call(a, R);\n            let S = typeof u == \"function\" ? u(R, W, P) : u;\n            h(S);\n        },\n        onError: (R)=>{\n            var B;\n            C(R), (B = a == null ? void 0 : a.onError) == null || B.call(a, R);\n            let S = typeof c == \"function\" ? c(R, W, P) : c;\n            h(S, {\n                key: `${P}-useList-notification`,\n                message: Q(\"notifications.error\", {\n                    statusCode: R.statusCode\n                }, `Error (status code: ${R.statusCode})`),\n                description: R.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...a == null ? void 0 : a.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useList\", E, f == null ? void 0 : f.name)\n        }\n    }), { elapsedTime: te } = fe({\n        ...x,\n        isLoading: re.isFetching\n    });\n    return {\n        ...re,\n        overtime: {\n            elapsedTime: te\n        }\n    };\n}, \"useList\");\n\n\nvar zt = o(({ resource: e, id: t, queryOptions: r, successNotification: s, errorNotification: n, meta: i, metaData: a, liveMode: u, onLiveEvent: c, liveParams: p, dataProviderName: l, overtimeOptions: m })=>{\n    let { resources: y, resource: d, identifier: T } = q(e), x = le(), v = z(), f = ie(), { mutate: P } = Re({\n        v3LegacyAuthProviderCompatible: !!(f != null && f.isLegacy)\n    }), M = Ce(), Q = ue(), { keys: g, preferLegacyKeys: C } = Z(), h = I(i, a), D = ee(T, l, y), { getOne: A } = x(D), E = Q({\n        resource: d,\n        meta: h\n    });\n    Pt({\n        resource: T,\n        types: [\n            \"*\"\n        ],\n        channel: `resources/${d == null ? void 0 : d.name}`,\n        params: {\n            ids: t ? [\n                t\n            ] : [],\n            id: t,\n            meta: E,\n            metaData: E,\n            subscriptionType: \"useOne\",\n            ...p\n        },\n        enabled: typeof (r == null ? void 0 : r.enabled) < \"u\" ? r == null ? void 0 : r.enabled : typeof (d == null ? void 0 : d.name) < \"u\" && typeof t < \"u\",\n        liveMode: u,\n        onLiveEvent: c,\n        dataProviderName: D,\n        meta: {\n            ...i,\n            dataProviderName: l\n        }\n    });\n    let L = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: g().data(D).resource(T ?? \"\").action(\"one\").id(t ?? \"\").params({\n            ...h || {}\n        }).get(C),\n        queryFn: (w)=>A({\n                resource: (d == null ? void 0 : d.name) ?? \"\",\n                id: t,\n                meta: {\n                    ...E,\n                    queryContext: je(w)\n                },\n                metaData: {\n                    ...E,\n                    queryContext: je(w)\n                }\n            }),\n        ...r,\n        enabled: typeof (r == null ? void 0 : r.enabled) < \"u\" ? r == null ? void 0 : r.enabled : typeof t < \"u\",\n        onSuccess: (w)=>{\n            var b;\n            (b = r == null ? void 0 : r.onSuccess) == null || b.call(r, w);\n            let N = typeof s == \"function\" ? s(w, {\n                id: t,\n                ...E\n            }, T) : s;\n            M(N);\n        },\n        onError: (w)=>{\n            var b;\n            P(w), (b = r == null ? void 0 : r.onError) == null || b.call(r, w);\n            let N = typeof n == \"function\" ? n(w, {\n                id: t,\n                ...E\n            }, T) : n;\n            M(N, {\n                key: `${t}-${T}-getOne-notification`,\n                message: v(\"notifications.error\", {\n                    statusCode: w.statusCode\n                }, `Error (status code: ${w.statusCode})`),\n                description: w.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...r == null ? void 0 : r.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useOne\", C, d == null ? void 0 : d.name)\n        }\n    }), { elapsedTime: U } = fe({\n        ...m,\n        isLoading: L.isFetching\n    });\n    return {\n        ...L,\n        overtime: {\n            elapsedTime: U\n        }\n    };\n}, \"useOne\");\n\n\n\nvar go = o(({ resource: e, ids: t, queryOptions: r, successNotification: s, errorNotification: n, meta: i, metaData: a, liveMode: u, onLiveEvent: c, liveParams: p, dataProviderName: l, overtimeOptions: m })=>{\n    let { resources: y, resource: d, identifier: T } = q(e), x = le(), v = z(), f = ie(), { mutate: P } = Re({\n        v3LegacyAuthProviderCompatible: !!(f != null && f.isLegacy)\n    }), M = Ce(), Q = ue(), { keys: g, preferLegacyKeys: C } = Z(), h = I(i, a), D = ee(T, l, y), A = (r == null ? void 0 : r.enabled) === void 0 || (r == null ? void 0 : r.enabled) === !0, { getMany: E, getOne: L } = x(D), U = Q({\n        resource: d,\n        meta: h\n    }), w = Array.isArray(t), N = !!(d != null && d.name), b = (r == null ? void 0 : r.enabled) === !0;\n    warn_once__WEBPACK_IMPORTED_MODULE_1__(!w && !b, za(t, d == null ? void 0 : d.name)), warn_once__WEBPACK_IMPORTED_MODULE_1__(!N && !b, _a()), Pt({\n        resource: T,\n        types: [\n            \"*\"\n        ],\n        params: {\n            ids: t ?? [],\n            meta: U,\n            metaData: U,\n            subscriptionType: \"useMany\",\n            ...p\n        },\n        channel: `resources/${(d == null ? void 0 : d.name) ?? \"\"}`,\n        enabled: A,\n        liveMode: u,\n        onLiveEvent: c,\n        dataProviderName: D,\n        meta: {\n            ...i,\n            dataProviderName: l\n        }\n    });\n    let F = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: g().data(D).resource(T).action(\"many\").ids(...t ?? []).params({\n            ...h || {}\n        }).get(C),\n        queryFn: (G)=>{\n            let W = {\n                ...U,\n                queryContext: je(G)\n            };\n            return E ? E({\n                resource: d == null ? void 0 : d.name,\n                ids: t,\n                meta: W,\n                metaData: W\n            }) : lt(t.map((K)=>L({\n                    resource: d == null ? void 0 : d.name,\n                    id: K,\n                    meta: W,\n                    metaData: W\n                })));\n        },\n        enabled: w && N,\n        ...r,\n        onSuccess: (G)=>{\n            var K;\n            (K = r == null ? void 0 : r.onSuccess) == null || K.call(r, G);\n            let W = typeof s == \"function\" ? s(G, t, T) : s;\n            M(W);\n        },\n        onError: (G)=>{\n            var K;\n            P(G), (K = r == null ? void 0 : r.onError) == null || K.call(r, G);\n            let W = typeof n == \"function\" ? n(G, t, T) : n;\n            M(W, {\n                key: `${t[0]}-${T}-getMany-notification`,\n                message: v(\"notifications.error\", {\n                    statusCode: G.statusCode\n                }, `Error (status code: ${G.statusCode})`),\n                description: G.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...r == null ? void 0 : r.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useMany\", C, d == null ? void 0 : d.name)\n        }\n    }), { elapsedTime: V } = fe({\n        ...m,\n        isLoading: F.isFetching\n    });\n    return {\n        ...F,\n        overtime: {\n            elapsedTime: V\n        }\n    };\n}, \"useMany\"), za = o((e, t)=>`[useMany]: Missing \"ids\" prop. Expected an array of ids, but got \"${typeof e}\". Resource: \"${t}\"\n\nSee https://refine.dev/docs/data/hooks/use-many/#ids-`, \"idsWarningMessage\"), _a = o(()=>`[useMany]: Missing \"resource\" prop. Expected a string, but got undefined.\n\nSee https://refine.dev/docs/data/hooks/use-many/#resource-`, \"resourceWarningMessage\");\n\n\nvar Os = ((s)=>(s.ADD = \"ADD\", s.REMOVE = \"REMOVE\", s.DECREASE_NOTIFICATION_SECOND = \"DECREASE_NOTIFICATION_SECOND\", s))(Os || {});\nvar To = o(({ id: e, resource: t, values: r, dataProviderName: s, successNotification: n, errorNotification: i, meta: a, metaData: u, mutationMode: c, undoableTimeout: p, onCancel: l, optimisticUpdateMap: m, invalidates: y, mutationOptions: d, overtimeOptions: T } = {})=>{\n    let { resources: x, select: v } = q(), f = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), P = le(), { mutationMode: M, undoableTimeout: Q } = _e(), g = z(), C = ie(), { mutate: h } = Re({\n        v3LegacyAuthProviderCompatible: !!(C != null && C.isLegacy)\n    }), D = Ye(), { log: A } = Je(), { notificationDispatch: E } = ut(), L = Ce(), U = ke(), w = ue(), { options: { textTransformers: N } } = ge(), { keys: b, preferLegacyKeys: F } = Z(), V = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ id: R = e, values: S = r, resource: B = t, mutationMode: H = c, undoableTimeout: $ = p, onCancel: X = l, meta: ne = a, metaData: Y = u, dataProviderName: O = s })=>{\n            if (typeof R > \"u\") throw jt;\n            if (!S) throw Ir;\n            if (!B) throw _t;\n            let { resource: _, identifier: ae } = v(B), J = w({\n                resource: _,\n                meta: I(ne, Y)\n            }), we = H ?? M, ye = $ ?? Q;\n            return we !== \"undoable\" ? P(ee(ae, O, x)).update({\n                resource: _.name,\n                id: R,\n                variables: S,\n                meta: J,\n                metaData: J\n            }) : new Promise((Ne, se)=>{\n                let me = o(()=>{\n                    P(ee(ae, O, x)).update({\n                        resource: _.name,\n                        id: R,\n                        variables: S,\n                        meta: J,\n                        metaData: J\n                    }).then((ve)=>Ne(ve)).catch((ve)=>se(ve));\n                }, \"doMutation\"), ce = o(()=>{\n                    se({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                X && X(ce), E({\n                    type: \"ADD\",\n                    payload: {\n                        id: R,\n                        resource: ae,\n                        cancelMutation: ce,\n                        doMutation: me,\n                        seconds: ye,\n                        isSilent: !!X\n                    }\n                });\n            });\n        },\n        onMutate: async ({ resource: R = t, id: S = e, mutationMode: B = c, values: H = r, dataProviderName: $ = s, meta: X = a, metaData: ne = u, optimisticUpdateMap: Y = m ?? {\n            list: !0,\n            many: !0,\n            detail: !0\n        } })=>{\n            if (typeof S > \"u\") throw jt;\n            if (!H) throw Ir;\n            if (!R) throw _t;\n            let { identifier: O } = v(R), { gqlMutation: _, gqlQuery: ae, ...J } = I(X, ne) ?? {}, we = dt(F)(O, ee(O, $, x), J), ye = b().data(ee(O, $, x)).resource(O), Ve = f.getQueriesData(ye.get(F)), Ne = B ?? M;\n            return await f.cancelQueries(ye.get(F), void 0, {\n                silent: !0\n            }), Ne !== \"pessimistic\" && (Y.list && f.setQueriesData(ye.action(\"list\").params(J ?? {}).get(F), (se)=>{\n                if (typeof Y.list == \"function\") return Y.list(se, H, S);\n                if (!se) return null;\n                let me = se.data.map((ce)=>{\n                    var ve;\n                    return ((ve = ce.id) == null ? void 0 : ve.toString()) === (S == null ? void 0 : S.toString()) ? {\n                        id: S,\n                        ...ce,\n                        ...H\n                    } : ce;\n                });\n                return {\n                    ...se,\n                    data: me\n                };\n            }), Y.many && f.setQueriesData(ye.action(\"many\").get(F), (se)=>{\n                if (typeof Y.many == \"function\") return Y.many(se, H, S);\n                if (!se) return null;\n                let me = se.data.map((ce)=>{\n                    var ve;\n                    return ((ve = ce.id) == null ? void 0 : ve.toString()) === (S == null ? void 0 : S.toString()) && (ce = {\n                        id: S,\n                        ...ce,\n                        ...H\n                    }), ce;\n                });\n                return {\n                    ...se,\n                    data: me\n                };\n            }), Y.detail && f.setQueriesData(ye.action(\"one\").id(S).params(J ?? {}).get(F), (se)=>typeof Y.detail == \"function\" ? Y.detail(se, H, S) : se ? {\n                    ...se,\n                    data: {\n                        ...se.data,\n                        ...H\n                    }\n                } : null)), {\n                previousQueries: Ve,\n                queryKey: we\n            };\n        },\n        onSettled: (R, S, B, H)=>{\n            var _;\n            let { id: $ = e, resource: X = t, dataProviderName: ne = s, invalidates: Y = y ?? [\n                \"list\",\n                \"many\",\n                \"detail\"\n            ] } = B;\n            if (typeof $ > \"u\") throw jt;\n            if (!X) throw _t;\n            let { identifier: O } = v(X);\n            U({\n                resource: O,\n                dataProviderName: ee(O, ne, x),\n                invalidates: Y,\n                id: $\n            }), E({\n                type: \"REMOVE\",\n                payload: {\n                    id: $,\n                    resource: O\n                }\n            }), (_ = d == null ? void 0 : d.onSettled) == null || _.call(d, R, S, B, H);\n        },\n        onSuccess: (R, S, B)=>{\n            var Ke, Ct;\n            let { id: H = e, resource: $ = t, successNotification: X = n, dataProviderName: ne = s, values: Y = r, meta: O = a, metaData: _ = u } = S;\n            if (typeof H > \"u\") throw jt;\n            if (!Y) throw Ir;\n            if (!$) throw _t;\n            let { resource: ae, identifier: J } = v($), we = N.singular(J), ye = ee(J, ne, x), Ve = w({\n                resource: ae,\n                meta: I(O, _)\n            }), Ne = typeof X == \"function\" ? X(R, {\n                id: H,\n                values: Y\n            }, J) : X;\n            L(Ne, {\n                key: `${H}-${J}-notification`,\n                description: g(\"notifications.success\", \"Successful\"),\n                message: g(\"notifications.editSuccess\", {\n                    resource: g(`${J}.${J}`, we)\n                }, `Successfully updated ${we}`),\n                type: \"success\"\n            }), D == null || D({\n                channel: `resources/${ae.name}`,\n                type: \"updated\",\n                payload: {\n                    ids: (Ke = R.data) != null && Ke.id ? [\n                        R.data.id\n                    ] : void 0\n                },\n                date: new Date,\n                meta: {\n                    ...Ve,\n                    dataProviderName: ye\n                }\n            });\n            let se;\n            if (B) {\n                let Ge = f.getQueryData(B.queryKey.detail(H));\n                se = Object.keys(Y || {}).reduce((Tt, xt)=>{\n                    var bt;\n                    return Tt[xt] = (bt = Ge == null ? void 0 : Ge.data) == null ? void 0 : bt[xt], Tt;\n                }, {});\n            }\n            let { fields: me, operation: ce, variables: ve, ...rt } = Ve || {};\n            A == null || A.mutate({\n                action: \"update\",\n                resource: ae.name,\n                data: Y,\n                previousData: se,\n                meta: {\n                    ...rt,\n                    dataProviderName: ye,\n                    id: H\n                }\n            }), (Ct = d == null ? void 0 : d.onSuccess) == null || Ct.call(d, R, S, B);\n        },\n        onError: (R, S, B)=>{\n            var O;\n            let { id: H = e, resource: $ = t, errorNotification: X = i, values: ne = r } = S;\n            if (typeof H > \"u\") throw jt;\n            if (!ne) throw Ir;\n            if (!$) throw _t;\n            let { identifier: Y } = v($);\n            if (B) for (let _ of B.previousQueries)f.setQueryData(_[0], _[1]);\n            if (R.message !== \"mutationCancelled\") {\n                h == null || h(R);\n                let _ = N.singular(Y), ae = typeof X == \"function\" ? X(R, {\n                    id: H,\n                    values: ne\n                }, Y) : X;\n                L(ae, {\n                    key: `${H}-${Y}-notification`,\n                    message: g(\"notifications.editError\", {\n                        resource: g(`${Y}.${Y}`, _),\n                        statusCode: R.statusCode\n                    }, `Error when updating ${_} (status code: ${R.statusCode})`),\n                    description: R.message,\n                    type: \"error\"\n                });\n            }\n            (O = d == null ? void 0 : d.onError) == null || O.call(d, R, S, B);\n        },\n        mutationKey: b().data().mutation(\"update\").get(F),\n        ...d,\n        meta: {\n            ...d == null ? void 0 : d.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdate\", F)\n        }\n    }), { mutate: G, mutateAsync: W, ...K } = V, { elapsedTime: j } = fe({\n        ...T,\n        isLoading: K.isLoading\n    });\n    return {\n        ...K,\n        mutate: o((R, S)=>G(R || {}, S), \"handleMutation\"),\n        mutateAsync: o((R, S)=>W(R || {}, S), \"handleMutateAsync\"),\n        overtime: {\n            elapsedTime: j\n        }\n    };\n}, \"useUpdate\"), _t = new Error(\"[useUpdate]: `resource` is not defined or not matched but is required\"), jt = new Error(\"[useUpdate]: `id` is not defined but is required in edit and clone actions\"), Ir = new Error(\"[useUpdate]: `values` is not provided but is required\");\n\n\nvar Xt = o(({ resource: e, values: t, dataProviderName: r, successNotification: s, errorNotification: n, invalidates: i, meta: a, metaData: u, mutationOptions: c, overtimeOptions: p } = {})=>{\n    let l = ie(), { mutate: m } = Re({\n        v3LegacyAuthProviderCompatible: !!(l != null && l.isLegacy)\n    }), y = le(), d = ke(), { resources: T, select: x } = q(), v = z(), f = Ye(), { log: P } = Je(), M = Ce(), Q = ue(), { options: { textTransformers: g } } = ge(), { keys: C, preferLegacyKeys: h } = Z(), D = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ resource: b = e, values: F = t, meta: V = a, metaData: G = u, dataProviderName: W = r })=>{\n            if (!F) throw ho;\n            if (!b) throw xo;\n            let { resource: K, identifier: j } = x(b), re = Q({\n                resource: K,\n                meta: I(V, G)\n            });\n            return y(ee(j, W, T)).create({\n                resource: K.name,\n                variables: F,\n                meta: re,\n                metaData: re\n            });\n        },\n        onSuccess: (b, F, V)=>{\n            var J, we, ye;\n            let { resource: G = e, successNotification: W = s, dataProviderName: K = r, invalidates: j = i ?? [\n                \"list\",\n                \"many\"\n            ], values: re = t, meta: te = a, metaData: R = u } = F;\n            if (!re) throw ho;\n            if (!G) throw xo;\n            let { resource: S, identifier: B } = x(G), H = g.singular(B), $ = ee(B, K, T), X = Q({\n                resource: S,\n                meta: I(te, R)\n            }), ne = typeof W == \"function\" ? W(b, re, B) : W;\n            M(ne, {\n                key: `create-${B}-notification`,\n                message: v(\"notifications.createSuccess\", {\n                    resource: v(`${B}.${B}`, H)\n                }, `Successfully created ${H}`),\n                description: v(\"notifications.success\", \"Success\"),\n                type: \"success\"\n            }), d({\n                resource: B,\n                dataProviderName: $,\n                invalidates: j\n            }), f == null || f({\n                channel: `resources/${S.name}`,\n                type: \"created\",\n                payload: {\n                    ids: (J = b == null ? void 0 : b.data) != null && J.id ? [\n                        b.data.id\n                    ] : void 0\n                },\n                date: new Date,\n                meta: {\n                    ...X,\n                    dataProviderName: $\n                }\n            });\n            let { fields: Y, operation: O, variables: _, ...ae } = X || {};\n            P == null || P.mutate({\n                action: \"create\",\n                resource: S.name,\n                data: re,\n                meta: {\n                    ...ae,\n                    dataProviderName: $,\n                    id: ((we = b == null ? void 0 : b.data) == null ? void 0 : we.id) ?? void 0\n                }\n            }), (ye = c == null ? void 0 : c.onSuccess) == null || ye.call(c, b, F, V);\n        },\n        onError: (b, F, V)=>{\n            var R;\n            let { resource: G = e, errorNotification: W = n, values: K = t } = F;\n            if (!K) throw ho;\n            if (!G) throw xo;\n            m(b);\n            let { identifier: j } = x(G), re = g.singular(j), te = typeof W == \"function\" ? W(b, K, j) : W;\n            M(te, {\n                key: `create-${j}-notification`,\n                description: b.message,\n                message: v(\"notifications.createError\", {\n                    resource: v(`${j}.${j}`, re),\n                    statusCode: b.statusCode\n                }, `There was an error creating ${re} (status code: ${b.statusCode})`),\n                type: \"error\"\n            }), (R = c == null ? void 0 : c.onError) == null || R.call(c, b, F, V);\n        },\n        mutationKey: C().data().mutation(\"create\").get(h),\n        ...c,\n        meta: {\n            ...c == null ? void 0 : c.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCreate\", h)\n        }\n    }), { mutate: A, mutateAsync: E, ...L } = D, { elapsedTime: U } = fe({\n        ...p,\n        isLoading: L.isLoading\n    });\n    return {\n        ...L,\n        mutate: o((b, F)=>A(b || {}, F), \"handleMutation\"),\n        mutateAsync: o((b, F)=>E(b || {}, F), \"handleMutateAsync\"),\n        overtime: {\n            elapsedTime: U\n        }\n    };\n}, \"useCreate\"), xo = new Error(\"[useCreate]: `resource` is not defined or not matched but is required\"), ho = new Error(\"[useCreate]: `values` is not provided but is required\");\n\n\nvar Po = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let r = ie(), { mutate: s } = Re({\n        v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy)\n    }), n = le(), { resources: i, select: a } = q(), u = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), { mutationMode: c, undoableTimeout: p } = _e(), { notificationDispatch: l } = ut(), m = z(), y = Ye(), { log: d } = Je(), T = Ce(), x = ke(), v = ue(), { options: { textTransformers: f } } = ge(), { keys: P, preferLegacyKeys: M } = Z(), Q = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ id: C, mutationMode: h, undoableTimeout: D, resource: A, onCancel: E, meta: L, metaData: U, dataProviderName: w, values: N })=>{\n            let { resource: b, identifier: F } = a(A), V = v({\n                resource: b,\n                meta: I(L, U)\n            }), G = h ?? c, W = D ?? p;\n            return G !== \"undoable\" ? n(ee(F, w, i)).deleteOne({\n                resource: b.name,\n                id: C,\n                meta: V,\n                metaData: V,\n                variables: N\n            }) : new Promise((j, re)=>{\n                let te = o(()=>{\n                    n(ee(F, w, i)).deleteOne({\n                        resource: b.name,\n                        id: C,\n                        meta: V,\n                        metaData: V,\n                        variables: N\n                    }).then((S)=>j(S)).catch((S)=>re(S));\n                }, \"doMutation\"), R = o(()=>{\n                    re({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                E && E(R), l({\n                    type: \"ADD\",\n                    payload: {\n                        id: C,\n                        resource: F,\n                        cancelMutation: R,\n                        doMutation: te,\n                        seconds: W,\n                        isSilent: !!E\n                    }\n                });\n            });\n        },\n        onMutate: async ({ id: C, resource: h, mutationMode: D, dataProviderName: A, meta: E, metaData: L })=>{\n            let { identifier: U } = a(h), { gqlMutation: w, gqlQuery: N, ...b } = I(E, L) ?? {}, F = dt(M)(U, ee(U, A, i), b), V = P().data(ee(U, A, i)).resource(U), G = D ?? c;\n            await u.cancelQueries(V.get(M), void 0, {\n                silent: !0\n            });\n            let W = u.getQueriesData(V.get(M));\n            return G !== \"pessimistic\" && (u.setQueriesData(V.action(\"list\").params(b ?? {}).get(M), (K)=>K ? {\n                    data: K.data.filter((re)=>{\n                        var te;\n                        return ((te = re.id) == null ? void 0 : te.toString()) !== C.toString();\n                    }),\n                    total: K.total - 1\n                } : null), u.setQueriesData(V.action(\"many\").get(M), (K)=>{\n                if (!K) return null;\n                let j = K.data.filter((re)=>{\n                    var te;\n                    return ((te = re.id) == null ? void 0 : te.toString()) !== (C == null ? void 0 : C.toString());\n                });\n                return {\n                    ...K,\n                    data: j\n                };\n            })), {\n                previousQueries: W,\n                queryKey: F\n            };\n        },\n        onSettled: (C, h, { id: D, resource: A, dataProviderName: E, invalidates: L = [\n            \"list\",\n            \"many\"\n        ] })=>{\n            let { identifier: U } = a(A);\n            x({\n                resource: U,\n                dataProviderName: ee(U, E, i),\n                invalidates: L\n            }), l({\n                type: \"REMOVE\",\n                payload: {\n                    id: D,\n                    resource: U\n                }\n            });\n        },\n        onSuccess: (C, { id: h, resource: D, successNotification: A, dataProviderName: E, meta: L, metaData: U }, w)=>{\n            let { resource: N, identifier: b } = a(D), F = f.singular(b), V = ee(b, E, i), G = v({\n                resource: N,\n                meta: I(L, U)\n            });\n            u.removeQueries(w == null ? void 0 : w.queryKey.detail(h));\n            let W = typeof A == \"function\" ? A(C, h, b) : A;\n            T(W, {\n                key: `${h}-${b}-notification`,\n                description: m(\"notifications.success\", \"Success\"),\n                message: m(\"notifications.deleteSuccess\", {\n                    resource: m(`${b}.${b}`, F)\n                }, `Successfully deleted a ${F}`),\n                type: \"success\"\n            }), y == null || y({\n                channel: `resources/${N.name}`,\n                type: \"deleted\",\n                payload: {\n                    ids: [\n                        h\n                    ]\n                },\n                date: new Date,\n                meta: {\n                    ...G,\n                    dataProviderName: V\n                }\n            });\n            let { fields: K, operation: j, variables: re, ...te } = G || {};\n            d == null || d.mutate({\n                action: \"delete\",\n                resource: N.name,\n                meta: {\n                    ...te,\n                    dataProviderName: V,\n                    id: h\n                }\n            }), u.removeQueries(w == null ? void 0 : w.queryKey.detail(h));\n        },\n        onError: (C, { id: h, resource: D, errorNotification: A }, E)=>{\n            let { identifier: L } = a(D);\n            if (E) for (let U of E.previousQueries)u.setQueryData(U[0], U[1]);\n            if (C.message !== \"mutationCancelled\") {\n                s(C);\n                let U = f.singular(L), w = typeof A == \"function\" ? A(C, h, L) : A;\n                T(w, {\n                    key: `${h}-${L}-notification`,\n                    message: m(\"notifications.deleteError\", {\n                        resource: U,\n                        statusCode: C.statusCode\n                    }, `Error (status code: ${C.statusCode})`),\n                    description: C.message,\n                    type: \"error\"\n                });\n            }\n        },\n        mutationKey: P().data().mutation(\"delete\").get(M),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useDelete\", M)\n        }\n    }), { elapsedTime: g } = fe({\n        ...t,\n        isLoading: Q.isLoading\n    });\n    return {\n        ...Q,\n        overtime: {\n            elapsedTime: g\n        }\n    };\n}, \"useDelete\");\n\n\nvar bo = o(({ resource: e, values: t, dataProviderName: r, successNotification: s, errorNotification: n, meta: i, metaData: a, invalidates: u, mutationOptions: c, overtimeOptions: p } = {})=>{\n    let l = le(), { resources: m, select: y } = q(), d = z(), T = Ye(), x = Ce(), v = ke(), { log: f } = Je(), P = ue(), { options: { textTransformers: M } } = ge(), { keys: Q, preferLegacyKeys: g } = Z(), C = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ resource: w = e, values: N = t, meta: b = i, metaData: F = a, dataProviderName: V = r })=>{\n            if (!N) throw Co;\n            if (!w) throw Ro;\n            let { resource: G, identifier: W } = y(w), K = P({\n                resource: G,\n                meta: I(b, F)\n            }), j = l(ee(W, V, m));\n            return j.createMany ? j.createMany({\n                resource: G.name,\n                variables: N,\n                meta: K,\n                metaData: K\n            }) : lt(N.map((re)=>j.create({\n                    resource: G.name,\n                    variables: re,\n                    meta: K,\n                    metaData: K\n                })));\n        },\n        onSuccess: (w, N, b)=>{\n            var ae;\n            let { resource: F = e, successNotification: V = s, dataProviderName: G = r, invalidates: W = u ?? [\n                \"list\",\n                \"many\"\n            ], values: K = t, meta: j = i, metaData: re = a } = N;\n            if (!K) throw Co;\n            if (!F) throw Ro;\n            let { resource: te, identifier: R } = y(F), S = M.plural(R), B = ee(R, G, m), H = P({\n                resource: te,\n                meta: I(j, re)\n            }), $ = typeof V == \"function\" ? V(w, K, R) : V;\n            x($, {\n                key: `createMany-${R}-notification`,\n                message: d(\"notifications.createSuccess\", {\n                    resource: d(`${R}.${R}`, R)\n                }, `Successfully created ${S}`),\n                description: d(\"notifications.success\", \"Success\"),\n                type: \"success\"\n            }), v({\n                resource: R,\n                dataProviderName: B,\n                invalidates: W\n            });\n            let X = w == null ? void 0 : w.data.filter((J)=>(J == null ? void 0 : J.id) !== void 0).map((J)=>J.id);\n            T == null || T({\n                channel: `resources/${te.name}`,\n                type: \"created\",\n                payload: {\n                    ids: X\n                },\n                date: new Date,\n                meta: {\n                    ...H,\n                    dataProviderName: B\n                }\n            });\n            let { fields: ne, operation: Y, variables: O, ..._ } = H || {};\n            f == null || f.mutate({\n                action: \"createMany\",\n                resource: te.name,\n                data: K,\n                meta: {\n                    dataProviderName: B,\n                    ids: X,\n                    ..._\n                }\n            }), (ae = c == null ? void 0 : c.onSuccess) == null || ae.call(c, w, N, b);\n        },\n        onError: (w, N, b)=>{\n            var j;\n            let { resource: F = e, errorNotification: V = n, values: G = t } = N;\n            if (!G) throw Co;\n            if (!F) throw Ro;\n            let { identifier: W } = y(F), K = typeof V == \"function\" ? V(w, G, W) : V;\n            x(K, {\n                key: `createMany-${W}-notification`,\n                description: w.message,\n                message: d(\"notifications.createError\", {\n                    resource: d(`${W}.${W}`, W),\n                    statusCode: w.statusCode\n                }, `There was an error creating ${W} (status code: ${w.statusCode}`),\n                type: \"error\"\n            }), (j = c == null ? void 0 : c.onError) == null || j.call(c, w, N, b);\n        },\n        mutationKey: Q().data().mutation(\"createMany\").get(g),\n        ...c,\n        meta: {\n            ...c == null ? void 0 : c.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCreateMany\", g)\n        }\n    }), { mutate: h, mutateAsync: D, ...A } = C, { elapsedTime: E } = fe({\n        ...p,\n        isLoading: A.isLoading\n    });\n    return {\n        ...A,\n        mutate: o((w, N)=>h(w || {}, N), \"handleMutation\"),\n        mutateAsync: o((w, N)=>D(w || {}, N), \"handleMutateAsync\"),\n        overtime: {\n            elapsedTime: E\n        }\n    };\n}, \"useCreateMany\"), Ro = new Error(\"[useCreateMany]: `resource` is not defined or not matched but is required\"), Co = new Error(\"[useCreateMany]: `values` is not provided but is required\");\n\n\nvar ii = o(({ ids: e, resource: t, values: r, dataProviderName: s, successNotification: n, errorNotification: i, meta: a, metaData: u, mutationMode: c, undoableTimeout: p, onCancel: l, optimisticUpdateMap: m, invalidates: y, mutationOptions: d, overtimeOptions: T } = {})=>{\n    let { resources: x, select: v } = q(), f = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), P = le(), M = z(), { mutationMode: Q, undoableTimeout: g } = _e(), C = ie(), { mutate: h } = Re({\n        v3LegacyAuthProviderCompatible: !!(C != null && C.isLegacy)\n    }), { notificationDispatch: D } = ut(), A = Ye(), E = Ce(), L = ke(), { log: U } = Je(), w = ue(), { options: { textTransformers: N } } = ge(), { keys: b, preferLegacyKeys: F } = Z(), V = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ ids: R = e, values: S = r, resource: B = t, onCancel: H = l, mutationMode: $ = c, undoableTimeout: X = p, meta: ne = a, metaData: Y = u, dataProviderName: O = s })=>{\n            if (!R) throw Yt;\n            if (!S) throw Sr;\n            if (!B) throw Zt;\n            let { resource: _, identifier: ae } = v(B), J = w({\n                resource: _,\n                meta: I(ne, Y)\n            }), we = $ ?? Q, ye = X ?? g, Ve = P(ee(ae, O, x)), Ne = o(()=>Ve.updateMany ? Ve.updateMany({\n                    resource: _.name,\n                    ids: R,\n                    variables: S,\n                    meta: J,\n                    metaData: J\n                }) : lt(R.map((me)=>Ve.update({\n                        resource: _.name,\n                        id: me,\n                        variables: S,\n                        meta: J,\n                        metaData: J\n                    }))), \"mutationFn\");\n            return we !== \"undoable\" ? Ne() : new Promise((me, ce)=>{\n                let ve = o(()=>{\n                    Ne().then((Ke)=>me(Ke)).catch((Ke)=>ce(Ke));\n                }, \"doMutation\"), rt = o(()=>{\n                    ce({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                H && H(rt), D({\n                    type: \"ADD\",\n                    payload: {\n                        id: R,\n                        resource: ae,\n                        cancelMutation: rt,\n                        doMutation: ve,\n                        seconds: ye,\n                        isSilent: !!H\n                    }\n                });\n            });\n        },\n        onMutate: async ({ resource: R = t, ids: S = e, values: B = r, mutationMode: H = c, dataProviderName: $ = s, meta: X = a, metaData: ne = u, optimisticUpdateMap: Y = m ?? {\n            list: !0,\n            many: !0,\n            detail: !0\n        } })=>{\n            if (!S) throw Yt;\n            if (!B) throw Sr;\n            if (!R) throw Zt;\n            let { identifier: O } = v(R), { gqlMutation: _, gqlQuery: ae, ...J } = I(X, ne) ?? {}, we = dt(F)(O, ee(O, $, x), J), ye = b().data(ee(O, $, x)).resource(O), Ve = H ?? Q;\n            await f.cancelQueries(ye.get(F), void 0, {\n                silent: !0\n            });\n            let Ne = f.getQueriesData(ye.get(F));\n            if (Ve !== \"pessimistic\" && (Y.list && f.setQueriesData(ye.action(\"list\").params(J ?? {}).get(F), (se)=>{\n                if (typeof Y.list == \"function\") return Y.list(se, B, S);\n                if (!se) return null;\n                let me = se.data.map((ce)=>ce.id !== void 0 && S.filter((ve)=>ve !== void 0).map(String).includes(ce.id.toString()) ? {\n                        ...ce,\n                        ...B\n                    } : ce);\n                return {\n                    ...se,\n                    data: me\n                };\n            }), Y.many && f.setQueriesData(ye.action(\"many\").get(F), (se)=>{\n                if (typeof Y.many == \"function\") return Y.many(se, B, S);\n                if (!se) return null;\n                let me = se.data.map((ce)=>ce.id !== void 0 && S.filter((ve)=>ve !== void 0).map(String).includes(ce.id.toString()) ? {\n                        ...ce,\n                        ...B\n                    } : ce);\n                return {\n                    ...se,\n                    data: me\n                };\n            }), Y.detail)) for (let se of S)f.setQueriesData(ye.action(\"one\").id(se).params(J ?? {}).get(F), (me)=>{\n                if (typeof Y.detail == \"function\") return Y.detail(me, B, se);\n                if (!me) return null;\n                let ce = {\n                    ...me.data,\n                    ...B\n                };\n                return {\n                    ...me,\n                    data: ce\n                };\n            });\n            return {\n                previousQueries: Ne,\n                queryKey: we\n            };\n        },\n        onSettled: (R, S, B, H)=>{\n            var _;\n            let { ids: $ = e, resource: X = t, dataProviderName: ne = s, invalidates: Y = y } = B;\n            if (!$) throw Yt;\n            if (!X) throw Zt;\n            let { identifier: O } = v(X);\n            L({\n                resource: O,\n                invalidates: Y ?? [\n                    \"list\",\n                    \"many\"\n                ],\n                dataProviderName: ee(O, ne, x)\n            }), $.forEach((ae)=>L({\n                    resource: O,\n                    invalidates: Y ?? [\n                        \"detail\"\n                    ],\n                    dataProviderName: ee(O, ne, x),\n                    id: ae\n                })), D({\n                type: \"REMOVE\",\n                payload: {\n                    id: $,\n                    resource: O\n                }\n            }), (_ = d == null ? void 0 : d.onSettled) == null || _.call(d, R, S, B, H);\n        },\n        onSuccess: (R, S, B)=>{\n            var Ke;\n            let { ids: H = e, resource: $ = t, values: X = r, meta: ne = a, metaData: Y = u, dataProviderName: O = s, successNotification: _ = n } = S;\n            if (!H) throw Yt;\n            if (!X) throw Sr;\n            if (!$) throw Zt;\n            let { resource: ae, identifier: J } = v($), we = N.singular(J), ye = ee(J, O, x), Ve = w({\n                resource: ae,\n                meta: I(ne, Y)\n            }), Ne = typeof _ == \"function\" ? _(R, {\n                ids: H,\n                values: X\n            }, J) : _;\n            E(Ne, {\n                key: `${H}-${J}-notification`,\n                description: M(\"notifications.success\", \"Successful\"),\n                message: M(\"notifications.editSuccess\", {\n                    resource: M(`${J}.${J}`, J)\n                }, `Successfully updated ${we}`),\n                type: \"success\"\n            }), A == null || A({\n                channel: `resources/${ae.name}`,\n                type: \"updated\",\n                payload: {\n                    ids: H.map(String)\n                },\n                date: new Date,\n                meta: {\n                    ...Ve,\n                    dataProviderName: ye\n                }\n            });\n            let se = [];\n            B && H.forEach((Ct)=>{\n                let Ge = f.getQueryData(B.queryKey.detail(Ct));\n                se.push(Object.keys(X || {}).reduce((Tt, xt)=>{\n                    var bt;\n                    return Tt[xt] = (bt = Ge == null ? void 0 : Ge.data) == null ? void 0 : bt[xt], Tt;\n                }, {}));\n            });\n            let { fields: me, operation: ce, variables: ve, ...rt } = Ve || {};\n            U == null || U.mutate({\n                action: \"updateMany\",\n                resource: ae.name,\n                data: X,\n                previousData: se,\n                meta: {\n                    ...rt,\n                    dataProviderName: ye,\n                    ids: H\n                }\n            }), (Ke = d == null ? void 0 : d.onSuccess) == null || Ke.call(d, R, S, B);\n        },\n        onError: (R, S, B)=>{\n            var O;\n            let { ids: H = e, resource: $ = t, errorNotification: X = i, values: ne = r } = S;\n            if (!H) throw Yt;\n            if (!ne) throw Sr;\n            if (!$) throw Zt;\n            let { identifier: Y } = v($);\n            if (B) for (let _ of B.previousQueries)f.setQueryData(_[0], _[1]);\n            if (R.message !== \"mutationCancelled\") {\n                h == null || h(R);\n                let _ = N.singular(Y), ae = typeof X == \"function\" ? X(R, {\n                    ids: H,\n                    values: ne\n                }, Y) : X;\n                E(ae, {\n                    key: `${H}-${Y}-updateMany-error-notification`,\n                    message: M(\"notifications.editError\", {\n                        resource: _,\n                        statusCode: R.statusCode\n                    }, `Error when updating ${_} (status code: ${R.statusCode})`),\n                    description: R.message,\n                    type: \"error\"\n                });\n            }\n            (O = d == null ? void 0 : d.onError) == null || O.call(d, R, S, B);\n        },\n        mutationKey: b().data().mutation(\"updateMany\").get(F),\n        ...d,\n        meta: {\n            ...d == null ? void 0 : d.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useUpdateMany\", F)\n        }\n    }), { mutate: G, mutateAsync: W, ...K } = V, { elapsedTime: j } = fe({\n        ...T,\n        isLoading: K.isLoading\n    });\n    return {\n        ...K,\n        mutate: o((R, S)=>G(R || {}, S), \"handleMutation\"),\n        mutateAsync: o((R, S)=>W(R || {}, S), \"handleMutateAsync\"),\n        overtime: {\n            elapsedTime: j\n        }\n    };\n}, \"useUpdateMany\"), Zt = new Error(\"[useUpdateMany]: `resource` is not defined or not matched but is required\"), Yt = new Error(\"[useUpdateMany]: `id` is not defined but is required in edit and clone actions\"), Sr = new Error(\"[useUpdateMany]: `values` is not provided but is required\");\n\n\nvar di = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let r = ie(), { mutate: s } = Re({\n        v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy)\n    }), { mutationMode: n, undoableTimeout: i } = _e(), a = le(), { notificationDispatch: u } = ut(), c = z(), p = Ye(), l = Ce(), m = ke(), { log: y } = Je(), { resources: d, select: T } = q(), x = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), v = ue(), { options: { textTransformers: f } } = ge(), { keys: P, preferLegacyKeys: M } = Z(), Q = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)({\n        mutationFn: ({ resource: C, ids: h, mutationMode: D, undoableTimeout: A, onCancel: E, meta: L, metaData: U, dataProviderName: w, values: N })=>{\n            let { resource: b, identifier: F } = T(C), V = v({\n                resource: b,\n                meta: I(L, U)\n            }), G = D ?? n, W = A ?? i, K = a(ee(F, w, d)), j = o(()=>K.deleteMany ? K.deleteMany({\n                    resource: b.name,\n                    ids: h,\n                    meta: V,\n                    metaData: V,\n                    variables: N\n                }) : lt(h.map((te)=>K.deleteOne({\n                        resource: b.name,\n                        id: te,\n                        meta: V,\n                        metaData: V,\n                        variables: N\n                    }))), \"mutationFn\");\n            return G !== \"undoable\" ? j() : new Promise((te, R)=>{\n                let S = o(()=>{\n                    j().then((H)=>te(H)).catch((H)=>R(H));\n                }, \"doMutation\"), B = o(()=>{\n                    R({\n                        message: \"mutationCancelled\"\n                    });\n                }, \"cancelMutation\");\n                E && E(B), u({\n                    type: \"ADD\",\n                    payload: {\n                        id: h,\n                        resource: F,\n                        cancelMutation: B,\n                        doMutation: S,\n                        seconds: W,\n                        isSilent: !!E\n                    }\n                });\n            });\n        },\n        onMutate: async ({ ids: C, resource: h, mutationMode: D, dataProviderName: A, meta: E, metaData: L })=>{\n            let { identifier: U } = T(h), { gqlMutation: w, gqlQuery: N, ...b } = I(E, L) ?? {}, F = dt(M)(U, ee(U, A, d), b), V = P().data(ee(U, A, d)).resource(U), G = D ?? n;\n            await x.cancelQueries(V.get(M), void 0, {\n                silent: !0\n            });\n            let W = x.getQueriesData(V.get(M));\n            if (G !== \"pessimistic\") {\n                x.setQueriesData(V.action(\"list\").params(b ?? {}).get(M), (K)=>K ? {\n                        data: K.data.filter((re)=>re.id && !C.map(String).includes(re.id.toString())),\n                        total: K.total - 1\n                    } : null), x.setQueriesData(V.action(\"many\").get(M), (K)=>{\n                    if (!K) return null;\n                    let j = K.data.filter((re)=>re.id ? !C.map(String).includes(re.id.toString()) : !1);\n                    return {\n                        ...K,\n                        data: j\n                    };\n                });\n                for (let K of C)x.setQueriesData(V.action(\"one\").id(K).params(b).get(M), (j)=>!j || j.data.id === K ? null : {\n                        ...j\n                    });\n            }\n            return {\n                previousQueries: W,\n                queryKey: F\n            };\n        },\n        onSettled: (C, h, { resource: D, ids: A, dataProviderName: E, invalidates: L = [\n            \"list\",\n            \"many\"\n        ] })=>{\n            let { identifier: U } = T(D);\n            m({\n                resource: U,\n                dataProviderName: ee(U, E, d),\n                invalidates: L\n            }), u({\n                type: \"REMOVE\",\n                payload: {\n                    id: A,\n                    resource: U\n                }\n            });\n        },\n        onSuccess: (C, { ids: h, resource: D, meta: A, metaData: E, dataProviderName: L, successNotification: U }, w)=>{\n            let { resource: N, identifier: b } = T(D), F = ee(b, L, d), V = v({\n                resource: N,\n                meta: I(A, E)\n            });\n            h.forEach((te)=>x.removeQueries(w == null ? void 0 : w.queryKey.detail(te)));\n            let G = typeof U == \"function\" ? U(C, h, b) : U;\n            l(G, {\n                key: `${h}-${b}-notification`,\n                description: c(\"notifications.success\", \"Success\"),\n                message: c(\"notifications.deleteSuccess\", {\n                    resource: c(`${b}.${b}`, b)\n                }, `Successfully deleted ${b}`),\n                type: \"success\"\n            }), p == null || p({\n                channel: `resources/${N.name}`,\n                type: \"deleted\",\n                payload: {\n                    ids: h\n                },\n                date: new Date,\n                meta: {\n                    ...V,\n                    dataProviderName: F\n                }\n            });\n            let { fields: W, operation: K, variables: j, ...re } = V || {};\n            y == null || y.mutate({\n                action: \"deleteMany\",\n                resource: N.name,\n                meta: {\n                    ids: h,\n                    dataProviderName: F,\n                    ...re\n                }\n            }), h.forEach((te)=>x.removeQueries(w == null ? void 0 : w.queryKey.detail(te)));\n        },\n        onError: (C, { ids: h, resource: D, errorNotification: A }, E)=>{\n            let { identifier: L } = T(D);\n            if (E) for (let U of E.previousQueries)x.setQueryData(U[0], U[1]);\n            if (C.message !== \"mutationCancelled\") {\n                s(C);\n                let U = f.singular(L), w = typeof A == \"function\" ? A(C, h, L) : A;\n                l(w, {\n                    key: `${h}-${L}-notification`,\n                    message: c(\"notifications.deleteError\", {\n                        resource: U,\n                        statusCode: C.statusCode\n                    }, `Error (status code: ${C.statusCode})`),\n                    description: C.message,\n                    type: \"error\"\n                });\n            }\n        },\n        mutationKey: P().data().mutation(\"deleteMany\").get(M),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useDeleteMany\", M)\n        }\n    }), { elapsedTime: g } = fe({\n        ...t,\n        isLoading: Q.isLoading\n    });\n    return {\n        ...Q,\n        overtime: {\n            elapsedTime: g\n        }\n    };\n}, \"useDeleteMany\");\nvar li = o((e)=>{\n    var n;\n    let t = le(), { resource: r } = q(), { getApiUrl: s } = t(e ?? ((n = I(r == null ? void 0 : r.meta, r == null ? void 0 : r.options)) == null ? void 0 : n.dataProviderName));\n    return s();\n}, \"useApiUrl\");\n\n\nvar yi = o(({ url: e, method: t, config: r, queryOptions: s, successNotification: n, errorNotification: i, meta: a, metaData: u, dataProviderName: c, overtimeOptions: p })=>{\n    let l = le(), m = ie(), { mutate: y } = Re({\n        v3LegacyAuthProviderCompatible: !!(m != null && m.isLegacy)\n    }), d = z(), T = Ce(), x = ue(), { keys: v, preferLegacyKeys: f } = Z(), P = I(a, u), { custom: M } = l(c), Q = x({\n        meta: P\n    });\n    if (M) {\n        let g = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n            queryKey: v().data(c).mutation(\"custom\").params({\n                method: t,\n                url: e,\n                ...r,\n                ...P || {}\n            }).get(f),\n            queryFn: (h)=>M({\n                    url: e,\n                    method: t,\n                    ...r,\n                    meta: {\n                        ...Q,\n                        queryContext: je(h)\n                    },\n                    metaData: {\n                        ...Q,\n                        queryContext: je(h)\n                    }\n                }),\n            ...s,\n            onSuccess: (h)=>{\n                var A;\n                (A = s == null ? void 0 : s.onSuccess) == null || A.call(s, h);\n                let D = typeof n == \"function\" ? n(h, {\n                    ...r,\n                    ...Q\n                }) : n;\n                T(D);\n            },\n            onError: (h)=>{\n                var A;\n                y(h), (A = s == null ? void 0 : s.onError) == null || A.call(s, h);\n                let D = typeof i == \"function\" ? i(h, {\n                    ...r,\n                    ...Q\n                }) : i;\n                T(D, {\n                    key: `${t}-notification`,\n                    message: d(\"notifications.error\", {\n                        statusCode: h.statusCode\n                    }, `Error (status code: ${h.statusCode})`),\n                    description: h.message,\n                    type: \"error\"\n                });\n            },\n            meta: {\n                ...s == null ? void 0 : s.meta,\n                ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCustom\", f)\n            }\n        }), { elapsedTime: C } = fe({\n            ...p,\n            isLoading: g.isFetching\n        });\n        return {\n            ...g,\n            overtime: {\n                elapsedTime: C\n            }\n        };\n    }\n    throw Error(\"Not implemented custom on data provider.\");\n}, \"useCustom\");\n\n\nvar xi = o(({ mutationOptions: e, overtimeOptions: t } = {})=>{\n    let r = ie(), { mutate: s } = Re({\n        v3LegacyAuthProviderCompatible: !!(r != null && r.isLegacy)\n    }), n = Ce(), i = le(), a = z(), u = ue(), { keys: c, preferLegacyKeys: p } = Z(), l = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)(({ url: y, method: d, values: T, meta: x, metaData: v, dataProviderName: f, config: P })=>{\n        let M = u({\n            meta: I(x, v)\n        }), { custom: Q } = i(f);\n        if (Q) return Q({\n            url: y,\n            method: d,\n            payload: T,\n            meta: M,\n            metaData: M,\n            headers: {\n                ...P == null ? void 0 : P.headers\n            }\n        });\n        throw Error(\"Not implemented custom on data provider.\");\n    }, {\n        onSuccess: (y, { successNotification: d, config: T, meta: x, metaData: v })=>{\n            let f = typeof d == \"function\" ? d(y, {\n                ...T,\n                ...I(x, v) || {}\n            }) : d;\n            n(f);\n        },\n        onError: (y, { errorNotification: d, method: T, config: x, meta: v, metaData: f })=>{\n            s(y);\n            let P = typeof d == \"function\" ? d(y, {\n                ...x,\n                ...I(v, f) || {}\n            }) : d;\n            n(P, {\n                key: `${T}-notification`,\n                message: a(\"notifications.error\", {\n                    statusCode: y.statusCode\n                }, `Error (status code: ${y.statusCode})`),\n                description: y.message,\n                type: \"error\"\n            });\n        },\n        mutationKey: c().data().mutation(\"customMutation\").get(p),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCustomMutation\", p)\n        }\n    }), { elapsedTime: m } = fe({\n        ...t,\n        isLoading: l.isLoading\n    });\n    return {\n        ...l,\n        overtime: {\n            elapsedTime: m\n        }\n    };\n}, \"useCustomMutation\");\n\n\nvar Hs = {\n    default: {}\n}, Jt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(Hs), $s = o(({ children: e, dataProvider: t })=>{\n    let r = Hs;\n    return t && (!(\"default\" in t) && (\"getList\" in t || \"getOne\" in t) ? r = {\n        default: t\n    } : r = t), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Jt.Provider, {\n        value: r\n    }, e);\n}, \"DataContextProvider\");\nvar le = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Jt);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((r)=>{\n        if (r) {\n            let s = e == null ? void 0 : e[r];\n            if (!s) throw new Error(`\"${r}\" Data provider not found`);\n            if (s && !(e != null && e.default)) throw new Error(\"If you have multiple data providers, you must provide default data provider property\");\n            return e[r];\n        }\n        if (e.default) return e.default;\n        throw new Error('There is no \"default\" data provider. Please pass dataProviderName.');\n    }, [\n        e\n    ]);\n}, \"useDataProvider\");\n\n\nvar bi = o(({ resource: e, config: t, filters: r, hasPagination: s, pagination: n, sorters: i, queryOptions: a, successNotification: u, errorNotification: c, meta: p, metaData: l, liveMode: m, onLiveEvent: y, liveParams: d, dataProviderName: T, overtimeOptions: x })=>{\n    let { resources: v, resource: f, identifier: P } = q(e), M = le(), Q = z(), g = ie(), { mutate: C } = Re({\n        v3LegacyAuthProviderCompatible: !!(g != null && g.isLegacy)\n    }), h = Ce(), D = ue(), { keys: A, preferLegacyKeys: E } = Z(), L = ee(P, T, v), U = I(p, l), w = I(r, t == null ? void 0 : t.filters), N = I(i, t == null ? void 0 : t.sort), b = I(s, t == null ? void 0 : t.hasPagination), F = Wt({\n        pagination: n,\n        configPagination: t == null ? void 0 : t.pagination,\n        hasPagination: b\n    }), V = F.mode === \"server\", G = {\n        meta: U,\n        metaData: U,\n        filters: w,\n        hasPagination: V,\n        pagination: F,\n        sorters: N,\n        config: {\n            ...t,\n            sort: N\n        }\n    }, W = (a == null ? void 0 : a.enabled) === void 0 || (a == null ? void 0 : a.enabled) === !0, K = D({\n        resource: f,\n        meta: U\n    }), { getList: j } = M(L);\n    Pt({\n        resource: P,\n        types: [\n            \"*\"\n        ],\n        params: {\n            meta: K,\n            metaData: K,\n            pagination: F,\n            hasPagination: V,\n            sort: N,\n            sorters: N,\n            filters: w,\n            subscriptionType: \"useList\",\n            ...d\n        },\n        channel: `resources/${f.name}`,\n        enabled: W,\n        liveMode: m,\n        onLiveEvent: y,\n        dataProviderName: L,\n        meta: {\n            ...K,\n            dataProviderName: T\n        }\n    });\n    let re = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_13__.useInfiniteQuery)({\n        queryKey: A().data(L).resource(P).action(\"infinite\").params({\n            ...U || {},\n            filters: w,\n            hasPagination: V,\n            ...V && {\n                pagination: F\n            },\n            ...i && {\n                sorters: i\n            },\n            ...(t == null ? void 0 : t.sort) && {\n                sort: t == null ? void 0 : t.sort\n            }\n        }).get(E),\n        queryFn: (R)=>{\n            let S = {\n                ...F,\n                current: R.pageParam\n            }, B = {\n                ...K,\n                queryContext: je(R)\n            };\n            return j({\n                resource: f.name,\n                pagination: S,\n                hasPagination: V,\n                filters: w,\n                sort: N,\n                sorters: N,\n                meta: B,\n                metaData: B\n            }).then(({ data: H, total: $, ...X })=>({\n                    data: H,\n                    total: $,\n                    pagination: S,\n                    ...X\n                }));\n        },\n        getNextPageParam: (R)=>Tr(R),\n        getPreviousPageParam: (R)=>xr(R),\n        ...a,\n        onSuccess: (R)=>{\n            var B;\n            (B = a == null ? void 0 : a.onSuccess) == null || B.call(a, R);\n            let S = typeof u == \"function\" ? u(R, G, P) : u;\n            h(S);\n        },\n        onError: (R)=>{\n            var B;\n            C(R), (B = a == null ? void 0 : a.onError) == null || B.call(a, R);\n            let S = typeof c == \"function\" ? c(R, G, P) : c;\n            h(S, {\n                key: `${P}-useInfiniteList-notification`,\n                message: Q(\"notifications.error\", {\n                    statusCode: R.statusCode\n                }, `Error (status code: ${R.statusCode})`),\n                description: R.message,\n                type: \"error\"\n            });\n        },\n        meta: {\n            ...a == null ? void 0 : a.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useInfiniteList\", E, f == null ? void 0 : f.name)\n        }\n    }), { elapsedTime: te } = fe({\n        ...x,\n        isLoading: re.isFetching\n    });\n    return {\n        ...re,\n        overtime: {\n            elapsedTime: te\n        }\n    };\n}, \"useInfiniteList\");\n\n\nvar mt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), _s = o(({ liveProvider: e, children: t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(mt.Provider, {\n        value: {\n            liveProvider: e\n        }\n    }, t), \"LiveContextProvider\");\n\n\nvar ke = o(()=>{\n    let { resources: e } = q(), t = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), { keys: r, preferLegacyKeys: s } = Z();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async ({ resource: i, dataProviderName: a, invalidates: u, id: c, invalidationFilters: p = {\n        type: \"all\",\n        refetchType: \"active\"\n    }, invalidationOptions: l = {\n        cancelRefetch: !1\n    } })=>{\n        if (u === !1) return;\n        let m = ee(i, a, e), y = r().data(m).resource(i ?? \"\");\n        await Promise.all(u.map((d)=>{\n            switch(d){\n                case \"all\":\n                    return t.invalidateQueries(r().data(m).get(s), p, l);\n                case \"list\":\n                    return t.invalidateQueries(y.action(\"list\").get(s), p, l);\n                case \"many\":\n                    return t.invalidateQueries(y.action(\"many\").get(s), p, l);\n                case \"resourceAll\":\n                    return t.invalidateQueries(y.get(s), p, l);\n                case \"detail\":\n                    return t.invalidateQueries(y.action(\"one\").id(c || \"\").get(s), p, l);\n                default:\n                    return;\n            }\n        }));\n    }, []);\n}, \"useInvalidate\");\n\n\n\n\n\nvar js = o((e)=>{\n    let t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(e);\n    return (0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(t.current, e) || (t.current = e), t.current;\n}, \"useMemoized\");\nvar kr = o((e, t)=>{\n    let r = js(t);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(e, r);\n}, \"useDeepMemo\");\nvar Rt = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    resources: []\n}), Zs = o(({ resources: e, children: t })=>{\n    let r = kr(()=>hr(e ?? []), [\n        e\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Rt.Provider, {\n        value: {\n            resources: r\n        }\n    }, t);\n}, \"ResourceContextProvider\");\n\nvar Js = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(\"new\"), qs = Js.Provider, oe = o(()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(Js), \"useRouterType\");\n\n\nvar en = {}, ft = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(en), tn = o(({ children: e, router: t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ft.Provider, {\n        value: t ?? en\n    }, e), \"RouterContextProvider\");\n\nvar vo = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ft);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(e == null ? void 0 : e.parse) ?? (()=>()=>({})), [\n        e == null ? void 0 : e.parse\n    ])();\n}, \"useParse\");\nvar Te = o(()=>{\n    let e = vo();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>e(), [\n        e\n    ]);\n}, \"useParsed\");\nfunction q(e) {\n    let { resources: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Rt), r = oe(), s = Te(), n = {\n        resourceName: e && typeof e != \"string\" ? e.resourceName : e,\n        resourceNameOrRouteName: e && typeof e != \"string\" ? e.resourceNameOrRouteName : e,\n        recordItemId: e && typeof e != \"string\" ? e.recordItemId : void 0\n    }, i = o((m, y = !0)=>{\n        let T = Ee(m, t, r === \"legacy\");\n        if (T) return {\n            resource: T,\n            identifier: T.identifier ?? T.name\n        };\n        if (y) {\n            let x = {\n                name: m,\n                identifier: m\n            }, v = x.identifier ?? x.name;\n            return {\n                resource: x,\n                identifier: v\n            };\n        }\n    }, \"select\"), a = rn(), { useParams: u } = pe(), c = u();\n    if (r === \"legacy\") {\n        let m = n.resourceNameOrRouteName ? n.resourceNameOrRouteName : c.resource, y = m ? a(m) : void 0, d = (n == null ? void 0 : n.recordItemId) ?? c.id, T = c.action, x = (n == null ? void 0 : n.resourceName) ?? (y == null ? void 0 : y.name), v = (y == null ? void 0 : y.identifier) ?? (y == null ? void 0 : y.name);\n        return {\n            resources: t,\n            resource: y,\n            resourceName: x,\n            id: d,\n            action: T,\n            select: i,\n            identifier: v\n        };\n    }\n    let p, l = typeof e == \"string\" ? e : n == null ? void 0 : n.resourceNameOrRouteName;\n    if (l) {\n        let m = Ee(l, t);\n        m ? p = m : p = {\n            name: l\n        };\n    } else s != null && s.resource && (p = s.resource);\n    return {\n        resources: t,\n        resource: p,\n        resourceName: p == null ? void 0 : p.name,\n        id: s.id,\n        action: s.action,\n        select: i,\n        identifier: (p == null ? void 0 : p.identifier) ?? (p == null ? void 0 : p.name)\n    };\n}\no(q, \"useResource\");\n\nvar rn = o(()=>{\n    let { resources: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Rt);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((r)=>{\n        let s = Ee(r, e, !0);\n        return s || {\n            name: r,\n            route: r\n        };\n    }, [\n        e\n    ]);\n}, \"useResourceWithRoute\");\nvar Pt = o(({ resource: e, params: t, channel: r, types: s, enabled: n = !0, liveMode: i, onLiveEvent: a, dataProviderName: u, meta: c })=>{\n    var f;\n    let { resource: p, identifier: l } = q(e), { liveProvider: m } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt), { liveMode: y, onLiveEvent: d } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe), T = i ?? y, x = ke(), v = u ?? (c == null ? void 0 : c.dataProviderName) ?? ((f = p == null ? void 0 : p.meta) == null ? void 0 : f.dataProviderName);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let P, M = o((Q)=>{\n            T === \"auto\" && x({\n                resource: l,\n                dataProviderName: v,\n                invalidates: [\n                    \"resourceAll\"\n                ],\n                invalidationFilters: {\n                    type: \"active\",\n                    refetchType: \"active\"\n                },\n                invalidationOptions: {\n                    cancelRefetch: !1\n                }\n            }), a == null || a(Q), d == null || d(Q);\n        }, \"callback\");\n        return T && T !== \"off\" && n && (P = m == null ? void 0 : m.subscribe({\n            channel: r,\n            params: {\n                resource: p == null ? void 0 : p.name,\n                ...t\n            },\n            types: s,\n            callback: M,\n            dataProviderName: v,\n            meta: {\n                ...c,\n                dataProviderName: v\n            }\n        })), ()=>{\n            P && (m == null || m.unsubscribe(P));\n        };\n    }, [\n        n\n    ]);\n}, \"useResourceSubscription\");\n\nvar sn = o((e)=>{\n    let { liveMode: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Qe);\n    return e ?? t;\n}, \"useLiveMode\");\n\nvar ph = o(({ params: e, channel: t, types: r = [\n    \"*\"\n], enabled: s = !0, onLiveEvent: n, dataProviderName: i = \"default\", meta: a })=>{\n    let { liveProvider: u } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let c;\n        return s && (c = u == null ? void 0 : u.subscribe({\n            channel: t,\n            params: e,\n            types: r,\n            callback: n,\n            dataProviderName: i,\n            meta: {\n                ...a,\n                dataProviderName: i\n            }\n        })), ()=>{\n            c && (u == null || u.unsubscribe(c));\n        };\n    }, [\n        s\n    ]);\n}, \"useSubscription\");\n\nvar Ye = o(()=>{\n    let { liveProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt);\n    return e == null ? void 0 : e.publish;\n}, \"usePublish\");\n\n\n\nvar Uo = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    notifications: [],\n    notificationDispatch: ()=>!1\n}), Hi = [], $i = o((e, t)=>{\n    switch(t.type){\n        case \"ADD\":\n            return [\n                ...e.filter((s)=>!((0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(s.id, t.payload.id) && s.resource === t.payload.resource)),\n                {\n                    ...t.payload,\n                    isRunning: !0\n                }\n            ];\n        case \"REMOVE\":\n            return e.filter((r)=>!((0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(r.id, t.payload.id) && r.resource === t.payload.resource));\n        case \"DECREASE_NOTIFICATION_SECOND\":\n            return e.map((r)=>(0,lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])(r.id, t.payload.id) && r.resource === t.payload.resource ? {\n                    ...r,\n                    seconds: t.payload.seconds - 1e3\n                } : r);\n        default:\n            return e;\n    }\n}, \"undoableQueueReducer\"), an = o(({ children: e })=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)($i, Hi), s = {\n        notifications: t,\n        notificationDispatch: r\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Uo.Provider, {\n        value: s\n    }, e,  false ? 0 : null);\n}, \"UndoableQueueContextProvider\");\nvar ut = o(()=>{\n    let { notifications: e, notificationDispatch: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Uo);\n    return {\n        notifications: e,\n        notificationDispatch: t\n    };\n}, \"useCancelNotification\");\n\n\nvar qt = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({}), cn = o(({ open: e, close: t, children: r })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(qt.Provider, {\n        value: {\n            open: e,\n            close: t\n        }\n    }, r), \"NotificationContextProvider\");\nvar He = o(()=>{\n    let { open: e, close: t } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(qt);\n    return {\n        open: e,\n        close: t\n    };\n}, \"useNotification\");\n\nvar Ce = o(()=>{\n    let { open: e } = He();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((r, s)=>{\n        r !== !1 && (r ? e == null || e(r) : s && (e == null || e(s)));\n    }, []);\n}, \"useHandleNotification\");\n\n\nvar Xe = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), dn = o(({ children: e, i18nProvider: t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Xe.Provider, {\n        value: {\n            i18nProvider: t\n        }\n    }, e), \"I18nContextProvider\");\nvar Eo = o(()=>{\n    let { i18nProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((t)=>e == null ? void 0 : e.changeLocale(t), []);\n}, \"useSetLocale\");\n\nvar z = o(()=>{\n    let { i18nProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        function r(s, n, i) {\n            return (e == null ? void 0 : e.translate(s, n, i)) ?? i ?? (typeof n == \"string\" && typeof i > \"u\" ? n : s);\n        }\n        return o(r, \"translate\"), r;\n    }, [\n        e\n    ]);\n}, \"useTranslate\");\n\nvar Lo = o(()=>{\n    let { i18nProvider: e } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>e == null ? void 0 : e.getLocale(), []);\n}, \"useGetLocale\");\nvar tP = o(()=>{\n    let e = z(), t = Eo(), r = Lo();\n    return {\n        translate: e,\n        changeLocale: t,\n        getLocale: r\n    };\n}, \"useTranslation\");\n\n\n\nvar fP = o(({ resourceName: e, resource: t, sorter: r, sorters: s, filters: n, maxItemCount: i, pageSize: a = 20, mapData: u = o((x)=>x, \"mapData\"), exportOptions: c, unparseConfig: p, meta: l, metaData: m, dataProviderName: y, onError: d, download: T } = {})=>{\n    let [x, v] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), f = le(), P = ue(), { resource: M, resources: Q, identifier: g } = q(I(t, e)), h = `${ht()(g, \"plural\")}-${new Date().toLocaleString()}`, { getList: D } = f(ee(g, y, Q)), A = P({\n        resource: M,\n        meta: I(l, m)\n    });\n    return {\n        isLoading: x,\n        triggerExport: o(async ()=>{\n            v(!0);\n            let L = [], U = 1, w = !0;\n            for(; w;)try {\n                let { data: V, total: G } = await D({\n                    resource: (M == null ? void 0 : M.name) ?? \"\",\n                    filters: n,\n                    sort: I(s, r),\n                    sorters: I(s, r),\n                    pagination: {\n                        current: U,\n                        pageSize: a,\n                        mode: \"server\"\n                    },\n                    meta: A,\n                    metaData: A\n                });\n                U++, L.push(...V), i && L.length >= i && (L = L.slice(0, i), w = !1), G === L.length && (w = !1);\n            } catch (V) {\n                v(!1), w = !1, d == null || d(V);\n                return;\n            }\n            let N = typeof p < \"u\" && p !== null;\n            warn_once__WEBPACK_IMPORTED_MODULE_1__(N && typeof c < \"u\" && c !== null, `[useExport]: resource: \"${g}\" \n\nBoth \\`unparseConfig\\` and \\`exportOptions\\` are set, \\`unparseConfig\\` will take precedence`);\n            let b = {\n                filename: h,\n                useKeysAsHeaders: !0,\n                useBom: !0,\n                title: \"My Generated Report\",\n                quoteStrings: '\"',\n                ...c\n            };\n            warn_once__WEBPACK_IMPORTED_MODULE_1__((c == null ? void 0 : c.decimalSeparator) !== void 0, `[useExport]: resource: \"${g}\" \n\nUse of \\`decimalSeparator\\` no longer supported, please use \\`mapData\\` instead.\n\nSee https://refine.dev/docs/api-reference/core/hooks/import-export/useExport/`), N ? p = {\n                quotes: !0,\n                ...p\n            } : p = {\n                columns: b.useKeysAsHeaders ? void 0 : b.headers,\n                delimiter: b.fieldSeparator,\n                header: b.showLabels || b.useKeysAsHeaders,\n                quoteChar: b.quoteStrings,\n                quotes: !0\n            };\n            let F = papaparse__WEBPACK_IMPORTED_MODULE_15__.unparse(L.map(u), p);\n            if (b.showTitle && (F = `${b.title}\\r\n\n${F}`),  false && (0)) {\n                let V = b.useTextFile ? \".txt\" : \".csv\", G = `text/${b.useTextFile ? \"plain\" : \"csv\"};charset=utf8;`, W = `${(b.filename ?? \"download\").replace(/ /g, \"_\")}${V}`;\n                ro(W, `${b != null && b.useBom ? \"\\uFEFF\" : \"\"}${F}`, G);\n            }\n            return v(!1), F;\n        }, \"triggerExport\")\n    };\n}, \"useExport\");\n\n\nvar RP = o((e = {})=>{\n    var K, j, re;\n    let t = ue(), r = ke(), { redirect: s } = kt(), { mutationMode: n } = _e(), { setWarnWhen: i } = vt(), a = fn(), u = I(e.meta, e.metaData), c = e.mutationMode ?? n, { id: p, setId: l, resource: m, identifier: y, formAction: d } = qe({\n        resource: e.resource,\n        id: e.id,\n        action: e.action\n    }), [T, x] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), v = d === \"edit\", f = d === \"clone\", P = d === \"create\", M = t({\n        resource: m,\n        meta: u\n    }), Q = (v || f) && !!e.resource, g = typeof e.id < \"u\", C = ((K = e.queryOptions) == null ? void 0 : K.enabled) === !1;\n    warn_once__WEBPACK_IMPORTED_MODULE_1__(Q && !g && !C, pu(d, y, p));\n    let h = qr({\n        redirectFromProps: e.redirect,\n        action: d,\n        redirectOptions: s\n    }), D = o((te = v ? \"list\" : \"edit\", R = p, S = {})=>{\n        a({\n            redirect: te,\n            resource: m,\n            id: R,\n            meta: {\n                ...u,\n                ...S\n            }\n        });\n    }, \"redirect\"), A = zt({\n        resource: y,\n        id: p,\n        queryOptions: {\n            enabled: !P && p !== void 0,\n            ...e.queryOptions\n        },\n        liveMode: e.liveMode,\n        onLiveEvent: e.onLiveEvent,\n        liveParams: e.liveParams,\n        meta: {\n            ...M,\n            ...e.queryMeta\n        },\n        dataProviderName: e.dataProviderName,\n        overtimeOptions: {\n            enabled: !1\n        }\n    }), E = Xt({\n        mutationOptions: e.createMutationOptions,\n        overtimeOptions: {\n            enabled: !1\n        }\n    }), L = To({\n        mutationOptions: e.updateMutationOptions,\n        overtimeOptions: {\n            enabled: !1\n        }\n    }), U = v ? L : E, N = U.isLoading || A.isFetching, { elapsedTime: b } = fe({\n        ...e.overtimeOptions,\n        isLoading: N\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>()=>{\n            var te;\n            (te = e.autoSave) != null && te.invalidateOnUnmount && T && y && typeof p < \"u\" && r({\n                id: p,\n                invalidates: e.invalidates || [\n                    \"list\",\n                    \"many\",\n                    \"detail\"\n                ],\n                dataProviderName: e.dataProviderName,\n                resource: y\n            });\n        }, [\n        (j = e.autoSave) == null ? void 0 : j.invalidateOnUnmount,\n        T\n    ]);\n    let F = o(async (te, { isAutosave: R = !1 } = {})=>{\n        let S = c === \"pessimistic\";\n        i(!1);\n        let B = o(($)=>D(h, $), \"onSuccessRedirect\");\n        return new Promise(($, X)=>{\n            if (!m) return X(au);\n            if (f && !p) return X(iu);\n            if (!te) return X(uu);\n            if (R && !v) return X(cu);\n            !S && !R && (br(()=>B()), $());\n            let ne = {\n                values: te,\n                resource: y ?? m.name,\n                meta: {\n                    ...M,\n                    ...e.mutationMeta\n                },\n                metaData: {\n                    ...M,\n                    ...e.mutationMeta\n                },\n                dataProviderName: e.dataProviderName,\n                invalidates: R ? [] : e.invalidates,\n                successNotification: R ? !1 : e.successNotification,\n                errorNotification: R ? !1 : e.errorNotification,\n                ...v ? {\n                    id: p ?? \"\",\n                    mutationMode: c,\n                    undoableTimeout: e.undoableTimeout,\n                    optimisticUpdateMap: e.optimisticUpdateMap\n                } : {}\n            }, { mutateAsync: Y } = v ? L : E;\n            Y(ne, {\n                onSuccess: e.onMutationSuccess ? (O, _, ae)=>{\n                    var J;\n                    (J = e.onMutationSuccess) == null || J.call(e, O, te, ae, R);\n                } : void 0,\n                onError: e.onMutationError ? (O, _, ae)=>{\n                    var J;\n                    (J = e.onMutationError) == null || J.call(e, O, te, ae, R);\n                } : void 0\n            }).then((O)=>{\n                S && !R && br(()=>{\n                    var _;\n                    return B((_ = O == null ? void 0 : O.data) == null ? void 0 : _.id);\n                }), R && x(!0), $(O);\n            }).catch(X);\n        });\n    }, \"onFinish\"), V = oo((te)=>F(te, {\n            isAutosave: !0\n        }), ((re = e.autoSave) == null ? void 0 : re.debounce) || 1e3, \"Cancelled by debounce\"), G = {\n        elapsedTime: b\n    }, W = {\n        status: L.status,\n        data: L.data,\n        error: L.error\n    };\n    return {\n        onFinish: F,\n        onFinishAutoSave: V,\n        formLoading: N,\n        mutationResult: U,\n        mutation: U,\n        queryResult: A,\n        query: A,\n        autoSaveProps: W,\n        id: p,\n        setId: l,\n        redirect: D,\n        overtime: G\n    };\n}, \"useForm\"), au = new Error(\"[useForm]: `resource` is not defined or not matched but is required\"), iu = new Error(\"[useForm]: `id` is not defined but is required in edit and clone actions\"), uu = new Error(\"[useForm]: `values` is not provided but is required\"), cu = new Error(\"[useForm]: `autoSave` is only allowed in edit action\"), pu = o((e, t, r)=>`[useForm]: action: \"${e}\", resource: \"${t}\", id: ${r}\n\nIf you don't use the \\`setId\\` method to set the \\`id\\`, you should pass the \\`id\\` prop to \\`useForm\\`. Otherwise, \\`useForm\\` will not be able to infer the \\`id\\` from the current URL with custom resource provided.\n\nSee https://refine.dev/docs/data/hooks/use-form/#id-`, \"idWarningMessage\");\n\nvar fn = o(()=>{\n    let { show: e, edit: t, list: r, create: s } = he();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ redirect: i, resource: a, id: u, meta: c = {} })=>{\n        if (i && a) return a.show && i === \"show\" && u ? e(a, u, void 0, c) : a.edit && i === \"edit\" && u ? t(a, u, void 0, c) : a.create && i === \"create\" ? s(a, void 0, c) : r(a, \"push\", c);\n    }, []);\n}, \"useRedirectionAfterSubmission\");\n\nvar Mo = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ft);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(e == null ? void 0 : e.back) ?? (()=>()=>{}), [\n        e == null ? void 0 : e.back\n    ])();\n}, \"useBack\");\n\n\nvar Ut = o(()=>{\n    let e = oe(), { resource: t, resources: r } = q(), s = Te();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useCallback(({ resource: i, action: a, meta: u })=>{\n        var y;\n        let c = i || t;\n        if (!c) return;\n        let l = (y = Se(c, r, e === \"legacy\").find((d)=>d.action === a)) == null ? void 0 : y.route;\n        return l ? We(l, c == null ? void 0 : c.meta, s, u) : void 0;\n    }, [\n        r,\n        t,\n        s\n    ]);\n}, \"useGetToPath\");\nvar Pe = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ft), { select: t } = q(), r = Ut(), n = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(e == null ? void 0 : e.go) ?? (()=>()=>{}), [\n        e == null ? void 0 : e.go\n    ])();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((a)=>{\n        if (typeof a.to != \"object\") return n({\n            ...a,\n            to: a.to\n        });\n        let { resource: u } = t(a.to.resource);\n        xu(a.to, u);\n        let c = r({\n            resource: u,\n            action: a.to.action,\n            meta: {\n                id: a.to.id,\n                ...a.to.meta\n            }\n        });\n        return n({\n            ...a,\n            to: c\n        });\n    }, [\n        t,\n        n\n    ]);\n}, \"useGo\"), xu = o((e, t)=>{\n    if (!(e != null && e.action) || !(e != null && e.resource)) throw new Error('[useGo]: \"action\" or \"resource\" is required.');\n    if ([\n        \"edit\",\n        \"show\",\n        \"clone\"\n    ].includes(e == null ? void 0 : e.action) && !e.id) throw new Error(`[useGo]: [action: ${e.action}] requires an \"id\" for resource [resource: ${e.resource}]`);\n    if (!t[e.action]) throw new Error(`[useGo]: [action: ${e.action}] is not defined for [resource: ${e.resource}]`);\n}, \"handleResourceErrors\");\nvar he = o(()=>{\n    let { resources: e } = q(), t = oe(), { useHistory: r } = pe(), s = r(), n = Te(), i = Pe(), a = Mo(), u = o((g, C = \"push\")=>{\n        t === \"legacy\" ? s[C](g) : i({\n            to: g,\n            type: C\n        });\n    }, \"handleUrl\"), c = o((g, C = {})=>{\n        var A;\n        if (t === \"legacy\") {\n            let E = typeof g == \"string\" ? Ee(g, e, !0) ?? {\n                name: g,\n                route: g\n            } : g, L = Se(E, e, !0).find((U)=>U.action === \"create\");\n            return L ? We(L.route, E == null ? void 0 : E.meta, n, C) : \"\";\n        }\n        let h = typeof g == \"string\" ? Ee(g, e) ?? {\n            name: g\n        } : g, D = (A = Se(h, e).find((E)=>E.action === \"create\")) == null ? void 0 : A.route;\n        return D ? i({\n            to: We(D, h == null ? void 0 : h.meta, n, C),\n            type: \"path\",\n            query: C.query\n        }) : \"\";\n    }, \"createUrl\"), p = o((g, C, h = {})=>{\n        var L;\n        let D = encodeURIComponent(C);\n        if (t === \"legacy\") {\n            let U = typeof g == \"string\" ? Ee(g, e, !0) ?? {\n                name: g,\n                route: g\n            } : g, w = Se(U, e, !0).find((N)=>N.action === \"edit\");\n            return w ? We(w.route, U == null ? void 0 : U.meta, n, {\n                ...h,\n                id: D\n            }) : \"\";\n        }\n        let A = typeof g == \"string\" ? Ee(g, e) ?? {\n            name: g\n        } : g, E = (L = Se(A, e).find((U)=>U.action === \"edit\")) == null ? void 0 : L.route;\n        return E ? i({\n            to: We(E, A == null ? void 0 : A.meta, n, {\n                ...h,\n                id: D\n            }),\n            type: \"path\",\n            query: h.query\n        }) : \"\";\n    }, \"editUrl\"), l = o((g, C, h = {})=>{\n        var L;\n        let D = encodeURIComponent(C);\n        if (t === \"legacy\") {\n            let U = typeof g == \"string\" ? Ee(g, e, !0) ?? {\n                name: g,\n                route: g\n            } : g, w = Se(U, e, !0).find((N)=>N.action === \"clone\");\n            return w ? We(w.route, U == null ? void 0 : U.meta, n, {\n                ...h,\n                id: D\n            }) : \"\";\n        }\n        let A = typeof g == \"string\" ? Ee(g, e) ?? {\n            name: g\n        } : g, E = (L = Se(A, e).find((U)=>U.action === \"clone\")) == null ? void 0 : L.route;\n        return E ? i({\n            to: We(E, A == null ? void 0 : A.meta, n, {\n                ...h,\n                id: D\n            }),\n            type: \"path\",\n            query: h.query\n        }) : \"\";\n    }, \"cloneUrl\"), m = o((g, C, h = {})=>{\n        var L;\n        let D = encodeURIComponent(C);\n        if (t === \"legacy\") {\n            let U = typeof g == \"string\" ? Ee(g, e, !0) ?? {\n                name: g,\n                route: g\n            } : g, w = Se(U, e, !0).find((N)=>N.action === \"show\");\n            return w ? We(w.route, U == null ? void 0 : U.meta, n, {\n                ...h,\n                id: D\n            }) : \"\";\n        }\n        let A = typeof g == \"string\" ? Ee(g, e) ?? {\n            name: g\n        } : g, E = (L = Se(A, e).find((U)=>U.action === \"show\")) == null ? void 0 : L.route;\n        return E ? i({\n            to: We(E, A == null ? void 0 : A.meta, n, {\n                ...h,\n                id: D\n            }),\n            type: \"path\",\n            query: h.query\n        }) : \"\";\n    }, \"showUrl\"), y = o((g, C = {})=>{\n        var A;\n        if (t === \"legacy\") {\n            let E = typeof g == \"string\" ? Ee(g, e, !0) ?? {\n                name: g,\n                route: g\n            } : g, L = Se(E, e, !0).find((U)=>U.action === \"list\");\n            return L ? We(L.route, E == null ? void 0 : E.meta, n, C) : \"\";\n        }\n        let h = typeof g == \"string\" ? Ee(g, e) ?? {\n            name: g\n        } : g, D = (A = Se(h, e).find((E)=>E.action === \"list\")) == null ? void 0 : A.route;\n        return D ? i({\n            to: We(D, h == null ? void 0 : h.meta, n, C),\n            type: \"path\",\n            query: C.query\n        }) : \"\";\n    }, \"listUrl\");\n    return {\n        create: o((g, C = \"push\", h = {})=>{\n            u(c(g, h), C);\n        }, \"create\"),\n        createUrl: c,\n        edit: o((g, C, h = \"push\", D = {})=>{\n            u(p(g, C, D), h);\n        }, \"edit\"),\n        editUrl: p,\n        clone: o((g, C, h = \"push\", D = {})=>{\n            u(l(g, C, D), h);\n        }, \"clone\"),\n        cloneUrl: l,\n        show: o((g, C, h = \"push\", D = {})=>{\n            u(m(g, C, D), h);\n        }, \"show\"),\n        showUrl: m,\n        list: o((g, C = \"push\", h = {})=>{\n            u(y(g, h), C);\n        }, \"list\"),\n        listUrl: y,\n        push: o((g, ...C)=>{\n            t === \"legacy\" ? s.push(g, ...C) : i({\n                to: g,\n                type: \"push\"\n            });\n        }, \"push\"),\n        replace: o((g, ...C)=>{\n            t === \"legacy\" ? s.replace(g, ...C) : i({\n                to: g,\n                type: \"replace\"\n            });\n        }, \"replace\"),\n        goBack: o(()=>{\n            t === \"legacy\" ? s.goBack() : a();\n        }, \"goBack\")\n    };\n}, \"useNavigation\");\n\nvar nR = o(({ resource: e, id: t, meta: r, metaData: s, queryOptions: n, overtimeOptions: i, ...a } = {})=>{\n    let { resource: u, identifier: c, id: p, setId: l } = qe({\n        id: t,\n        resource: e\n    }), y = ue()({\n        resource: u,\n        meta: I(r, s)\n    });\n    warn_once__WEBPACK_IMPORTED_MODULE_1__(!!e && !p, Pu(c, p));\n    let d = zt({\n        resource: c,\n        id: p ?? \"\",\n        queryOptions: {\n            enabled: p !== void 0,\n            ...n\n        },\n        meta: y,\n        metaData: y,\n        overtimeOptions: i,\n        ...a\n    });\n    return {\n        queryResult: d,\n        query: d,\n        showId: p,\n        setShowId: l,\n        overtime: d.overtime\n    };\n}, \"useShow\"), Pu = o((e, t)=>`[useShow]: resource: \"${e}\", id: ${t} \n\nIf you don't use the \\`setShowId\\` method to set the \\`showId\\`, you should pass the \\`id\\` prop to \\`useShow\\`. Otherwise, \\`useShow\\` will not be able to infer the \\`id\\` from the current URL. \n\nSee https://refine.dev/docs/data/hooks/use-show/#resource`, \"idWarningMessage\");\n\n\n\nvar mR = o(({ resourceName: e, resource: t, mapData: r = o((l)=>l, \"mapData\"), paparseOptions: s, batchSize: n = Number.MAX_SAFE_INTEGER, onFinish: i, meta: a, metaData: u, onProgress: c, dataProviderName: p } = {})=>{\n    let [l, m] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), [y, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), [T, x] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), { resource: v, identifier: f } = q(t ?? e), P = ue(), M = bo(), Q = Xt(), g = P({\n        resource: v,\n        meta: I(a, u)\n    }), C;\n    n === 1 ? C = Q : C = M;\n    let h = o(()=>{\n        d(0), m(0), x(!1);\n    }, \"handleCleanup\"), D = o((E)=>{\n        let L = {\n            succeeded: E.filter((U)=>U.type === \"success\"),\n            errored: E.filter((U)=>U.type === \"error\")\n        };\n        i == null || i(L), x(!1);\n    }, \"handleFinish\");\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        c == null || c({\n            totalAmount: y,\n            processedAmount: l\n        });\n    }, [\n        y,\n        l\n    ]);\n    let A = o(({ file: E })=>(h(), new Promise((L)=>{\n            x(!0), papaparse__WEBPACK_IMPORTED_MODULE_15__.parse(E, {\n                complete: async ({ data: U })=>{\n                    let w = sr(U, r);\n                    if (d(w.length), n === 1) {\n                        let N = w.map((F)=>o(async ()=>({\n                                    response: await Q.mutateAsync({\n                                        resource: f ?? \"\",\n                                        values: F,\n                                        successNotification: !1,\n                                        errorNotification: !1,\n                                        dataProviderName: p,\n                                        meta: g,\n                                        metaData: g\n                                    }),\n                                    value: F\n                                }), \"fn\")), b = await gr(N, ({ response: F, value: V })=>(m((G)=>G + 1), {\n                                response: [\n                                    F.data\n                                ],\n                                type: \"success\",\n                                request: [\n                                    V\n                                ]\n                            }), (F, V)=>({\n                                response: [\n                                    F\n                                ],\n                                type: \"error\",\n                                request: [\n                                    w[V]\n                                ]\n                            }));\n                        L(b);\n                    } else {\n                        let N = (0,lodash_es_chunk_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"])(w, n), b = N.map((V)=>o(async ()=>({\n                                    response: await M.mutateAsync({\n                                        resource: f ?? \"\",\n                                        values: V,\n                                        successNotification: !1,\n                                        errorNotification: !1,\n                                        dataProviderName: p,\n                                        meta: g,\n                                        metaData: g\n                                    }),\n                                    value: V,\n                                    currentBatchLength: V.length\n                                }), \"fn\")), F = await gr(b, ({ response: V, currentBatchLength: G, value: W })=>(m((K)=>K + G), {\n                                response: V.data,\n                                type: \"success\",\n                                request: W\n                            }), (V, G)=>({\n                                response: [\n                                    V\n                                ],\n                                type: \"error\",\n                                request: N[G]\n                            }));\n                        L(F);\n                    }\n                },\n                ...s\n            });\n        }).then((L)=>(D(L), L))), \"handleChange\");\n    return {\n        inputProps: {\n            type: \"file\",\n            accept: \".csv\",\n            onChange: (E)=>{\n                E.target.files && E.target.files.length > 0 && A({\n                    file: E.target.files[0]\n                });\n            }\n        },\n        mutationResult: C,\n        isLoading: T,\n        handleChange: A\n    };\n}, \"useImport\");\n\nvar TR = o(({ defaultVisible: e = !1 } = {})=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>r(!0), [\n        t\n    ]), n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>r(!1), [\n        t\n    ]);\n    return {\n        visible: t,\n        show: s,\n        close: n\n    };\n}, \"useModal\");\nvar Du = o(({ resource: e, action: t, meta: r, legacy: s })=>Ut()({\n        resource: e,\n        action: t,\n        meta: r,\n        legacy: s\n    }), \"useToPath\");\n\n\nvar Mu = o((e, t)=>{\n    let r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ft), s = r == null ? void 0 : r.Link, n = Pe(), i = \"\";\n    return \"go\" in e && (r != null && r.go || warn_once__WEBPACK_IMPORTED_MODULE_1__(!0, \"[Link]: `routerProvider` is not found. To use `go`, Please make sure that you have provided the `routerProvider` for `<Refine />` https://refine.dev/docs/routing/router-provider/ \\n\"), i = n({\n        ...e.go,\n        type: \"path\"\n    })), \"to\" in e && (i = e.to), s ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(s, {\n        ref: t,\n        ...e,\n        to: i,\n        go: void 0\n    }) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        ref: t,\n        href: i,\n        ...e,\n        to: void 0,\n        go: void 0\n    });\n}, \"LinkComponent\"), Io = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(Mu);\nvar yt = o(()=>Io, \"useLink\");\n\n\nvar gt = {\n    useHistory: ()=>!1,\n    useLocation: ()=>!1,\n    useParams: ()=>({}),\n    Prompt: ()=>null,\n    Link: ()=>null\n}, er = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(gt), xn = o(({ children: e, useHistory: t, useLocation: r, useParams: s, Prompt: n, Link: i, routes: a })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(er.Provider, {\n        value: {\n            useHistory: t ?? gt.useHistory,\n            useLocation: r ?? gt.useLocation,\n            useParams: s ?? gt.useParams,\n            Prompt: n ?? gt.Prompt,\n            Link: i ?? gt.Link,\n            routes: a ?? gt.routes\n        }\n    }, e), \"LegacyRouterContextProvider\");\nvar pe = o(()=>{\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(er), { useHistory: t, useLocation: r, useParams: s, Prompt: n, Link: i, routes: a } = e ?? gt;\n    return {\n        useHistory: t,\n        useLocation: r,\n        useParams: s,\n        Prompt: n,\n        Link: i,\n        routes: a\n    };\n}, \"useRouterContext\");\n\n\n\n\nvar ct = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    options: {\n        buttons: {\n            enableAccessControl: !0,\n            hideIfUnauthorized: !1\n        }\n    }\n}), Pn = o(({ can: e, children: t, options: r })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ct.Provider, {\n        value: {\n            can: e,\n            options: r ? {\n                ...r,\n                buttons: {\n                    enableAccessControl: !0,\n                    hideIfUnauthorized: !1,\n                    ...r.buttons\n                }\n            } : {\n                buttons: {\n                    enableAccessControl: !0,\n                    hideIfUnauthorized: !1\n                },\n                queryOptions: void 0\n            }\n        }\n    }, t), \"AccessControlContextProvider\");\nvar At = o((e)=>{\n    if (!e) return;\n    let { icon: t, list: r, edit: s, create: n, show: i, clone: a, children: u, meta: c, options: p, ...l } = e, { icon: m, ...y } = c ?? {}, { icon: d, ...T } = p ?? {};\n    return {\n        ...l,\n        ...c ? {\n            meta: y\n        } : {},\n        ...p ? {\n            options: T\n        } : {}\n    };\n}, \"sanitizeResource\");\nvar Ar = o(({ action: e, resource: t, params: r, queryOptions: s })=>{\n    let { can: n, options: i } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ct), { keys: a, preferLegacyKeys: u } = Z(), { queryOptions: c } = i || {}, p = {\n        ...c,\n        ...s\n    }, { resource: l, ...m } = r ?? {}, y = At(l), d = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: a().access().resource(t).action(e).params({\n            params: {\n                ...m,\n                resource: y\n            },\n            enabled: p == null ? void 0 : p.enabled\n        }).get(u),\n        queryFn: ()=>(n == null ? void 0 : n({\n                action: e,\n                resource: t,\n                params: {\n                    ...m,\n                    resource: y\n                }\n            })) ?? Promise.resolve({\n                can: !0\n            }),\n        enabled: typeof n < \"u\",\n        ...p,\n        meta: {\n            ...p == null ? void 0 : p.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useCan\", u, t, [\n                \"useButtonCanAccess\",\n                \"useNavigationButton\"\n            ])\n        },\n        retry: !1\n    });\n    return typeof n > \"u\" ? {\n        data: {\n            can: !0\n        }\n    } : d;\n}, \"useCan\");\n\nvar cC = o(()=>{\n    let { can: e } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ct);\n    return {\n        can: react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>e ? o(async ({ params: s, ...n })=>{\n                let i = s != null && s.resource ? At(s.resource) : void 0;\n                return e({\n                    ...n,\n                    ...s ? {\n                        params: {\n                            ...s,\n                            resource: i\n                        }\n                    } : {}\n                });\n            }, \"canWithSanitizedResource\") : void 0, [\n            e\n        ])\n    };\n}, \"useCanWithoutCache\");\n\n\n\n\nvar PC = o((e)=>{\n    let [t, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), [s, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), [i, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), { resource: u, sort: c, sorters: p, filters: l = [], optionLabel: m = \"title\", optionValue: y = \"id\", searchField: d = typeof m == \"string\" ? m : \"title\", debounce: T = 300, successNotification: x, errorNotification: v, defaultValueQueryOptions: f, queryOptions: P, fetchSize: M, pagination: Q, hasPagination: g = !1, liveMode: C, defaultValue: h = [], selectedOptionsOrder: D = \"in-place\", onLiveEvent: A, onSearch: E, liveParams: L, meta: U, metaData: w, dataProviderName: N, overtimeOptions: b } = e, F = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((O)=>typeof m == \"string\" ? (0,lodash_es_get_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(O, m) : m(O), [\n        m\n    ]), V = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((O)=>typeof y == \"string\" ? (0,lodash_es_get_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"])(O, y) : y(O), [\n        y\n    ]), { resource: G, identifier: W } = q(u), j = ue()({\n        resource: G,\n        meta: I(U, w)\n    }), re = Array.isArray(h) ? h : [\n        h\n    ], te = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((O)=>{\n        a(O.data.map((_)=>({\n                label: F(_),\n                value: V(_)\n            })));\n    }, [\n        m,\n        y\n    ]), R = f ?? P, S = go({\n        resource: W,\n        ids: re,\n        queryOptions: {\n            ...R,\n            enabled: re.length > 0 && ((R == null ? void 0 : R.enabled) ?? !0),\n            onSuccess: (O)=>{\n                var _;\n                te(O), (_ = R == null ? void 0 : R.onSuccess) == null || _.call(R, O);\n            }\n        },\n        overtimeOptions: {\n            enabled: !1\n        },\n        meta: j,\n        metaData: j,\n        liveMode: \"off\",\n        dataProviderName: N\n    }), B = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((O)=>{\n        n(O.data.map((_)=>({\n                label: F(_),\n                value: V(_)\n            })));\n    }, [\n        m,\n        y\n    ]), H = $t({\n        resource: W,\n        sorters: I(p, c),\n        filters: l.concat(t),\n        pagination: {\n            current: Q == null ? void 0 : Q.current,\n            pageSize: (Q == null ? void 0 : Q.pageSize) ?? M,\n            mode: Q == null ? void 0 : Q.mode\n        },\n        hasPagination: g,\n        queryOptions: {\n            ...P,\n            onSuccess: (O)=>{\n                var _;\n                B(O), (_ = P == null ? void 0 : P.onSuccess) == null || _.call(P, O);\n            }\n        },\n        overtimeOptions: {\n            enabled: !1\n        },\n        successNotification: x,\n        errorNotification: v,\n        meta: j,\n        metaData: j,\n        liveMode: C,\n        liveParams: L,\n        onLiveEvent: A,\n        dataProviderName: N\n    }), { elapsedTime: $ } = fe({\n        ...b,\n        isLoading: H.isFetching || S.isFetching\n    }), X = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,lodash_es_uniqBy_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"])(D === \"in-place\" ? [\n            ...s,\n            ...i\n        ] : [\n            ...i,\n            ...s\n        ], \"value\"), [\n        s,\n        i\n    ]), ne = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(E), Y = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,lodash_es_debounce_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((O)=>{\n            if (ne.current) {\n                r(ne.current(O));\n                return;\n            }\n            if (!O) {\n                r([]);\n                return;\n            }\n            r([\n                {\n                    field: d,\n                    operator: \"contains\",\n                    value: O\n                }\n            ]);\n        }, T), [\n        d,\n        T\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        ne.current = E;\n    }, [\n        E\n    ]), {\n        queryResult: H,\n        defaultValueQueryResult: S,\n        query: H,\n        defaultValueQuery: S,\n        options: X,\n        onSearch: Y,\n        overtime: {\n            elapsedTime: $\n        }\n    };\n}, \"useSelect\");\n\n\n\n\n\nvar Un = [], En = [];\nfunction IC({ initialCurrent: e, initialPageSize: t, hasPagination: r = !0, pagination: s, initialSorter: n, permanentSorter: i = En, defaultSetFilterBehavior: a, initialFilter: u, permanentFilter: c = Un, filters: p, sorters: l, syncWithLocation: m, resource: y, successNotification: d, errorNotification: T, queryOptions: x, liveMode: v, onLiveEvent: f, liveParams: P, meta: M, metaData: Q, dataProviderName: g, overtimeOptions: C } = {}) {\n    var Wo, Ho, $o, zo, _o;\n    let { syncWithLocation: h } = to(), D = m ?? h, A = sn(v), E = oe(), { useLocation: L } = pe(), { search: U, pathname: w } = L(), N = ue(), b = Te(), F = ((p == null ? void 0 : p.mode) || \"server\") === \"server\", V = ((l == null ? void 0 : l.mode) || \"server\") === \"server\", G = r === !1 ? \"off\" : \"server\", W = ((s == null ? void 0 : s.mode) ?? G) !== \"off\", K = I(s == null ? void 0 : s.current, e), j = I(s == null ? void 0 : s.pageSize, t), re = I(M, Q), { parsedCurrent: te, parsedPageSize: R, parsedSorter: S, parsedFilters: B } = vr(U ?? \"?\"), H = I(p == null ? void 0 : p.initial, u), $ = I(p == null ? void 0 : p.permanent, c) ?? Un, X = I(l == null ? void 0 : l.initial, n), ne = I(l == null ? void 0 : l.permanent, i) ?? En, Y = I(p == null ? void 0 : p.defaultBehavior, a) ?? \"merge\", O, _, ae, J;\n    D ? (O = ((Wo = b == null ? void 0 : b.params) == null ? void 0 : Wo.current) || te || K || 1, _ = ((Ho = b == null ? void 0 : b.params) == null ? void 0 : Ho.pageSize) || R || j || 10, ae = (($o = b == null ? void 0 : b.params) == null ? void 0 : $o.sorters) || (S.length ? S : X), J = ((zo = b == null ? void 0 : b.params) == null ? void 0 : zo.filters) || (B.length ? B : H)) : (O = K || 1, _ = j || 10, ae = X, J = H);\n    let { replace: we } = he(), ye = Pe(), { resource: Ve, identifier: Ne } = q(y), se = N({\n        resource: Ve,\n        meta: re\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        warn_once__WEBPACK_IMPORTED_MODULE_1__(typeof Ne > \"u\", \"useTable: `resource` is not defined.\");\n    }, [\n        Ne\n    ]);\n    let [me, ce] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Lr(ne, ae ?? [])), [ve, rt] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Er($, J ?? [])), [Ke, Ct] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(O), [Ge, Tt] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(_), xt = o(()=>{\n        if (E === \"new\") {\n            let { sorters: jo, filters: Nc, pageSize: Bc, current: Kc, ...sa } = (b == null ? void 0 : b.params) ?? {};\n            return sa;\n        }\n        let { sorter: Ie, filters: ot, pageSize: zr, current: _r, ...jr } = qs__WEBPACK_IMPORTED_MODULE_6__.parse(U, {\n            ignoreQueryPrefix: !0\n        });\n        return jr;\n    }, \"getCurrentQueryParams\"), bt = o(({ pagination: { current: Ie, pageSize: ot }, sorter: zr, filters: _r })=>{\n        if (E === \"new\") return ye({\n            type: \"path\",\n            options: {\n                keepHash: !0,\n                keepQuery: !0\n            },\n            query: {\n                ...W ? {\n                    current: Ie,\n                    pageSize: ot\n                } : {},\n                sorters: zr,\n                filters: _r,\n                ...xt()\n            }\n        }) ?? \"\";\n        let jr = qs__WEBPACK_IMPORTED_MODULE_6__.parse(U == null ? void 0 : U.substring(1)), jo = Dr({\n            pagination: {\n                pageSize: ot,\n                current: Ie\n            },\n            sorters: me ?? zr,\n            filters: _r,\n            ...jr\n        });\n        return `${w ?? \"\"}?${jo ?? \"\"}`;\n    }, \"createLinkForSyncWithLocation\");\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        U === \"\" && (Ct(O), Tt(_), ce(Lr(ne, ae ?? [])), rt(Er($, J ?? [])));\n    }, [\n        U\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (D) {\n            let Ie = xt();\n            if (E === \"new\") ye({\n                type: \"replace\",\n                options: {\n                    keepQuery: !0\n                },\n                query: {\n                    ...W ? {\n                        pageSize: Ge,\n                        current: Ke\n                    } : {},\n                    sorters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(me, ne, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n                    filters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(ve, $, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])\n                }\n            });\n            else {\n                let ot = Dr({\n                    ...W ? {\n                        pagination: {\n                            pageSize: Ge,\n                            current: Ke\n                        }\n                    } : {},\n                    sorters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(me, ne, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n                    filters: (0,lodash_es_differenceWith_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(ve, $, lodash_es_isEqual_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n                    ...Ie\n                });\n                return we == null ? void 0 : we(`${w}?${ot}`, void 0, {\n                    shallow: !0\n                });\n            }\n        }\n    }, [\n        D,\n        Ke,\n        Ge,\n        me,\n        ve\n    ]);\n    let or = $t({\n        resource: Ne,\n        hasPagination: r,\n        pagination: {\n            current: Ke,\n            pageSize: Ge,\n            mode: s == null ? void 0 : s.mode\n        },\n        filters: F ? St($, ve) : void 0,\n        sorters: V ? Ur(ne, me) : void 0,\n        queryOptions: x,\n        overtimeOptions: C,\n        successNotification: d,\n        errorNotification: T,\n        meta: se,\n        metaData: se,\n        liveMode: A,\n        liveParams: P,\n        onLiveEvent: f,\n        dataProviderName: g\n    }), Bo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie)=>{\n        rt((ot)=>St($, Ie, ot));\n    }, [\n        $\n    ]), Ko = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie)=>{\n        rt(St($, Ie));\n    }, [\n        $\n    ]), Go = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie)=>{\n        rt((ot)=>St($, Ie(ot)));\n    }, [\n        $\n    ]), oa = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie, ot = Y)=>{\n        typeof Ie == \"function\" ? Go(Ie) : ot === \"replace\" ? Ko(Ie) : Bo(Ie);\n    }, [\n        Go,\n        Ko,\n        Bo\n    ]), Oo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Ie)=>{\n        ce(()=>Ur(ne, Ie));\n    }, [\n        ne\n    ]);\n    return {\n        tableQueryResult: or,\n        tableQuery: or,\n        sorters: me,\n        setSorters: Oo,\n        sorter: me,\n        setSorter: Oo,\n        filters: ve,\n        setFilters: oa,\n        current: Ke,\n        setCurrent: Ct,\n        pageSize: Ge,\n        setPageSize: Tt,\n        pageCount: Ge ? Math.ceil((((_o = or.data) == null ? void 0 : _o.total) ?? 0) / Ge) : 1,\n        createLinkForSyncWithLocation: bt,\n        overtime: or.overtime\n    };\n}\no(IC, \"useTable\");\n\n\n\n\nvar Et = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Mn = o(({ create: e, get: t, update: r, children: s })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Et.Provider, {\n        value: {\n            create: e,\n            get: t,\n            update: r\n        }\n    }, s), \"AuditLogContextProvider\");\nvar Je = o(({ logMutationOptions: e, renameMutationOptions: t } = {})=>{\n    let r = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Et), { keys: n, preferLegacyKeys: i } = Z(), a = ie(), { resources: u } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Rt), { data: c, refetch: p, isLoading: l } = no({\n        v3LegacyAuthProviderCompatible: !!(a != null && a.isLegacy),\n        queryOptions: {\n            enabled: !!(s != null && s.create)\n        }\n    }), m = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)(async (d)=>{\n        var f, P, M, Q, g;\n        let T = Ee(d.resource, u), x = I((f = T == null ? void 0 : T.meta) == null ? void 0 : f.audit, (P = T == null ? void 0 : T.options) == null ? void 0 : P.audit, (Q = (M = T == null ? void 0 : T.options) == null ? void 0 : M.auditLog) == null ? void 0 : Q.permissions);\n        if (x && !Xr(x, d.action)) return;\n        let v;\n        return l && s != null && s.create && (v = await p()), await ((g = s.create) == null ? void 0 : g.call(s, {\n            ...d,\n            author: c ?? (v == null ? void 0 : v.data)\n        }));\n    }, {\n        mutationKey: n().audit().action(\"log\").get(),\n        ...e,\n        meta: {\n            ...e == null ? void 0 : e.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLog\", i)\n        }\n    }), y = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)(async (d)=>{\n        var T;\n        return await ((T = s.update) == null ? void 0 : T.call(s, d));\n    }, {\n        onSuccess: (d)=>{\n            d != null && d.resource && r.invalidateQueries(n().audit().resource((d == null ? void 0 : d.resource) ?? \"\").action(\"list\").get(i));\n        },\n        mutationKey: n().audit().action(\"rename\").get(),\n        ...t,\n        meta: {\n            ...t == null ? void 0 : t.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLog\", i)\n        }\n    });\n    return {\n        log: m,\n        rename: y\n    };\n}, \"useLog\");\n\n\n\nvar eb = o(({ resource: e, action: t, meta: r, author: s, metaData: n, queryOptions: i })=>{\n    let { get: a } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Et), { keys: u, preferLegacyKeys: c } = Z();\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)({\n        queryKey: u().audit().resource(e).action(\"list\").params(r).get(c),\n        queryFn: ()=>(a == null ? void 0 : a({\n                resource: e,\n                action: t,\n                author: s,\n                meta: r,\n                metaData: n\n            })) ?? Promise.resolve([]),\n        enabled: typeof a < \"u\",\n        ...i,\n        retry: !1,\n        meta: {\n            ...i == null ? void 0 : i.meta,\n            ...(0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.getXRay)(\"useLogList\", c, e)\n        }\n    });\n}, \"useLogList\");\n\n\nvar fb = o(({ meta: e = {} } = {})=>{\n    let t = oe(), { i18nProvider: r } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe), s = Te(), n = z(), { resources: i, resource: a, action: u } = q(), { options: { textTransformers: c } } = ge(), p = [];\n    if (!(a != null && a.name)) return {\n        breadcrumbs: p\n    };\n    let l = o((m)=>{\n        var d, T, x, v, f, P;\n        let y = typeof m == \"string\" ? Ee(m, i, t === \"legacy\") ?? {\n            name: m\n        } : m;\n        if (y) {\n            let M = I((d = y == null ? void 0 : y.meta) == null ? void 0 : d.parent, y == null ? void 0 : y.parentName);\n            M && l(M);\n            let Q = Se(y, i, t === \"legacy\").find((h)=>h.action === \"list\"), g = (T = Q == null ? void 0 : Q.resource) != null && T.list ? Q == null ? void 0 : Q.route : void 0, C = g ? t === \"legacy\" ? g : We(g, y == null ? void 0 : y.meta, s, e) : void 0;\n            p.push({\n                label: I((x = y.meta) == null ? void 0 : x.label, (v = y.options) == null ? void 0 : v.label) ?? n(`${y.name}.${y.name}`, c.humanize(y.name)),\n                href: C,\n                icon: I((f = y.meta) == null ? void 0 : f.icon, (P = y.options) == null ? void 0 : P.icon, y.icon)\n            });\n        }\n    }, \"addBreadcrumb\");\n    if (l(a), u && u !== \"list\") {\n        let m = `actions.${u}`, y = n(m);\n        typeof r < \"u\" && y === m ? (warn_once__WEBPACK_IMPORTED_MODULE_1__(!0, `[useBreadcrumb]: Breadcrumb missing translate key for the \"${u}\" action. Please add \"actions.${u}\" key to your translation file.\nFor more information, see https://refine.dev/docs/api-reference/core/hooks/useBreadcrumb/#i18n-support`), p.push({\n            label: n(`buttons.${u}`, c.humanize(u))\n        })) : p.push({\n            label: n(m, c.humanize(u))\n        });\n    }\n    return {\n        breadcrumbs: p\n    };\n}, \"useBreadcrumb\");\n\nvar Ft = o((e, t, r = !1)=>{\n    let s = [], n = ze(e, t);\n    for(; n;)s.push(n), n = ze(n, t);\n    return s.reverse(), `/${[\n        ...s,\n        e\n    ].map((a)=>Ae((r ? a.route : void 0) ?? a.identifier ?? a.name)).join(\"/\").replace(/^\\//, \"\")}`;\n}, \"createResourceKey\");\nvar kn = o((e, t = !1)=>{\n    let r = {\n        item: {\n            name: \"__root__\"\n        },\n        children: {}\n    };\n    e.forEach((n)=>{\n        let i = [], a = ze(n, e);\n        for(; a;)i.push(a), a = ze(a, e);\n        i.reverse();\n        let u = r;\n        i.forEach((p)=>{\n            let l = (t ? p.route : void 0) ?? p.identifier ?? p.name;\n            u.children[l] || (u.children[l] = {\n                item: p,\n                children: {}\n            }), u = u.children[l];\n        });\n        let c = (t ? n.route : void 0) ?? n.identifier ?? n.name;\n        u.children[c] || (u.children[c] = {\n            item: n,\n            children: {}\n        });\n    });\n    let s = o((n)=>{\n        let i = [];\n        return Object.keys(n.children).forEach((a)=>{\n            let u = Ft(n.children[a].item, e, t), c = {\n                ...n.children[a].item,\n                key: u,\n                children: s(n.children[a])\n            };\n            i.push(c);\n        }), i;\n    }, \"flatten\");\n    return s(r);\n}, \"createTree\");\nvar An = o((e)=>e.split(\"?\")[0].split(\"#\")[0].replace(/(.+)(\\/$)/, \"$1\"), \"getCleanPath\"), zu = o(({ meta: e, hideOnMissingParameter: t = !0 } = {\n    hideOnMissingParameter: !0\n})=>{\n    let r = z(), s = Ut(), n = oe(), { resource: i, resources: a } = q(), { pathname: u } = Te(), { useLocation: c } = pe(), { pathname: p } = c(), l = ht(), y = `/${((n === \"legacy\" ? An(p) : u ? An(u) : void 0) ?? \"\").replace(/^\\//, \"\")}`, d = i ? Ft(i, a, n === \"legacy\") : y ?? \"\", T = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (!i) return [];\n        let f = ze(i, a), P = [\n            Ft(i, a)\n        ];\n        for(; f;)P.push(Ft(f, a)), f = ze(f, a);\n        return P;\n    }, []), x = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((f)=>{\n        var M, Q, g, C, h, D;\n        if (I((M = f == null ? void 0 : f.meta) == null ? void 0 : M.hide, (Q = f == null ? void 0 : f.options) == null ? void 0 : Q.hide) || !(f != null && f.list) && f.children.length === 0) return;\n        let P = f.list ? s({\n            resource: f,\n            action: \"list\",\n            legacy: n === \"legacy\",\n            meta: e\n        }) : void 0;\n        if (!(t && P && P.match(/(\\/|^):(.+?)(\\/|$){1}/))) return {\n            ...f,\n            route: P,\n            icon: I((g = f.meta) == null ? void 0 : g.icon, (C = f.options) == null ? void 0 : C.icon, f.icon),\n            label: I((h = f == null ? void 0 : f.meta) == null ? void 0 : h.label, (D = f == null ? void 0 : f.options) == null ? void 0 : D.label) ?? r(`${f.name}.${f.name}`, l(f.name, \"plural\"))\n        };\n    }, [\n        n,\n        e,\n        s,\n        r,\n        t\n    ]), v = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        let f = kn(a, n === \"legacy\"), P = o((M)=>M.flatMap((Q)=>{\n                let g = P(Q.children), C = x({\n                    ...Q,\n                    children: g\n                });\n                return C ? [\n                    C\n                ] : [];\n            }), \"prepare\");\n        return P(f);\n    }, [\n        a,\n        n,\n        x\n    ]);\n    return {\n        defaultOpenKeys: T,\n        selectedKey: d,\n        menuItems: v\n    };\n}, \"useMenu\");\n\nvar Ao = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({}), Zu = o(({ children: e, value: t })=>{\n    let r = Br(), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ...r,\n            ...t\n        }), [\n        r,\n        t\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Ao.Provider, {\n        value: s\n    }, e);\n}, \"MetaContextProvider\"), Br = o(()=>{\n    if (!(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Ao)) throw new Error(\"useMetaContext must be used within a MetaContextProvider\");\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Ao);\n}, \"useMetaContext\");\nvar ue = o(()=>{\n    let { params: e } = Te(), t = Br();\n    return o(({ resource: s, meta: n } = {})=>{\n        let { meta: i } = At(s) ?? {\n            meta: {}\n        }, { filters: a, sorters: u, current: c, pageSize: p, ...l } = e ?? {}, m = {\n            ...i,\n            ...l,\n            ...n\n        };\n        return t != null && t.tenantId && (m.tenantId = t.tenantId), m;\n    }, \"getMetaFn\");\n}, \"useMeta\");\n\nvar kt = o(()=>{\n    let { options: e } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(Qe);\n    return e;\n}, \"useRefineOptions\");\n\nvar Qn = o((e)=>{\n    let t = oe(), { useParams: r } = pe(), s = Te(), n = r(), i = t === \"legacy\" ? n.id : s.id;\n    return e ?? i;\n}, \"useId\");\nvar Vn = o((e)=>{\n    let t = oe(), { useParams: r } = pe(), s = Te(), n = r(), i = t === \"legacy\" ? n.action : s.action;\n    return e ?? i;\n}, \"useAction\");\nfunction qe(e) {\n    let { select: t, identifier: r } = q(), s = (e == null ? void 0 : e.resource) ?? r, { identifier: n = void 0, resource: i = void 0 } = s ? t(s, !0) : {}, a = r === n, u = Qn(), c = Vn(e == null ? void 0 : e.action), p = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>a ? (e == null ? void 0 : e.id) ?? u : e == null ? void 0 : e.id, [\n        a,\n        e == null ? void 0 : e.id,\n        u\n    ]), [l, m] = react__WEBPACK_IMPORTED_MODULE_0__.useState(p);\n    react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>m(p), [\n        p\n    ]);\n    let y = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>!a && !(e != null && e.action) ? \"create\" : c === \"edit\" || c === \"clone\" ? c : \"create\", [\n        c,\n        a,\n        e == null ? void 0 : e.action\n    ]);\n    return {\n        id: l,\n        setId: m,\n        resource: i,\n        action: c,\n        identifier: n,\n        formAction: y\n    };\n}\no(qe, \"useResourceParams\");\nfunction Gr({ type: e }) {\n    let t = z(), { textTransformers: { humanize: r } } = kt(), s = `buttons.${e}`, n = r(e);\n    return {\n        label: t(s, n)\n    };\n}\no(Gr, \"useActionableButton\");\n\n\nvar Or = o((e)=>{\n    var p, l, m;\n    let t = z(), r = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ct), s = ((p = e.accessControl) == null ? void 0 : p.enabled) ?? r.options.buttons.enableAccessControl, n = ((l = e.accessControl) == null ? void 0 : l.hideIfUnauthorized) ?? r.options.buttons.hideIfUnauthorized, { data: i } = Ar({\n        resource: (m = e.resource) == null ? void 0 : m.name,\n        action: e.action === \"clone\" ? \"create\" : e.action,\n        params: {\n            meta: e.meta,\n            id: e.id,\n            resource: e.resource\n        },\n        queryOptions: {\n            enabled: s\n        }\n    }), a = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>i != null && i.can ? \"\" : i != null && i.reason ? i.reason : t(\"buttons.notAccessTitle\", \"You don't have permission to access\"), [\n        i == null ? void 0 : i.can,\n        i == null ? void 0 : i.reason,\n        t\n    ]), u = s && n && !(i != null && i.can), c = (i == null ? void 0 : i.can) === !1;\n    return {\n        title: a,\n        hidden: u,\n        disabled: c,\n        canAccess: i\n    };\n}, \"useButtonCanAccess\");\nfunction Qt(e) {\n    var P;\n    let t = he(), r = oe(), s = yt(), { Link: n } = pe(), i = z(), a = ht(), { textTransformers: { humanize: u } } = kt(), { id: c, resource: p, identifier: l } = qe({\n        resource: e.resource,\n        id: e.action === \"create\" ? void 0 : e.id\n    }), { canAccess: m, title: y, hidden: d, disabled: T } = Or({\n        action: e.action,\n        accessControl: e.accessControl,\n        meta: e.meta,\n        id: c,\n        resource: p\n    }), x = r === \"legacy\" ? n : s, v = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (!p) return \"\";\n        switch(e.action){\n            case \"create\":\n            case \"list\":\n                return t[`${e.action}Url`](p, e.meta);\n            default:\n                return c ? t[`${e.action}Url`](p, c, e.meta) : \"\";\n        }\n    }, [\n        p,\n        c,\n        e.meta,\n        t[`${e.action}Url`]\n    ]), f = e.action === \"list\" ? i(`${l ?? e.resource}.titles.list`, a(((P = p == null ? void 0 : p.meta) == null ? void 0 : P.label) ?? (p == null ? void 0 : p.label) ?? l ?? e.resource, \"plural\")) : i(`buttons.${e.action}`, u(e.action));\n    return {\n        to: v,\n        label: f,\n        title: y,\n        disabled: T,\n        hidden: d,\n        canAccess: m,\n        LinkComponent: x\n    };\n}\no(Qt, \"useNavigationButton\");\nfunction qu(e) {\n    let t = z(), { mutate: r, isLoading: s, variables: n } = Po(), { setWarnWhen: i } = vt(), { mutationMode: a } = _e(e.mutationMode), { id: u, resource: c, identifier: p } = qe({\n        resource: e.resource,\n        id: e.id\n    }), { title: l, disabled: m, hidden: y, canAccess: d } = Or({\n        action: \"delete\",\n        accessControl: e.accessControl,\n        id: u,\n        resource: c\n    }), T = t(\"buttons.delete\", \"Delete\"), x = t(\"buttons.delete\", \"Delete\"), v = t(\"buttons.confirm\", \"Are you sure?\"), f = t(\"buttons.cancel\", \"Cancel\"), P = u === (n == null ? void 0 : n.id) && s;\n    return {\n        label: T,\n        title: l,\n        hidden: y,\n        disabled: m,\n        canAccess: d,\n        loading: P,\n        confirmOkLabel: x,\n        cancelLabel: f,\n        confirmTitle: v,\n        onConfirm: o(()=>{\n            u && p && (i(!1), r({\n                id: u,\n                resource: p,\n                mutationMode: a,\n                successNotification: e.successNotification,\n                errorNotification: e.errorNotification,\n                meta: e.meta,\n                metaData: e.meta,\n                dataProviderName: e.dataProviderName,\n                invalidates: e.invalidates\n            }, {\n                onSuccess: e.onSuccess\n            }));\n        }, \"onConfirm\")\n    };\n}\no(qu, \"useDeleteButton\");\n\nfunction tc(e) {\n    let t = z(), { keys: r, preferLegacyKeys: s } = Z(), n = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useQueryClient)(), i = ke(), { identifier: a, id: u } = qe({\n        resource: e.resource,\n        id: e.id\n    }), { resources: c } = q(), p = !!n.isFetching({\n        queryKey: r().data(ee(a, e.dataProviderName, c)).resource(a).action(\"one\").get(s)\n    }), l = o(()=>{\n        i({\n            id: u,\n            invalidates: [\n                \"detail\"\n            ],\n            dataProviderName: e.dataProviderName,\n            resource: a\n        });\n    }, \"onClick\"), m = t(\"buttons.refresh\", \"Refresh\");\n    return {\n        onClick: l,\n        label: m,\n        loading: p\n    };\n}\no(tc, \"useRefreshButton\");\nvar Zv = o((e)=>Qt({\n        ...e,\n        action: \"show\"\n    }), \"useShowButton\"), Yv = o((e)=>Qt({\n        ...e,\n        action: \"edit\"\n    }), \"useEditButton\"), Jv = o((e)=>Qt({\n        ...e,\n        action: \"clone\"\n    }), \"useCloneButton\"), qv = o((e)=>Qt({\n        ...e,\n        action: \"create\"\n    }), \"useCreateButton\"), eD = o((e)=>Qt({\n        ...e,\n        action: \"list\"\n    }), \"useListButton\"), tD = o(()=>Gr({\n        type: \"save\"\n    }), \"useSaveButton\"), rD = o(()=>Gr({\n        type: \"export\"\n    }), \"useExportButton\"), oD = o(()=>Gr({\n        type: \"import\"\n    }), \"useImportButton\");\nvar sc = o(()=>{\n    let [e, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), r = z(), { push: s } = he(), n = Pe(), i = oe(), { resource: a, action: u } = q();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        a && u && t(r(\"pages.error.info\", {\n            action: u,\n            resource: a.name\n        }, `You may have forgotten to add the \"${u}\" component to \"${a.name}\" resource.`));\n    }, [\n        a,\n        u\n    ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", null, r(\"pages.error.404\", void 0, \"Sorry, the page you visited does not exist.\")), e && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null, e), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        onClick: ()=>{\n            i === \"legacy\" ? s(\"/\") : n({\n                to: \"/\"\n            });\n        }\n    }, r(\"pages.error.backHome\", void 0, \"Back Home\")));\n}, \"ErrorComponent\");\n\nvar Yr = o(()=>{\n    let [e, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [r, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), n = z(), i = ie(), { mutate: a } = Ht({\n        v3LegacyAuthProviderCompatible: !!(i != null && i.isLegacy)\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", null, n(\"pages.login.title\", \"Sign in your account\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (u)=>{\n            u.preventDefault(), a({\n                username: e,\n                password: r\n            });\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"table\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tbody\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tr\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, n(\"pages.login.username\", void 0, \"username\"), \":\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"text\",\n        size: 20,\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        autoFocus: !0,\n        required: !0,\n        value: e,\n        onChange: (u)=>t(u.target.value)\n    }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tr\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, n(\"pages.login.password\", void 0, \"password\"), \":\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: r,\n        onChange: (u)=>s(u.target.value)\n    }))))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        value: \"login\"\n    })));\n}, \"LoginPage\");\n\n\nvar Kn = o(({ providers: e, registerLink: t, forgotPasswordLink: r, rememberMe: s, contentProps: n, wrapperProps: i, renderContent: a, formProps: u, title: c = void 0, hideForm: p, mutationVariables: l })=>{\n    let m = oe(), y = yt(), { Link: d } = pe(), T = m === \"legacy\" ? d : y, [x, v] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [f, P] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [M, Q] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), g = z(), C = ie(), { mutate: h } = Ht({\n        v3LegacyAuthProviderCompatible: !!(C != null && C.isLegacy)\n    }), D = o((L, U)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(T, {\n            to: L\n        }, U), \"renderLink\"), A = o(()=>e ? e.map((L)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                key: L.name,\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    marginBottom: \"1rem\"\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n                onClick: ()=>h({\n                        ...l,\n                        providerName: L.name\n                    }),\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\"\n                }\n            }, L == null ? void 0 : L.icon, L.label ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", null, L.label)))) : null, \"renderProviders\"), E = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, g(\"pages.login.title\", \"Sign in to your account\")), A(), !p && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (L)=>{\n            L.preventDefault(), h({\n                ...l,\n                email: x,\n                password: f,\n                remember: M\n            });\n        },\n        ...u\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"email-input\"\n    }, g(\"pages.login.fields.email\", \"Email\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        type: \"text\",\n        size: 20,\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        required: !0,\n        value: x,\n        onChange: (L)=>v(L.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"password-input\"\n    }, g(\"pages.login.fields.password\", \"Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"password-input\",\n        type: \"password\",\n        name: \"password\",\n        required: !0,\n        size: 20,\n        value: f,\n        onChange: (L)=>P(L.target.value)\n    }), s ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"remember-me-input\"\n    }, g(\"pages.login.buttons.rememberMe\", \"Remember me\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"remember-me-input\",\n        name: \"remember\",\n        type: \"checkbox\",\n        size: 20,\n        checked: M,\n        value: M.toString(),\n        onChange: ()=>{\n            Q(!M);\n        }\n    }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null), r ?? D(\"/forgot-password\", g(\"pages.login.buttons.forgotPassword\", \"Forgot password?\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        value: g(\"pages.login.signin\", \"Sign in\")\n    }), t ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, g(\"pages.login.buttons.noAccount\", \"Don’t have an account?\"), \" \", D(\"/register\", g(\"pages.login.register\", \"Sign up\")))))), t !== !1 && p && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, g(\"pages.login.buttons.noAccount\", \"Don’t have an account?\"), \" \", D(\"/register\", g(\"pages.login.register\", \"Sign up\"))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...i\n    }, a ? a(E, c) : E);\n}, \"LoginPage\");\n\nvar On = o(({ providers: e, loginLink: t, wrapperProps: r, contentProps: s, renderContent: n, formProps: i, title: a = void 0, hideForm: u, mutationVariables: c })=>{\n    let p = oe(), l = yt(), { Link: m } = pe(), y = p === \"legacy\" ? m : l, [d, T] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [x, v] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), f = z(), P = ie(), { mutate: M, isLoading: Q } = co({\n        v3LegacyAuthProviderCompatible: !!(P != null && P.isLegacy)\n    }), g = o((D, A)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(y, {\n            to: D\n        }, A), \"renderLink\"), C = o(()=>e ? e.map((D)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n                key: D.name,\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    marginBottom: \"1rem\"\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n                onClick: ()=>M({\n                        ...c,\n                        providerName: D.name\n                    }),\n                style: {\n                    display: \"flex\",\n                    alignItems: \"center\"\n                }\n            }, D == null ? void 0 : D.icon, D.label ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", null, D.label)))) : null, \"renderProviders\"), h = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...s\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, f(\"pages.register.title\", \"Sign up for your account\")), C(), !u && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (D)=>{\n            D.preventDefault(), M({\n                ...c,\n                email: d,\n                password: x\n            });\n        },\n        ...i\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"email-input\"\n    }, f(\"pages.register.fields.email\", \"Email\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        type: \"email\",\n        size: 20,\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        required: !0,\n        value: d,\n        onChange: (D)=>T(D.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"password-input\"\n    }, f(\"pages.register.fields.password\", \"Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"password-input\",\n        name: \"password\",\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: x,\n        onChange: (D)=>v(D.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        value: f(\"pages.register.buttons.submit\", \"Sign up\"),\n        disabled: Q\n    }), t ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, f(\"pages.login.buttons.haveAccount\", \"Have an account?\"), \" \", g(\"/login\", f(\"pages.login.signin\", \"Sign in\"))))))), t !== !1 && u && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, f(\"pages.login.buttons.haveAccount\", \"Have an account?\"), \" \", g(\"/login\", f(\"pages.login.signin\", \"Sign in\"))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...r\n    }, n ? n(h, a) : h);\n}, \"RegisterPage\");\n\nvar Wn = o(({ loginLink: e, wrapperProps: t, contentProps: r, renderContent: s, formProps: n, title: i = void 0, mutationVariables: a })=>{\n    let u = z(), c = oe(), p = yt(), { Link: l } = pe(), m = c === \"legacy\" ? l : p, [y, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), { mutate: T, isLoading: x } = lo(), v = o((P, M)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(m, {\n            to: P\n        }, M), \"renderLink\"), f = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...r\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, u(\"pages.forgotPassword.title\", \"Forgot your password?\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (P)=>{\n            P.preventDefault(), T({\n                ...a,\n                email: y\n            });\n        },\n        ...n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"email-input\"\n    }, u(\"pages.forgotPassword.fields.email\", \"Email\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"email-input\",\n        name: \"email\",\n        type: \"mail\",\n        autoCorrect: \"off\",\n        spellCheck: !1,\n        autoCapitalize: \"off\",\n        required: !0,\n        value: y,\n        onChange: (P)=>d(P.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        disabled: x,\n        value: u(\"pages.forgotPassword.buttons.submit\", \"Send reset instructions\")\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"br\", null), e ?? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, u(\"pages.register.buttons.haveAccount\", \"Have an account? \"), \" \", v(\"/login\", u(\"pages.login.signin\", \"Sign in\"))))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...t\n    }, s ? s(f, i) : f);\n}, \"ForgotPasswordPage\");\n\nvar $n = o(({ wrapperProps: e, contentProps: t, renderContent: r, formProps: s, title: n = void 0, mutationVariables: i })=>{\n    let a = z(), u = ie(), { mutate: c, isLoading: p } = fo({\n        v3LegacyAuthProviderCompatible: !!(u != null && u.isLegacy)\n    }), [l, m] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [y, d] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), T = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...t\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            textAlign: \"center\"\n        }\n    }, a(\"pages.updatePassword.title\", \"Update Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        onSubmit: (x)=>{\n            x.preventDefault(), c({\n                ...i,\n                password: l,\n                confirmPassword: y\n            });\n        },\n        ...s\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 25\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"password-input\"\n    }, a(\"pages.updatePassword.fields.password\", \"New Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"password-input\",\n        name: \"password\",\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: l,\n        onChange: (x)=>m(x.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"confirm-password-input\"\n    }, a(\"pages.updatePassword.fields.confirmPassword\", \"Confirm New Password\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"confirm-password-input\",\n        name: \"confirmPassword\",\n        type: \"password\",\n        required: !0,\n        size: 20,\n        value: y,\n        onChange: (x)=>d(x.target.value)\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        type: \"submit\",\n        disabled: p,\n        value: a(\"pages.updatePassword.buttons.submit\", \"Update\")\n    }))));\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...e\n    }, r ? r(T, n) : T);\n}, \"UpdatePasswordPage\");\nvar ac = o((e)=>{\n    let { type: t } = e;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, o(()=>{\n        switch(t){\n            case \"register\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(On, {\n                    ...e\n                });\n            case \"forgotPassword\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Wn, {\n                    ...e\n                });\n            case \"updatePassword\":\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($n, {\n                    ...e\n                });\n            default:\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Kn, {\n                    ...e\n                });\n        }\n    }, \"renderView\")());\n}, \"AuthPage\");\n\nvar Qo = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", null, \"Welcome on board\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null, \"Your configuration is completed.\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", null, \"Now you can get started by adding your resources to the\", \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", null, \"`resources`\"), \" property of \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", null, \"`<Refine>`\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            gap: 8\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://refine.dev\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", null, \"Documentation\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://refine.dev/examples\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", null, \"Examples\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        href: \"https://discord.gg/refine\",\n        target: \"_blank\",\n        rel: \"noreferrer\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", null, \"Community\")))), \"ReadyPage\");\n\n\nvar uc = [\n    {\n        title: \"Documentation\",\n        description: \"Learn about the technical details of using Refine in your projects.\",\n        link: \"https://refine.dev/docs\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/book.svg\"\n    },\n    {\n        title: \"Tutorial\",\n        description: \"Learn how to use Refine by building a fully-functioning CRUD app, from scratch to full launch.\",\n        link: \"https://refine.dev/tutorial\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/hat.svg\"\n    },\n    {\n        title: \"Templates\",\n        description: \"Explore a range of pre-built templates, perfect everything from admin panels to dashboards and CRMs.\",\n        link: \"https://refine.dev/templates\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/application.svg\"\n    },\n    {\n        title: \"Community\",\n        description: \"Join our Discord community and keep up with the latest news.\",\n        link: \"https://discord.gg/refine\",\n        iconUrl: \"https://refine.ams3.cdn.digitaloceanspaces.com/welcome-page/discord.svg\"\n    }\n], zn = o(()=>{\n    let e = Pr(\"(max-width: 1010px)\"), t = Pr(\"(max-width: 650px)\"), r = o(()=>t ? \"1, 280px\" : e ? \"2, 280px\" : \"4, 1fr\", \"getGridTemplateColumns\"), s = o(()=>t ? \"32px\" : e ? \"40px\" : \"48px\", \"getHeaderFontSize\"), n = o(()=>t ? \"16px\" : e ? \"20px\" : \"24px\", \"getSubHeaderFontSize\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"fixed\",\n            zIndex: 10,\n            inset: 0,\n            overflow: \"auto\",\n            width: \"100dvw\",\n            height: \"100dvh\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            overflow: \"hidden\",\n            position: \"relative\",\n            backgroundSize: \"cover\",\n            backgroundRepeat: \"no-repeat\",\n            background: t ? \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(88.89% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(88.89% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30\" : e ? \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(66.67% 50% at 50% 100%, rgba(38, 217, 127, 0.10) 0%, rgba(38, 217, 127, 0.00) 100%), radial-gradient(66.67% 50% at 50% 0%, rgba(71, 235, 235, 0.15) 0%, rgba(71, 235, 235, 0.00) 100%), #1D1E30\" : \"url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/landing-noise.webp), radial-gradient(35.56% 50% at 50% 100%, rgba(38, 217, 127, 0.12) 0%, rgba(38, 217, 127, 0) 100%), radial-gradient(35.56% 50% at 50% 0%, rgba(71, 235, 235, 0.18) 0%, rgba(71, 235, 235, 0) 100%), #1D1E30\",\n            minHeight: \"100%\",\n            minWidth: \"100%\",\n            fontFamily: \"Arial\",\n            color: \"#FFFFFF\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            zIndex: 2,\n            position: \"absolute\",\n            width: t ? \"400px\" : \"800px\",\n            height: \"552px\",\n            opacity: \"0.5\",\n            background: \"url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/welcome-page-hexagon.png)\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundSize: \"contain\",\n            top: \"0\",\n            left: \"50%\",\n            transform: \"translateX(-50%)\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height: t ? \"40px\" : \"80px\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            justifyContent: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            backgroundRepeat: \"no-repeat\",\n            backgroundSize: t ? \"112px 58px\" : \"224px 116px\",\n            backgroundImage: \"url(https://refine.ams3.cdn.digitaloceanspaces.com/assets/refine-logo.svg)\",\n            width: t ? 112 : 224,\n            height: t ? 58 : 116\n        }\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height: t ? \"120px\" : e ? \"200px\" : \"30vh\",\n            minHeight: t ? \"120px\" : \"200px\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"16px\",\n            textAlign: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h1\", {\n        style: {\n            fontSize: s(),\n            fontWeight: 700,\n            margin: \"0px\"\n        }\n    }, \"Welcome Aboard!\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h4\", {\n        style: {\n            fontSize: n(),\n            fontWeight: 400,\n            margin: \"0px\"\n        }\n    }, \"Your configuration is completed.\")), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            height: \"64px\"\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"grid\",\n            gridTemplateColumns: `repeat(${r()})`,\n            justifyContent: \"center\",\n            gap: \"48px\",\n            paddingRight: \"16px\",\n            paddingLeft: \"16px\",\n            paddingBottom: \"32px\",\n            maxWidth: \"976px\",\n            margin: \"auto\"\n        }\n    }, uc.map((i)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(cc, {\n            key: `welcome-page-${i.title}`,\n            card: i\n        })))));\n}, \"ConfigSuccessPage\"), cc = o(({ card: e })=>{\n    let { title: t, description: r, iconUrl: s, link: n } = e, [i, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"16px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            alignItems: \"center\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        onPointerEnter: ()=>a(!0),\n        onPointerLeave: ()=>a(!1),\n        style: {\n            display: \"flex\",\n            alignItems: \"center\",\n            color: \"#fff\",\n            textDecoration: \"none\"\n        },\n        href: n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"16px\",\n            height: \"16px\",\n            backgroundPosition: \"center\",\n            backgroundSize: \"contain\",\n            backgroundRepeat: \"no-repeat\",\n            backgroundImage: `url(${s})`\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontSize: \"16px\",\n            fontWeight: 700,\n            marginLeft: \"13px\",\n            marginRight: \"14px\"\n        }\n    }, t), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        style: {\n            transition: \"transform 0.5s ease-in-out, opacity 0.2s ease-in-out\",\n            ...i && {\n                transform: \"translateX(4px)\",\n                opacity: 1\n            }\n        },\n        width: \"12\",\n        height: \"8\",\n        fill: \"none\",\n        opacity: \"0.5\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M7.293.293a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1 0 1.414l-3 3a1 1 0 0 1-1.414-1.414L8.586 5H1a1 1 0 0 1 0-2h7.586L7.293 1.707a1 1 0 0 1 0-1.414Z\",\n        fill: \"#fff\"\n    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontSize: \"12px\",\n            opacity: .5,\n            lineHeight: \"16px\"\n        }\n    }, r));\n}, \"Card\");\n\nvar _n = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"fixed\",\n            zIndex: 11,\n            inset: 0,\n            overflow: \"auto\",\n            width: \"100dvw\",\n            height: \"100dvh\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            padding: \"24px\",\n            background: \"#14141FBF\",\n            backdropFilter: \"blur(3px)\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            maxWidth: \"640px\",\n            width: \"100%\",\n            background: \"#1D1E30\",\n            borderRadius: \"16px\",\n            border: \"1px solid #303450\",\n            boxShadow: \"0px 0px 120px -24px #000000\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            padding: \"16px 20px\",\n            borderBottom: \"1px solid #303450\",\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"8px\",\n            position: \"relative\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(dc, {\n        style: {\n            position: \"absolute\",\n            left: 0,\n            top: 0\n        }\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            lineHeight: \"24px\",\n            fontSize: \"16px\",\n            color: \"#FFFFFF\",\n            display: \"flex\",\n            alignItems: \"center\",\n            gap: \"16px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(lc, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            fontWeight: 400\n        }\n    }, \"Configuration Error\"))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            padding: \"20px\",\n            color: \"#A3ADC2\",\n            lineHeight: \"20px\",\n            fontSize: \"14px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"20px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"p\", {\n        style: {\n            margin: 0,\n            padding: 0,\n            lineHeight: \"28px\",\n            fontSize: \"16px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"code\", {\n        style: {\n            display: \"inline-block\",\n            background: \"#30345080\",\n            padding: \"0 4px\",\n            lineHeight: \"24px\",\n            fontSize: \"16px\",\n            borderRadius: \"4px\",\n            color: \"#FFFFFF\"\n        }\n    }, \"<Refine />\"), \" \", \"is not initialized. Please make sure you have it mounted in your app and placed your components inside it.\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(pc, null)))))), \"ConfigErrorPage\"), pc = o(()=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"pre\", {\n        style: {\n            display: \"block\",\n            overflowX: \"auto\",\n            borderRadius: \"8px\",\n            fontSize: \"14px\",\n            lineHeight: \"24px\",\n            backgroundColor: \"#14141F\",\n            color: \"#E5ECF2\",\n            padding: \"16px\",\n            margin: \"0\",\n            maxHeight: \"400px\",\n            overflow: \"auto\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"import\"), \" \", \"{\", \" Refine, WelcomePage\", \" \", \"}\", \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"from\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#A5D6FF\"\n        }\n    }, '\"@refinedev/core\"'), \";\", `\n`, `\n`, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"export\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"default\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"function\"), \" \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FFA657\"\n        }\n    }, \"App\"), \"(\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"rgb(222, 147, 95)\"\n        }\n    }), \")\", \" \"), \"{\", `\n`, \"  \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#FF7B72\"\n        }\n    }, \"return\"), \" (\", `\n`, \"    \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"<\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"Refine\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#E5ECF2\",\n            opacity: .6\n        }\n    }, \"// \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, \"...\")), `\n`, \"    \", \">\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            opacity: .6\n        }\n    }, \"{\", \"/* ... */\", \"}\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"<\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"WelcomePage\"), \" />\"), `\n`, \"      \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            opacity: .6\n        }\n    }, \"{\", \"/* ... */\", \"}\"), `\n`, \"    \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"</\", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            color: \"#79C0FF\"\n        }\n    }, \"Refine\"), \">\")), `\n`, \"  \", \");\", `\n`, \"}\"), \"ExampleImplementation\"), dc = o((e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 204,\n        height: 56,\n        viewBox: \"0 0 204 56\",\n        fill: \"none\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-a)\",\n        d: \"M12 0H0v12L12 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-b)\",\n        d: \"M28 0h-8L0 20v8L28 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-c)\",\n        d: \"M36 0h8L0 44v-8L36 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-d)\",\n        d: \"M60 0h-8L0 52v4h4L60 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-e)\",\n        d: \"M68 0h8L20 56h-8L68 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-f)\",\n        d: \"M92 0h-8L28 56h8L92 0Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-g)\",\n        d: \"M100 0h8L52 56h-8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-h)\",\n        d: \"M124 0h-8L60 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-i)\",\n        d: \"M140 0h-8L76 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-j)\",\n        d: \"M132 0h8L84 56h-8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-k)\",\n        d: \"M156 0h-8L92 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-l)\",\n        d: \"M164 0h8l-56 56h-8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-m)\",\n        d: \"M188 0h-8l-56 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"url(#welcome-page-error-gradient-n)\",\n        d: \"M204 0h-8l-56 56h8l56-56Z\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-a\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-b\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-c\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-d\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-e\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-f\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-g\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-h\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-i\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-j\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-k\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-l\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-m\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: \"welcome-page-error-gradient-n\",\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"scale(124)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#FF4C4D\",\n        stopOpacity: .1\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#FF4C4D\",\n        stopOpacity: 0\n    })))), \"ErrorGradient\"), lc = o((e)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        viewBox: \"0 0 16 16\",\n        fill: \"none\",\n        ...e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#FF4C4D\",\n        fillRule: \"evenodd\",\n        d: \"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16Z\",\n        clipRule: \"evenodd\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#fff\",\n        fillRule: \"evenodd\",\n        d: \"M7 8a1 1 0 1 0 2 0V5a1 1 0 1 0-2 0v3Zm0 3a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z\",\n        clipRule: \"evenodd\"\n    })), \"ErrorIcon\");\nvar mc = o(()=>{\n    let { __initialized: e } = ge();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(zn, null), !e && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_n, null));\n}, \"WelcomePage\");\n\n\n\n\n\nvar fc = \"4.58.0\", jn = o(()=>{\n    var P;\n    let e = yo(), t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Et), { liveProvider: r } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(mt), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(er), n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Jt), { i18nProvider: i } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Xe), a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(qt), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ct), { resources: c } = q(), p = ge(), l = !!t.create || !!t.get || !!t.update, m = !!(r != null && r.publish) || !!(r != null && r.subscribe) || !!(r != null && r.unsubscribe), y = !!s.useHistory || !!s.Link || !!s.Prompt || !!s.useLocation || !!s.useParams, d = !!n, T = !!(i != null && i.changeLocale) || !!(i != null && i.getLocale) || !!(i != null && i.translate), x = !!a.close || !!a.open, v = !!u.can, f = (P = p == null ? void 0 : p.options) == null ? void 0 : P.projectId;\n    return {\n        providers: {\n            auth: e,\n            auditLog: l,\n            live: m,\n            router: y,\n            data: d,\n            i18n: T,\n            notification: x,\n            accessControl: v\n        },\n        version: fc,\n        resourceCount: c.length,\n        projectId: f\n    };\n}, \"useTelemetryData\");\nvar yc = o((e)=>{\n    try {\n        let t = JSON.stringify(e || {});\n        return typeof btoa < \"u\" ? btoa(t) : Buffer.from(t).toString(\"base64\");\n    } catch  {\n        return;\n    }\n}, \"encode\"), gc = o((e)=>{\n    let t = new Image;\n    t.src = e;\n}, \"throughImage\"), Tc = o((e)=>{\n    fetch(e);\n}, \"throughFetch\"), xc = o((e)=>{\n    typeof Image < \"u\" ? gc(e) : typeof fetch < \"u\" && Tc(e);\n}, \"transport\"), Zn = o(()=>{\n    let e = jn(), t = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (t.current) return;\n        let r = yc(e);\n        r && (xc(`https://telemetry.refine.dev/telemetry?payload=${r}`), t.current = !0);\n    }, []), null;\n}, \"Telemetry\");\nvar Yn = o((e)=>{\n    let t = [\n        \"go\",\n        \"parse\",\n        \"back\",\n        \"Link\"\n    ], r = Object.keys(e).filter((n)=>!t.includes(n));\n    return r.length > 0 ? (console.warn(`Unsupported properties are found in \\`routerProvider\\` prop. You provided \\`${r.join(\", \")}\\`. Supported properties are \\`${t.join(\", \")}\\`. You may wanted to use \\`legacyRouterProvider\\` prop instead.`), !0) : !1;\n}, \"checkRouterPropMisuse\");\n\nvar qn = o((e)=>{\n    let t = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t.current === !1 && e && Yn(e) && (t.current = !0);\n    }, [\n        e\n    ]);\n}, \"useRouterMisuseWarning\");\nvar Rc = o(({ legacyAuthProvider: e, authProvider: t, dataProvider: r, legacyRouterProvider: s, routerProvider: n, notificationProvider: i, accessControlProvider: a, auditLogProvider: u, resources: c, DashboardPage: p, ReadyPage: l, LoginPage: m, catchAll: y, children: d, liveProvider: T, i18nProvider: x, Title: v, Layout: f, Sider: P, Header: M, Footer: Q, OffLayoutArea: g, onLiveEvent: C, options: h })=>{\n    let { optionsWithDefaults: D, disableTelemetryWithDefault: A, reactQueryWithDefaults: E } = Jr({\n        options: h\n    }), L = kr(()=>{\n        var b;\n        return E.clientConfig instanceof _tanstack_react_query__WEBPACK_IMPORTED_MODULE_19__.QueryClient ? E.clientConfig : new _tanstack_react_query__WEBPACK_IMPORTED_MODULE_19__.QueryClient({\n            ...E.clientConfig,\n            defaultOptions: {\n                ...E.clientConfig.defaultOptions,\n                queries: {\n                    refetchOnWindowFocus: !1,\n                    keepPreviousData: !0,\n                    ...(b = E.clientConfig.defaultOptions) == null ? void 0 : b.queries\n                }\n            }\n        });\n    }, [\n        E.clientConfig\n    ]);\n    (0,_refinedev_devtools_internal__WEBPACK_IMPORTED_MODULE_10__.useQuerySubscription)(L);\n    let w = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>typeof i == \"function\" ? i : ()=>i, [\n        i\n    ])();\n    if (qn(n), s && !n && (c ?? []).length === 0) return l ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(l, null) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Qo, null);\n    let { RouterComponent: N = react__WEBPACK_IMPORTED_MODULE_0__.Fragment } = n ? {} : s ?? {};\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.QueryClientProvider, {\n        client: L\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(cn, {\n        ...w\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Zo, {\n        ...e ?? {},\n        isProvided: !!e\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Jo, {\n        ...t ?? {},\n        isProvided: !!t\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($s, {\n        dataProvider: r\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_s, {\n        liveProvider: T\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(qs, {\n        value: s && !n ? \"legacy\" : \"new\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(tn, {\n        router: n\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(xn, {\n        ...s\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Zs, {\n        resources: c ?? []\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(dn, {\n        i18nProvider: x\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Pn, {\n        ...a ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Mn, {\n        ...u ?? {}\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(an, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(cs, {\n        mutationMode: D.mutationMode,\n        warnWhenUnsavedChanges: D.warnWhenUnsavedChanges,\n        syncWithLocation: D.syncWithLocation,\n        Title: v,\n        undoableTimeout: D.undoableTimeout,\n        catchAll: y,\n        DashboardPage: p,\n        LoginPage: m,\n        Layout: f,\n        Sider: P,\n        Footer: Q,\n        Header: M,\n        OffLayoutArea: g,\n        hasDashboard: !!p,\n        liveMode: D.liveMode,\n        onLiveEvent: C,\n        options: D\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(fs, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(N, null, d, !A && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Zn, null), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Vo, null))))))))))))))))));\n}, \"Refine\");\n\nvar un = o(({ notification: e })=>{\n    let t = z(), { notificationDispatch: r } = ut(), { open: s } = He(), [n, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), a = o(()=>{\n        if (e.isRunning === !0 && (e.seconds === 0 && e.doMutation(), e.isSilent || s == null || s({\n            key: `${e.id}-${e.resource}-notification`,\n            type: \"progress\",\n            message: t(\"notifications.undoable\", {\n                seconds: Bt(e.seconds)\n            }, `You have ${Bt(e.seconds)} seconds to undo`),\n            cancelMutation: e.cancelMutation,\n            undoableTimeout: Bt(e.seconds)\n        }), e.seconds > 0)) {\n            n && clearTimeout(n);\n            let u = setTimeout(()=>{\n                r({\n                    type: \"DECREASE_NOTIFICATION_SECOND\",\n                    payload: {\n                        id: e.id,\n                        seconds: e.seconds,\n                        resource: e.resource\n                    }\n                });\n            }, 1e3);\n            i(u);\n        }\n    }, \"cancelNotification\");\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        a();\n    }, [\n        e\n    ]), null;\n}, \"UndoableQueue\");\n\nvar Dc = o(({ children: e, Layout: t, Sider: r, Header: s, Title: n, Footer: i, OffLayoutArea: a })=>{\n    let { Layout: u, Footer: c, Header: p, Sider: l, Title: m, OffLayoutArea: y } = ge();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(t ?? u, {\n        Sider: r ?? l,\n        Header: s ?? p,\n        Footer: i ?? c,\n        Title: n ?? m,\n        OffLayoutArea: a ?? y\n    }, e, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Uc, null));\n}, \"LayoutWrapper\"), Uc = o(()=>{\n    let { Prompt: e } = pe(), t = z(), { warnWhen: r, setWarnWhen: s } = vt(), n = o((i)=>(i.preventDefault(), i.returnValue = t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"), i.returnValue), \"warnWhenListener\");\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>(r && window.addEventListener(\"beforeunload\", n), window.removeEventListener(\"beforeunload\", n)), [\n        r\n    ]), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(e, {\n        when: r,\n        message: t(\"warnWhenUnsavedChanges\", \"Are you sure you want to leave? You have unsaved changes.\"),\n        setWarnWhen: s\n    });\n}, \"UnsavedPrompt\");\n\nfunction Ec({ redirectOnFail: e = !0, appendCurrentPathToQuery: t = !0, children: r, fallback: s, loading: n, params: i }) {\n    var C;\n    let a = ie(), u = oe(), c = !!(a != null && a.isProvided), p = !!(a != null && a.isLegacy), l = u === \"legacy\", m = Te(), y = Pe(), { useLocation: d } = pe(), T = d(), { isFetching: x, isSuccess: v, data: { authenticated: f, redirectTo: P } = {} } = wr({\n        v3LegacyAuthProviderCompatible: p,\n        params: i\n    }), M = c ? p ? v : f : !0;\n    if (!c) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, r ?? null);\n    if (x) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, n ?? null);\n    if (M) return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, r ?? null);\n    if (typeof s < \"u\") return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, s ?? null);\n    let Q = p ? typeof e == \"string\" ? e : \"/login\" : typeof e == \"string\" ? e : P, g = `${l ? T == null ? void 0 : T.pathname : m.pathname}`.replace(/(\\?.*|#.*)$/, \"\");\n    if (Q) {\n        if (l) {\n            let D = t ? `?to=${encodeURIComponent(g)}` : \"\";\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Mc, {\n                to: `${Q}${D}`\n            });\n        }\n        let h = (C = m.params) != null && C.to ? m.params.to : y({\n            to: g,\n            options: {\n                keepQuery: !0\n            },\n            type: \"path\"\n        });\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Lc, {\n            config: {\n                to: Q,\n                query: t && (h ?? \"\").length > 1 ? {\n                    to: h\n                } : void 0,\n                type: \"replace\"\n            }\n        });\n    }\n    return null;\n}\no(Ec, \"Authenticated\");\nvar Lc = o(({ config: e })=>{\n    let t = Pe();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t(e);\n    }, [\n        t,\n        e\n    ]), null;\n}, \"Redirect\"), Mc = o(({ to: e })=>{\n    let { replace: t } = he();\n    return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        t(e);\n    }, [\n        t,\n        e\n    ]), null;\n}, \"RedirectLegacy\");\n\nvar Vo = o(()=>{\n    let { useLocation: e } = pe(), { checkAuth: t } = xe(), r = e();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        t == null || t().catch(()=>!1);\n    }, [\n        r == null ? void 0 : r.pathname\n    ]), null;\n}, \"RouteChangeHandler\");\n\nvar Sc = o(({ resource: e, action: t, params: r, fallback: s, onUnauthorized: n, children: i, queryOptions: a, ...u })=>{\n    let { id: c, resource: p, action: l = \"\" } = qe({\n        resource: e,\n        id: r == null ? void 0 : r.id\n    }), m = t ?? l, y = r ?? {\n        id: c,\n        resource: p\n    }, { data: d } = Ar({\n        resource: p == null ? void 0 : p.name,\n        action: m,\n        params: y,\n        queryOptions: a\n    });\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        n && (d == null ? void 0 : d.can) === !1 && n({\n            resource: p == null ? void 0 : p.name,\n            action: m,\n            reason: d == null ? void 0 : d.reason,\n            params: y\n        });\n    }, [\n        d == null ? void 0 : d.can\n    ]), d != null && d.can ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(i) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(i, u) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, i) : (d == null ? void 0 : d.can) === !1 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, s ?? null) : null;\n}, \"CanAccess\");\n\nvar ta = [\n    `\n    .bg-top-announcement {\n        border-bottom: 1px solid rgba(71, 235, 235, 0.15);\n        background: radial-gradient(\n                218.19% 111.8% at 0% 0%,\n                rgba(71, 235, 235, 0.1) 0%,\n                rgba(71, 235, 235, 0.2) 100%\n            ),\n            #14141f;\n    }\n    `,\n    `\n    .top-announcement-mask {\n        mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);\n        -webkit-mask-image: url(https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/hexagon.svg);\n        mask-repeat: repeat;\n        -webkit-mask-repeat: repeat;\n        background: rgba(71, 235, 235, 0.25);\n    }\n    `,\n    `\n    .banner {\n        display: flex;\n        @media (max-width: 1000px) {\n            display: none;\n        }\n    }`,\n    `\n    .gh-link, .gh-link:hover, .gh-link:active, .gh-link:visited, .gh-link:focus {\n        text-decoration: none;\n        z-index: 9;\n    }\n    `,\n    `\n    @keyframes top-announcement-glow {\n        0% {\n            opacity: 1;\n        }\n\n        100% {\n            opacity: 0;\n        }\n    }\n    `\n];\nvar Ac = \"If you find Refine useful, you can contribute to its growth by giving it a star on GitHub\", Fc = o(({ containerStyle: e })=>((0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let t = document.createElement(\"style\");\n        document.head.appendChild(t), ta.forEach((r)=>{\n            var s;\n            return (s = t.sheet) == null ? void 0 : s.insertRule(r, t.sheet.cssRules.length);\n        });\n    }, []), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"banner bg-top-announcement\",\n        style: {\n            width: \"100%\",\n            height: \"48px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"relative\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            paddingLeft: \"200px\",\n            width: \"100%\",\n            maxWidth: \"100vw\",\n            height: \"100%\",\n            borderBottom: \"1px solid #47ebeb26\",\n            ...e\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"top-announcement-mask\",\n        style: {\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n            height: \"100%\",\n            borderBottom: \"1px solid #47ebeb26\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            position: \"relative\",\n            width: \"960px\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            margin: \"0 auto\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"calc(50% - 300px)\",\n            height: \"100%\",\n            position: \"relative\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Hr, {\n        style: {\n            animationDelay: \"1.5s\",\n            position: \"absolute\",\n            top: \"2px\",\n            right: \"220px\"\n        },\n        id: \"1\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Hr, {\n        style: {\n            animationDelay: \"1s\",\n            position: \"absolute\",\n            top: \"8px\",\n            right: \"100px\",\n            transform: \"rotate(180deg)\"\n        },\n        id: \"2\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ra, {\n        style: {\n            position: \"absolute\",\n            right: \"10px\"\n        },\n        id: \"3\"\n    })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            width: \"calc(50% - 300px)\",\n            height: \"100%\",\n            position: \"relative\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Hr, {\n        style: {\n            animationDelay: \"2s\",\n            position: \"absolute\",\n            top: \"6px\",\n            right: \"180px\",\n            transform: \"rotate(180deg)\"\n        },\n        id: \"4\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Hr, {\n        style: {\n            animationDelay: \"0.5s\",\n            transitionDelay: \"1.3s\",\n            position: \"absolute\",\n            top: \"2px\",\n            right: \"40px\"\n        },\n        id: \"5\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ra, {\n        style: {\n            position: \"absolute\",\n            right: \"-70px\"\n        },\n        id: \"6\"\n    })))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Qc, {\n        text: Ac\n    })))), \"GitHubBanner\"), Qc = o(({ text: e })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n        className: \"gh-link\",\n        href: \"https://s.refine.dev/github-support\",\n        target: \"_blank\",\n        rel: \"noreferrer\",\n        style: {\n            position: \"absolute\",\n            height: \"100%\",\n            padding: \"0 60px\",\n            display: \"flex\",\n            flexWrap: \"nowrap\",\n            whiteSpace: \"nowrap\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundImage: \"linear-gradient(90deg, rgba(31, 63, 72, 0.00) 0%, #1F3F48 10%, #1F3F48 90%, rgba(31, 63, 72, 0.00) 100%)\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            color: \"#fff\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            gap: \"8px\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, \"⭐️\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"text\",\n        style: {\n            fontSize: \"16px\",\n            lineHeight: \"24px\"\n        }\n    }, e), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, \"⭐️\"))), \"Text\"), Hr = o(({ style: e, ...t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 80,\n        height: 40,\n        fill: \"none\",\n        style: {\n            opacity: 1,\n            animation: \"top-announcement-glow 1s ease-in-out infinite alternate\",\n            ...e\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 40,\n        r: 40,\n        fill: `url(#${t.id}-a)`,\n        fillOpacity: .5\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: `${t.id}-a`,\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"matrix(0 40 -40 0 40 0)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#47EBEB\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#47EBEB\",\n        stopOpacity: 0\n    })))), \"GlowSmall\"), ra = o(({ style: e, ...t })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 120,\n        height: 48,\n        fill: \"none\",\n        ...t,\n        style: {\n            opacity: 1,\n            animation: \"top-announcement-glow 1s ease-in-out infinite alternate\",\n            ...e\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n        cx: 60,\n        cy: 24,\n        r: 60,\n        fill: `url(#${t.id}-a)`,\n        fillOpacity: .5\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"defs\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"radialGradient\", {\n        id: `${t.id}-a`,\n        cx: 0,\n        cy: 0,\n        r: 1,\n        gradientTransform: \"matrix(0 60 -60 0 60 24)\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        stopColor: \"#47EBEB\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"stop\", {\n        offset: 1,\n        stopColor: \"#47EBEB\",\n        stopOpacity: 0\n    })))), \"GlowBig\");\n\nvar Vc = o(({ status: e, elements: { success: t = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($r, {\n    translationKey: \"autoSave.success\",\n    defaultMessage: \"saved\"\n}), error: r = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($r, {\n    translationKey: \"autoSave.error\",\n    defaultMessage: \"auto save failure\"\n}), loading: s = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($r, {\n    translationKey: \"autoSave.loading\",\n    defaultMessage: \"saving...\"\n}), idle: n = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement($r, {\n    translationKey: \"autoSave.idle\",\n    defaultMessage: \"waiting for changes\"\n}) } = {} })=>{\n    switch(e){\n        case \"success\":\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, t);\n        case \"error\":\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, r);\n        case \"loading\":\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, s);\n        default:\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, n);\n    }\n}, \"AutoSaveIndicator\"), $r = o(({ translationKey: e, defaultMessage: t })=>{\n    let r = z();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", null, r(e, t));\n}, \"Message\");\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/core/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/devtools-internal/dist/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@refinedev/devtools-internal/dist/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTrace: () => (/* binding */ p),\n/* harmony export */   getXRay: () => (/* binding */ k),\n/* harmony export */   useQuerySubscription: () => (/* binding */ C)\n/* harmony export */ });\n/* harmony import */ var error_stack_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! error-stack-parser */ \"(ssr)/./node_modules/error-stack-parser/error-stack-parser.js\");\n/* harmony import */ var _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @refinedev/devtools-shared */ \"(ssr)/./node_modules/@refinedev/devtools-shared/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ getTrace,getXRay,useQuerySubscription auto */ \nvar T = \"renderWithHooks\", y = (r)=>{\n    let e = r.findIndex((n)=>n.functionName === T);\n    return e !== -1 ? r.slice(0, e) : r;\n};\nvar f =  false ? 0 : /\\/refine\\/packages\\/(?<name>.*?)\\//;\nvar d = (r)=>r ? !!r.match(f) : !1;\nvar m = (r)=>{\n    var o;\n    if (!r) return;\n    let e = r.match(f), n = (o = e == null ? void 0 : e.groups) == null ? void 0 : o.name;\n    if (n) return `@refinedev/${n}`;\n};\nfunction p(r) {\n    if (false) {}\n    try {\n        let e = new Error, n = error_stack_parser__WEBPACK_IMPORTED_MODULE_0__.parse(e);\n        return y(n).map((t)=>({\n                file: t.fileName,\n                line: t.lineNumber,\n                column: t.columnNumber,\n                function: t.functionName,\n                isRefine: d(t.fileName),\n                packageName: m(t.fileName)\n            })).filter((t)=>t.function).filter((t)=>!(r != null && r.includes(t.function ?? \"\"))).slice(1);\n    } catch  {\n        return [];\n    }\n}\n\nvar E = (r, e)=>{\n    if (_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.scopes[r] === \"auth\") return null;\n    if (r === \"useCan\") return e ? \"key[1].resource\" : \"key[1]\";\n    if (_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.scopes[r] === \"audit-log\") return r === \"useLog\" ? \"variables.resource\" : \"key[1]\";\n    if (_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.scopes[r] === \"data\") {\n        if (r === \"useCustom\" || r === \"useCustomMutation\") return null;\n        switch(r){\n            case \"useList\":\n            case \"useInfiniteList\":\n            case \"useOne\":\n            case \"useMany\":\n                return e ? \"key[1]\" : \"key[2]\";\n            case \"useCreate\":\n            case \"useCreateMany\":\n            case \"useDelete\":\n            case \"useDeleteMany\":\n            case \"useUpdate\":\n            case \"useUpdateMany\":\n                return \"variables.resource\";\n        }\n    }\n    return null;\n};\nfunction k(r, e, n, o) {\n    if (false) {}\n    let s = p(o).slice(1), t = E(r, e);\n    return {\n        hookName: r,\n        trace: s,\n        resourcePath: t,\n        legacyKey: e,\n        resourceName: n\n    };\n}\n\n\n\nvar l = (r, e)=>{\n    let n = e == null ? void 0 : e.map((s)=>`${s.file}:${s.line}:${s.column}#${s.function}-${s.packageName}-${s.isRefine ? 1 : 0}`);\n    return JSON.stringify([\n        ...r ?? [],\n        ...n ?? []\n    ]);\n};\nvar g = (r)=>(e)=>{\n        var o;\n        if (!((o = e == null ? void 0 : e.meta) != null && o.trace)) return;\n        let n = e == null ? void 0 : e.meta;\n        new Promise((s)=>{\n            var t, a;\n            (0,_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.send)(r, _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevtoolsEvent.ACTIVITY, {\n                type: \"mutation\",\n                identifier: l(e == null ? void 0 : e.options.mutationKey, (t = e == null ? void 0 : e.meta) == null ? void 0 : t.trace),\n                key: e == null ? void 0 : e.options.mutationKey,\n                status: e == null ? void 0 : e.state.status,\n                state: e == null ? void 0 : e.state,\n                variables: (a = e == null ? void 0 : e.state) == null ? void 0 : a.variables,\n                ...n\n            }), s();\n        });\n    }, R = (r)=>(e)=>{\n        var o;\n        if (!((o = e == null ? void 0 : e.meta) != null && o.trace)) return;\n        let n = e == null ? void 0 : e.meta;\n        new Promise((s)=>{\n            var t;\n            (0,_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.send)(r, _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevtoolsEvent.ACTIVITY, {\n                type: \"query\",\n                identifier: l(e.queryKey, (t = e.meta) == null ? void 0 : t.trace),\n                key: e.queryKey,\n                status: e.state.status,\n                state: e.state,\n                ...n\n            }), s();\n        });\n    };\nvar b = {}, x = ()=>b, C =  false ? 0 : (r)=>{\n    let { ws: e } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevToolsContext), n = react__WEBPACK_IMPORTED_MODULE_2__.useRef(), o = react__WEBPACK_IMPORTED_MODULE_2__.useRef();\n    return react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (!e) return ()=>0;\n        let s = r.getQueryCache(), t = R(e);\n        return s.getAll().forEach(t), n.current = s.subscribe(({ query: a, type: c })=>(c === \"added\" || c === \"updated\") && t(a)), ()=>{\n            var a;\n            (a = n.current) == null || a.call(n);\n        };\n    }, [\n        e,\n        r\n    ]), react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (!e) return ()=>0;\n        let s = r.getMutationCache(), t = g(e);\n        return s.getAll().forEach(t), o.current = s.subscribe(({ mutation: a, type: c })=>(c === \"added\" || c === \"updated\") && t(a)), ()=>{\n            var a;\n            (a = o.current) == null || a.call(o);\n        };\n    }, [\n        e,\n        r\n    ]), react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>e ? (0,_refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.receive)(e, _refinedev_devtools_shared__WEBPACK_IMPORTED_MODULE_1__.DevtoolsEvent.DEVTOOLS_INVALIDATE_QUERY_ACTION, ({ queryKey: t })=>{\n            t && r.invalidateQueries(t);\n        }) : ()=>0, [\n        e,\n        r\n    ]), {};\n};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/devtools-internal/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/devtools-shared/dist/index.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/@refinedev/devtools-shared/dist/index.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DevToolsContext: () => (/* binding */ p),\n/* harmony export */   DevToolsContextProvider: () => (/* binding */ D),\n/* harmony export */   DevtoolsEvent: () => (/* binding */ c),\n/* harmony export */   hooksByScope: () => (/* binding */ L),\n/* harmony export */   receive: () => (/* binding */ _),\n/* harmony export */   scopes: () => (/* binding */ T),\n/* harmony export */   send: () => (/* binding */ d)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ DevToolsContext,DevToolsContextProvider,DevtoolsEvent,hooksByScope,receive,scopes,send auto */ var c = ((t)=>(t.RELOAD = \"devtools:reload\", t.DEVTOOLS_INIT = \"devtools:init\", t.DEVTOOLS_ALREADY_CONNECTED = \"devtools:already-connected\", t.ACTIVITY = \"devtools:send-activity\", t.DEVTOOLS_ACTIVITY_UPDATE = \"devtools:activity-update\", t.DEVTOOLS_CONNECTED_APP = \"devtools:connected-app\", t.DEVTOOLS_DISCONNECTED_APP = \"devtools:disconnected-app\", t.DEVTOOLS_HIGHLIGHT_IN_MONITOR = \"devtools:highlight-in-monitor\", t.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION = \"devtools:highlight-in-monitor-action\", t.DEVTOOLS_LOGIN_SUCCESS = \"devtools:login-success\", t.DEVTOOLS_DISPLAY_LOGIN_FAILURE = \"devtools:display-login-failure\", t.DEVTOOLS_LOGIN_FAILURE = \"devtools:login-failure\", t.DEVTOOLS_RELOAD_AFTER_LOGIN = \"devtools:reload-after-login\", t.DEVTOOLS_INVALIDATE_QUERY = \"devtools:invalidate-query\", t.DEVTOOLS_INVALIDATE_QUERY_ACTION = \"devtools:invalidate-query-action\", t))(c || {});\nvar T = {\n    useCan: \"access-control\",\n    useLog: \"audit-log\",\n    useLogList: \"audit-log\",\n    useCreate: \"data\",\n    useCreateMany: \"data\",\n    useCustom: \"data\",\n    useCustomMutation: \"data\",\n    useDelete: \"data\",\n    useDeleteMany: \"data\",\n    useInfiniteList: \"data\",\n    useList: \"data\",\n    useMany: \"data\",\n    useOne: \"data\",\n    useUpdate: \"data\",\n    useUpdateMany: \"data\",\n    useForgotPassword: \"auth\",\n    useGetIdentity: \"auth\",\n    useIsAuthenticated: \"auth\",\n    useLogin: \"auth\",\n    useLogout: \"auth\",\n    useOnError: \"auth\",\n    usePermissions: \"auth\",\n    useRegister: \"auth\",\n    useUpdatePassword: \"auth\"\n}, L = Object.entries(T).reduce((e, [o, s])=>(e[s] || (e[s] = []), e[s].push(o), e), {});\n\nasync function d(e, o, s) {\n    if (e.readyState !== e.OPEN) {\n        await new Promise((n)=>{\n            let r = ()=>{\n                e.send(JSON.stringify({\n                    event: o,\n                    payload: s\n                })), n(), e.removeEventListener(\"open\", r);\n            };\n            e.addEventListener(\"open\", r);\n        });\n        return;\n    }\n    e.send(JSON.stringify({\n        event: o,\n        payload: s\n    }));\n}\nvar p = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    __devtools: !1,\n    httpUrl: \"http://localhost:5001\",\n    wsUrl: \"ws://localhost:5001\",\n    ws: null\n}), D = ({ __devtools: e, url: o = [\n    \"http://localhost:5001\",\n    \"ws://localhost:5001\"\n], children: s })=>{\n    let n = Array.isArray(o) ? o[0] : o, r = Array.isArray(o) ? o[1] : o.replace(/http(s)?:\\/\\//, \"ws$1://\"), [i, y] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        __devtools: e ?? !1,\n        httpUrl: n,\n        wsUrl: r,\n        ws: null\n    }), [O, v] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let l = null, a = new WebSocket(i.wsUrl);\n        return a.addEventListener(\"open\", ()=>{\n            i.__devtools || (l = setTimeout(()=>{\n                d(a, \"devtools:init\", {\n                    url: window.location.origin\n                });\n            }, 300));\n        }), v(a), ()=>{\n            l && clearTimeout(l), a.readyState === WebSocket.CONNECTING ? a.addEventListener(\"open\", ()=>{\n                a.close(1e3, window.location.origin);\n            }) : a.close(1e3, window.location.origin);\n        };\n    }, []);\n    let E = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            ...i,\n            ws: O\n        }), [\n        i,\n        O\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(p.Provider, {\n        value: E\n    }, s);\n};\nfunction _(e, o, s) {\n    let n = (r)=>{\n        let { event: i, payload: y } = JSON.parse(r.data);\n        o === i && s(y);\n    };\n    return e.addEventListener(\"message\", n), ()=>{\n        e.removeEventListener(\"message\", n);\n    };\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/devtools-shared/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/nextjs-router/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@refinedev/nextjs-router/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NavigateToResource: () => (/* binding */ v),\n/* harmony export */   RefineRoutes: () => (/* binding */ M),\n/* harmony export */   \"default\": () => (/* binding */ k),\n/* harmony export */   paramsFromCurrentPath: () => (/* binding */ P),\n/* harmony export */   parseTableParams: () => (/* binding */ H),\n/* harmony export */   stringifyConfig: () => (/* binding */ T)\n/* harmony export */ });\n/* harmony import */ var _refinedev_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @refinedev/core */ \"(ssr)/./node_modules/@refinedev/core/dist/index.mjs\");\n/* harmony import */ var next_navigation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/navigation.js */ \"(ssr)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var next_link_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link.js */ \"(ssr)/./node_modules/next/dist/api/link.js\");\n/* harmony import */ var qs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! qs */ \"(ssr)/./node_modules/qs/lib/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ NavigateToResource,RefineRoutes,default,paramsFromCurrentPath,parseTableParams,stringifyConfig auto */ \n\n\n\n\nvar P = (e, r)=>{\n    let t = {}, o = r.replace(/^\\/|\\/$/g, \"\"), n = e.replace(/^\\/|\\/$/g, \"\"), s = o.split(\"/\"), a = n.split(\"/\");\n    return s.forEach((i, u)=>{\n        var p;\n        i.startsWith(\":\") && ((p = a[u]) == null ? void 0 : p.length) > 0 && (t[i.replace(\":\", \"\")] = a[u]);\n    }), t;\n};\nvar R = (e)=>{\n    if (typeof e > \"u\") return e;\n    let r = Number(e);\n    return `${r}` === e ? r : e;\n};\nvar T = {\n    addQueryPrefix: !0,\n    skipNulls: !0,\n    arrayFormat: \"indices\",\n    encode: !1,\n    encodeValuesOnly: !0\n}, k = {\n    go: ()=>{\n        let { push: e, replace: r } = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useRouter)(), t = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.usePathname)(), o = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useSearchParams)();\n        return react__WEBPACK_IMPORTED_MODULE_2__.useCallback(({ to: s, type: a, query: i, options: { keepQuery: u, keepHash: p } = {}, hash: c })=>{\n            let m = \"\";\n            p && typeof document < \"u\" && (m = document.location.hash), c && (m = `#${c.replace(/^#/, \"\")}`);\n            let d = {\n                ...u ? qs__WEBPACK_IMPORTED_MODULE_3__.parse(o.toString(), {\n                    ignoreQueryPrefix: !0\n                }) : {},\n                ...i\n            };\n            d.to && (d.to = encodeURIComponent(`${d.to}`));\n            let N = (t == null ? void 0 : t.split(\"?\")[0].split(\"#\")[0]) ?? \"\", S = s || N, $ = m.length > 1, z = Object.keys(d).length > 0, g = `${S}${z ? qs__WEBPACK_IMPORTED_MODULE_3__.stringify(d, T) : \"\"}${$ ? m : \"\"}`;\n            if (a === \"path\") return g;\n            a === \"replace\" ? r(g) : e(g);\n        }, [\n            o,\n            e,\n            r\n        ]);\n    },\n    back: ()=>{\n        let { back: e } = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useRouter)();\n        return e;\n    },\n    parse: ()=>{\n        let e = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.usePathname)(), r = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useSearchParams)(), { resources: t } = (0,react__WEBPACK_IMPORTED_MODULE_2__.useContext)(_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.ResourceContext), { resource: o, action: n, matchedRoute: s } = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>e ? (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.matchResourceFromRoute)(e, t) : {\n                found: !1\n            }, [\n            e,\n            t\n        ]), a = s && e ? P(e, s) : {}, i = a.id, u = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>{\n            let c = r.toString();\n            return qs__WEBPACK_IMPORTED_MODULE_3__.parse(c, {\n                ignoreQueryPrefix: !0\n            });\n        }, [\n            r\n        ]);\n        return react__WEBPACK_IMPORTED_MODULE_2__.useCallback(()=>{\n            let c = {\n                ...a,\n                ...u\n            };\n            return {\n                ...o && {\n                    resource: o\n                },\n                ...n && {\n                    action: n\n                },\n                ...i && {\n                    id: decodeURIComponent(i)\n                },\n                pathname: e || void 0,\n                params: {\n                    ...c,\n                    current: R(c.current),\n                    pageSize: R(c.pageSize),\n                    to: c.to ? decodeURIComponent(c.to) : void 0\n                }\n            };\n        }, [\n            e,\n            u,\n            a,\n            i,\n            o,\n            n\n        ]);\n    },\n    Link: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef(function({ to: r, ...t }, o) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(next_link_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n            href: r,\n            ...t,\n            ref: o\n        });\n    })\n};\n\n\n\nvar M = ({ children: e })=>{\n    let { resource: r, action: t } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.useResource)(), o = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.usePathname)(), n = r && t ? r[t] : void 0, s = typeof n == \"function\" ? n : typeof n == \"object\" ? n.component : void 0;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(react__WEBPACK_IMPORTED_MODULE_2__.Fragment, null, e ? e(s ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(s, null) : void 0, o ?? void 0) : s ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(s, null) : void 0);\n};\n\n\n\nvar v = ({ resource: e, meta: r })=>{\n    let t = react__WEBPACK_IMPORTED_MODULE_2__.useRef(!1), { replace: o } = (0,next_navigation_js__WEBPACK_IMPORTED_MODULE_0__.useRouter)(), n = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.useGetToPath)(), { resource: s, resources: a } = (0,_refinedev_core__WEBPACK_IMPORTED_MODULE_4__.useResource)(e), i = react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>s || a.find((u)=>u.list), [\n        s,\n        a\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        if (i && !t.current) {\n            let u = n({\n                resource: i,\n                action: \"list\",\n                meta: r\n            });\n            u && o(u), t.current = !0;\n        }\n    }, [\n        i,\n        o,\n        r,\n        n\n    ]), null;\n};\n\nvar G = (e)=>{\n    let r = qs__WEBPACK_IMPORTED_MODULE_3__.parse(e, {\n        ignoreQueryPrefix: !0\n    }), t = {\n        ...r,\n        pagination: {\n            current: r.current,\n            pageSize: r.pageSize\n        }\n    };\n    return delete t.current, delete t.pageSize, t;\n}, H = G;\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/nextjs-router/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@refinedev/ui-types/dist/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@refinedev/ui-types/dist/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RefineButtonClassNames: () => (/* binding */ n),\n/* harmony export */   RefineButtonTestIds: () => (/* binding */ e),\n/* harmony export */   RefinePageHeaderClassNames: () => (/* binding */ o)\n/* harmony export */ });\nvar e={CloneButton:\"refine-clone-button\",DeleteButton:\"refine-delete-button\",EditButton:\"refine-edit-button\",SaveButton:\"refine-save-button\",CreateButton:\"refine-create-button\",ImportButton:\"refine-import-button\",ExportButton:\"refine-export-button\",ListButton:\"refine-list-button\",RefreshButton:\"refine-refresh-button\",ShowButton:\"refine-show-button\"};var o={Title:\"refine-pageHeader-title\",SubTitle:\"refine-pageHeader-subTitle\"},n={CloneButton:\"refine-clone-button\",DeleteButton:\"refine-delete-button\",EditButton:\"refine-edit-button\",SaveButton:\"refine-save-button\",CreateButton:\"refine-create-button\",ImportButton:\"refine-import-button\",ExportButton:\"refine-export-button\",ListButton:\"refine-list-button\",RefreshButton:\"refine-refresh-button\",ShowButton:\"refine-show-button\"};\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlZmluZWRldi91aS10eXBlcy9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLHlWQUF5VixPQUFPLHNFQUFzRSxJQUFJLHlWQUFzYjtBQUN2MkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtcmVmaW5lLWFwcC8uL25vZGVfbW9kdWxlcy9AcmVmaW5lZGV2L3VpLXR5cGVzL2Rpc3QvaW5kZXgubWpzPzczMWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGU9e0Nsb25lQnV0dG9uOlwicmVmaW5lLWNsb25lLWJ1dHRvblwiLERlbGV0ZUJ1dHRvbjpcInJlZmluZS1kZWxldGUtYnV0dG9uXCIsRWRpdEJ1dHRvbjpcInJlZmluZS1lZGl0LWJ1dHRvblwiLFNhdmVCdXR0b246XCJyZWZpbmUtc2F2ZS1idXR0b25cIixDcmVhdGVCdXR0b246XCJyZWZpbmUtY3JlYXRlLWJ1dHRvblwiLEltcG9ydEJ1dHRvbjpcInJlZmluZS1pbXBvcnQtYnV0dG9uXCIsRXhwb3J0QnV0dG9uOlwicmVmaW5lLWV4cG9ydC1idXR0b25cIixMaXN0QnV0dG9uOlwicmVmaW5lLWxpc3QtYnV0dG9uXCIsUmVmcmVzaEJ1dHRvbjpcInJlZmluZS1yZWZyZXNoLWJ1dHRvblwiLFNob3dCdXR0b246XCJyZWZpbmUtc2hvdy1idXR0b25cIn07dmFyIG89e1RpdGxlOlwicmVmaW5lLXBhZ2VIZWFkZXItdGl0bGVcIixTdWJUaXRsZTpcInJlZmluZS1wYWdlSGVhZGVyLXN1YlRpdGxlXCJ9LG49e0Nsb25lQnV0dG9uOlwicmVmaW5lLWNsb25lLWJ1dHRvblwiLERlbGV0ZUJ1dHRvbjpcInJlZmluZS1kZWxldGUtYnV0dG9uXCIsRWRpdEJ1dHRvbjpcInJlZmluZS1lZGl0LWJ1dHRvblwiLFNhdmVCdXR0b246XCJyZWZpbmUtc2F2ZS1idXR0b25cIixDcmVhdGVCdXR0b246XCJyZWZpbmUtY3JlYXRlLWJ1dHRvblwiLEltcG9ydEJ1dHRvbjpcInJlZmluZS1pbXBvcnQtYnV0dG9uXCIsRXhwb3J0QnV0dG9uOlwicmVmaW5lLWV4cG9ydC1idXR0b25cIixMaXN0QnV0dG9uOlwicmVmaW5lLWxpc3QtYnV0dG9uXCIsUmVmcmVzaEJ1dHRvbjpcInJlZmluZS1yZWZyZXNoLWJ1dHRvblwiLFNob3dCdXR0b246XCJyZWZpbmUtc2hvdy1idXR0b25cIn07ZXhwb3J0e24gYXMgUmVmaW5lQnV0dG9uQ2xhc3NOYW1lcyxlIGFzIFJlZmluZUJ1dHRvblRlc3RJZHMsbyBhcyBSZWZpbmVQYWdlSGVhZGVyQ2xhc3NOYW1lc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@refinedev/ui-types/dist/index.mjs\n");

/***/ })

};
;